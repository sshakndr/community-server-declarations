{
  "openapi": "3.1.0",
  "info": {
    "title": "Community Server REST API",
    "version": "latest"
  },
  "paths": {
    "/api/2.0/CalendarApi/calendars/{startDate}/{endDate}": {
      "get": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get calendars",
        "description": "Returns a list of calendars with the events for the current user in the selected period.",
        "parameters": [
          {
            "name": "startDate",
            "in": "path",
            "description": "Period start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "path",
            "description": "Period end date",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of calendars with events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/calendar/{calendarId}/{startDate}/{endDate}": {
      "get": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get calendar events",
        "description": "Returns a calendar with the events for the current user in the selected period.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "path",
            "description": "Period start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "path",
            "description": "Period end date",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calendar with events",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/subscriptions": {
      "get": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get subscriptions",
        "description": "Returns a list of all the subscriptions available to the current user.\n\n**Note**: Please note that the list of events in the response will be empty.",
        "responses": {
          "200": {
            "description": "List of subscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/{calendarId}": {
      "get": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a calendar by ID",
        "description": "Returns the detailed information about a calendar with the ID specified in the request.\n\n**Note**: Please note that the list of events in the response will be empty.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calendar",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a calendar",
        "description": "Updates the selected calendar with the parameters (name, description, color, etc.) specified in the request.\n\n**Note**: Please note that the list of events in the response will be empty.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "body",
            "description": "New calendar name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "New calendar description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "textColor",
            "in": "body",
            "description": "New event text color",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "backgroundColor",
            "in": "body",
            "description": "New event background color",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeZone",
            "in": "body",
            "description": "New calendar time zone",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alertType",
            "in": "body",
            "description": "New event alert type, in case alert type is set by default",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Never",
                "FiveMinutes",
                "FifteenMinutes",
                "HalfHour",
                "Hour",
                "TwoHours",
                "Day",
                "Default"
              ],
              "description": "[0 - Never, 1 - FiveMinutes, 2 - FifteenMinutes, 3 - HalfHour, 4 - Hour, 5 - TwoHours, 6 - Day, -1 - Default]"
            }
          },
          {
            "name": "hideEvents",
            "in": "body",
            "description": "Display type: show or hide events in the calendar",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sharingOptions",
            "in": "body",
            "description": "New calendar sharing options with other users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SharingParam"
              }
            }
          },
          {
            "name": "iCalUrl",
            "in": "body",
            "description": "New iCal URL",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated calendar",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a calendar",
        "description": "Deletes a calendar with the ID specified in the request.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task awaiter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/": {
      "post": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a calendar",
        "description": "Creates a new calendar with the parameters (name, description, color, etc.) specified in the request.\n\n**Note**: Please note that the list of events in the response will be empty.",
        "parameters": [
          {
            "name": "name",
            "in": "body",
            "description": "Calendar name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "Calendar description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "textColor",
            "in": "body",
            "description": "Event text color",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "backgroundColor",
            "in": "body",
            "description": "Event background color",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeZone",
            "in": "body",
            "description": "Calendar time zone",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alertType",
            "in": "body",
            "description": "Event alert type, in case alert type is set by default",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Never",
                "FiveMinutes",
                "FifteenMinutes",
                "HalfHour",
                "Hour",
                "TwoHours",
                "Day",
                "Default"
              ],
              "description": "[0 - Never, 1 - FiveMinutes, 2 - FifteenMinutes, 3 - HalfHour, 4 - Hour, 5 - TwoHours, 6 - Day, -1 - Default]"
            }
          },
          {
            "name": "sharingOptions",
            "in": "body",
            "description": "Calendar sharing options with other users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SharingParam"
              }
            }
          },
          {
            "name": "iCalUrl",
            "in": "body",
            "description": "iCal URL",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isTodo",
            "in": "body",
            "description": "Defines if the to-dos are shown in the calendar",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created calendar",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/{calendarId}/view": {
      "put": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the calendar view",
        "description": "Updates the calendar display parameters specified in the request for the current user.\n\n**Note**: Please note that the list of events in the response will be empty.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "body",
            "description": "New calendar name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "textColor",
            "in": "body",
            "description": "New event text color",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "backgroundColor",
            "in": "body",
            "description": "New event background color",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeZone",
            "in": "body",
            "description": "New calendar time zone",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alertType",
            "in": "body",
            "description": "New event alert type, in case alert type is set by default",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Never",
                "FiveMinutes",
                "FifteenMinutes",
                "HalfHour",
                "Hour",
                "TwoHours",
                "Day",
                "Default"
              ],
              "description": "[0 - Never, 1 - FiveMinutes, 2 - FifteenMinutes, 3 - HalfHour, 4 - Hour, 5 - TwoHours, 6 - Day, -1 - Default]"
            }
          },
          {
            "name": "hideEvents",
            "in": "body",
            "description": "Display type: show or hide events in the calendar",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated calendar",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/{calendarId}/icalurl": {
      "get": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get iCal link",
        "description": "Returns a link to the iCal related to the calendar with the ID specified in the request.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "iCal link",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/{calendarId}/caldavurl": {
      "get": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get CalDav link",
        "description": "Returns a link to the CalDav related to the calendar with the ID specified in the request.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uri",
            "in": "body",
            "description": "Current URI",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CalDav link",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DavResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/{calendarId}/ical/{signature}": {
      "get": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "summary": "Get the iCal feed",
        "description": "Returns the iCal feed associated with the calendar by its ID and signagure specified in the request.\n\n**Note**: To get the feed, you need to use the method returning the iCal feed link (it will generate the necessary signature).",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "signature",
            "in": "path",
            "description": "Signature",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calendar iCal feed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calendar"
                }
              }
            }
          }
        }
      }
    },
    "/api/2.0/CalendarApi/import": {
      "post": {
        "tags": [
          "CalendarApi/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Import the iCal events to the default calendar",
        "description": "Imports the events from the iCal files to the default calendar.",
        "parameters": [
          {
            "name": "files",
            "in": "body",
            "description": "The iCal files with the events",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The number of imported events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/{calendarId}/import": {
      "post": {
        "tags": [
          "CalendarApi/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Import the iCal events to the specified calendar",
        "description": "Imports the events from the iCal files to the calendar with the ID specified in the request.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "files",
            "in": "body",
            "description": "The iCal files with the events",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The number of imported events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/importIcs": {
      "post": {
        "tags": [
          "CalendarApi/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Import the events from the iCal string",
        "description": "Imports the events from the iCal string to the calendar with the ID specified in the request.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "body",
            "description": "Calendar ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "iCalString",
            "in": "body",
            "description": "The iCal string with the events to be imported",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The number of imported events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/calendarUrl": {
      "post": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a calendar by the iCal link",
        "description": "Creates a calendar by the link to the external iCal feed.\n\n**Note**: Please note that the list of events in the response will be empty.",
        "parameters": [
          {
            "name": "iCalUrl",
            "in": "body",
            "description": "Link to the external iCal feed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "body",
            "description": "Calendar name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "textColor",
            "in": "body",
            "description": "Event text color",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "backgroundColor",
            "in": "body",
            "description": "Event background name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created calendar",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/event": {
      "post": {
        "tags": [
          "CalendarApi/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a new event in the default calendar",
        "description": "Creates a new event in the default calendar with the parameters specified in the request.",
        "parameters": [
          {
            "name": "name",
            "in": "body",
            "description": "Event name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "Event description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "body",
            "description": "Event start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "body",
            "description": "Event end date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repeatType",
            "in": "body",
            "description": "Event repeat type (RRULE string in the iCal format)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alertType",
            "in": "body",
            "description": "Event notification type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Never",
                "FiveMinutes",
                "FifteenMinutes",
                "HalfHour",
                "Hour",
                "TwoHours",
                "Day",
                "Default"
              ],
              "description": "[0 - Never, 1 - FiveMinutes, 2 - FifteenMinutes, 3 - HalfHour, 4 - Hour, 5 - TwoHours, 6 - Day, -1 - Default]"
            }
          },
          {
            "name": "isAllDayLong",
            "in": "body",
            "description": "Event duration type: all day long or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sharingOptions",
            "in": "body",
            "description": "Event sharing access parameters",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SharingParam"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/{calendarId}/event": {
      "post": {
        "tags": [
          "CalendarApi/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a new event in the selected calendar",
        "description": "Creates a new event in the selected calendar with the parameters specified in the request.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "body",
            "description": "Event name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "Event description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "body",
            "description": "Event start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "body",
            "description": "Event end date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repeatType",
            "in": "body",
            "description": "Event repeat type (RRULE string in the iCal format)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alertType",
            "in": "body",
            "description": "Event notification type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Never",
                "FiveMinutes",
                "FifteenMinutes",
                "HalfHour",
                "Hour",
                "TwoHours",
                "Day",
                "Default"
              ],
              "description": "[0 - Never, 1 - FiveMinutes, 2 - FifteenMinutes, 3 - HalfHour, 4 - Hour, 5 - TwoHours, 6 - Day, -1 - Default]"
            }
          },
          {
            "name": "isAllDayLong",
            "in": "body",
            "description": "Event duration type: all day long or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sharingOptions",
            "in": "body",
            "description": "Event sharing access parameters",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SharingParam"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/{calendarId}/{eventId}": {
      "put": {
        "tags": [
          "CalendarApi/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update an event",
        "description": "Updates the existing event in the selected calendar with the parameters specified in the request.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Event ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "body",
            "description": "New event name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "New event description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "body",
            "description": "New event start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "body",
            "description": "New event end date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repeatType",
            "in": "body",
            "description": "New event repeat type (RRULE string in the iCal format)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alertType",
            "in": "body",
            "description": "New event notification type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Never",
                "FiveMinutes",
                "FifteenMinutes",
                "HalfHour",
                "Hour",
                "TwoHours",
                "Day",
                "Default"
              ],
              "description": "[0 - Never, 1 - FiveMinutes, 2 - FifteenMinutes, 3 - HalfHour, 4 - Hour, 5 - TwoHours, 6 - Day, -1 - Default]"
            }
          },
          {
            "name": "isAllDayLong",
            "in": "body",
            "description": "New event duration type: all day long or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sharingOptions",
            "in": "body",
            "description": "New event sharing access parameters",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SharingParam"
              }
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "New event status",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Tentative",
                "Confirmed",
                "Cancelled"
              ],
              "description": "[0 - Tentative, 1 - Confirmed, 2 - Cancelled]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated list of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/icstodo": {
      "post": {
        "tags": [
          "CalendarApi/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a new task",
        "description": "Creates a new task in the selected calendar with the parameters specified in the request.",
        "parameters": [
          {
            "name": "ics",
            "in": "body",
            "description": "Task in the iCal format",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "todoUid",
            "in": "body",
            "description": "Task UID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TodoWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "CalendarApi/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a task",
        "description": "Updates the existing task with the parameters specified in the request.",
        "parameters": [
          {
            "name": "todoId",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "calendarId",
            "in": "body",
            "description": "Calendar ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ics",
            "in": "body",
            "description": "Task in the iCal format",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromCalDavServer",
            "in": "body",
            "description": "Defines if the request is from the CalDav server or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated task",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TodoWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/todos/{todoId}": {
      "delete": {
        "tags": [
          "CalendarApi/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a task",
        "description": "Deletes a task with the ID specified in the request.",
        "parameters": [
          {
            "name": "todoId",
            "in": "path",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fromCaldavServer",
            "in": "body",
            "description": "Defines if the request is from the CalDav server or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task awaiter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/outsideevent": {
      "post": {
        "tags": [
          "CalendarApi/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add the iCal event",
        "description": "Adds the iCal event to the calendar specified in the request.",
        "parameters": [
          {
            "name": "calendarGuid",
            "in": "body",
            "description": "Calendar GUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventGuid",
            "in": "body",
            "description": "Event GUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ics",
            "in": "body",
            "description": "Event in the iCal format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task awaiter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/caldavprojcal": {
      "delete": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a project calendar",
        "description": "Deletes a project calendar with the ID specified in the request.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "body",
            "description": "Calendar ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team",
            "in": "body",
            "description": "Project team",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task awaiter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/refreshcaldavcalendar": {
      "put": {
        "tags": [
          "CalendarApi/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Refresh CalDav calendar",
        "description": "Refreshes the caldav calendar with the id specified in the request.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "body",
            "description": "Calendar ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team",
            "in": "body",
            "description": "User list",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "/api/2.0/CalendarApi/caldavevent": {
      "delete": {
        "tags": [
          "CalendarApi/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete the CalDav event",
        "description": "Deletes the CalDav event from the calendar with the ID specified in the request.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "body",
            "description": "Calendar ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uid",
            "in": "body",
            "description": "Event UID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responsibles",
            "in": "body",
            "description": "Task responsibles",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task awaiter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "CalendarApi/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the CalDav event",
        "description": "Updates the existing CalDav event in the calendar with the ID specified in the request.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "body",
            "description": "Calendar ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uid",
            "in": "body",
            "description": "Event UID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alert",
            "in": "body",
            "description": "Defines how many minutes before the event a reminder will be displayed",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responsibles",
            "in": "body",
            "description": "Task responsibles",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task awaiter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/utcoffset": {
      "post": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the UTC offset",
        "description": "Returns the time offset in the specified time zone compared to Coordinated Universal Time (UTC) for the particular dates.",
        "parameters": [
          {
            "name": "timeZone",
            "in": "body",
            "description": "Time zone ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "body",
            "description": "Start date to determine the offset",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "body",
            "description": "End date to determine the offset",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The UTC offset in minutes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/icsevent": {
      "post": {
        "tags": [
          "CalendarApi/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a new iCal event",
        "description": "Creates a new iCal event in the selected calendar with the parameters specified in the request.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "body",
            "description": "Calendar ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ics",
            "in": "body",
            "description": "Event in the iCal format",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alertType",
            "in": "body",
            "description": "Event notification type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Never",
                "FiveMinutes",
                "FifteenMinutes",
                "HalfHour",
                "Hour",
                "TwoHours",
                "Day",
                "Default"
              ],
              "description": "[0 - Never, 1 - FiveMinutes, 2 - FifteenMinutes, 3 - HalfHour, 4 - Hour, 5 - TwoHours, 6 - Day, -1 - Default]"
            }
          },
          {
            "name": "sharingOptions",
            "in": "body",
            "description": "Event sharing access parameters",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SharingParam"
              }
            }
          },
          {
            "name": "eventUid",
            "in": "body",
            "description": "Event UID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "CalendarApi/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the iCal event",
        "description": "Updates the existing iCal event in the selected calendar with the ID specified in the request.",
        "parameters": [
          {
            "name": "eventId",
            "in": "body",
            "description": "Event ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "calendarId",
            "in": "body",
            "description": "Calendar ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ics",
            "in": "body",
            "description": "Event in the iCal format",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alertType",
            "in": "body",
            "description": "New event notification type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Never",
                "FiveMinutes",
                "FifteenMinutes",
                "HalfHour",
                "Hour",
                "TwoHours",
                "Day",
                "Default"
              ],
              "description": "[0 - Never, 1 - FiveMinutes, 2 - FifteenMinutes, 3 - HalfHour, 4 - Hour, 5 - TwoHours, 6 - Day, -1 - Default]"
            }
          },
          {
            "name": "sharingOptions",
            "in": "body",
            "description": "New event sharing access parameters",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SharingParam"
              }
            }
          },
          {
            "name": "fromCalDavServer",
            "in": "body",
            "description": "Defines if the request is from the CalDav server or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ownerId",
            "in": "body",
            "description": "New event owner ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated event",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/events/{eventId}": {
      "delete": {
        "tags": [
          "CalendarApi/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete the event series",
        "description": "Deletes the event series from the calendar.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "Event ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task awaiter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/events/{eventId}/custom": {
      "delete": {
        "tags": [
          "CalendarApi/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete the specified event(s) from event series",
        "description": "Deletes the specified event(s) from the series of repeating events.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "Event ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "date",
            "in": "body",
            "description": "Date to be deleted from the repeating event",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "body",
            "description": "The event deletion type: 0 - the single event, 1 - all the following events, 2 - all the event series.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Single",
                "AllFollowing",
                "AllSeries"
              ],
              "description": "[0 - Single, 1 - AllFollowing, 2 - AllSeries]"
            }
          },
          {
            "name": "fromCaldavServer",
            "in": "body",
            "description": "Defines if the request is from the CalDav server or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "uri",
            "in": "body",
            "description": "Current URI",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated event series collection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/events/{eventId}/unsubscribe": {
      "delete": {
        "tags": [
          "CalendarApi/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Unsubscribe from the event",
        "description": "Unsubscribes the current user from the event with the ID specified in the request.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "Event ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task awaiter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/events/{eventUid}/historybyuid": {
      "get": {
        "tags": [
          "CalendarApi/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the iCal event by UID",
        "description": "Returns the iCal event by its UID from the history.",
        "parameters": [
          {
            "name": "eventUid",
            "in": "path",
            "description": "Event UID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventHistoryWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/events/{eventId}/historybyid": {
      "get": {
        "tags": [
          "CalendarApi/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the iCal event by ID",
        "description": "Returns the iCal event by its ID from the history.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "Event ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventHistoryWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/{calendarId}/sharing": {
      "get": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get access parameters",
        "description": "Returns the sharing access parameters of the calendar with the ID specified in the request.",
        "parameters": [
          {
            "name": "calendarId",
            "in": "path",
            "description": "Calendar ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sharing access parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicItemCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/CalendarApi/sharing": {
      "get": {
        "tags": [
          "CalendarApi/Calendars and subscriptions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get default access parameters",
        "description": "Returns the default values for the sharing access parameters.",
        "responses": {
          "200": {
            "description": "Default sharing access parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicItemCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/wiki/{name}": {
      "put": {
        "tags": [
          "community/Wiki"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a page",
        "description": "Updates a wiki page with the name and content specified in the request.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "New page name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "body",
            "description": "New page content",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Page information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "community/Wiki"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a page",
        "description": "Deletes a wiki page with the name specified in the request.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Page name",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "community/Wiki"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a page",
        "description": "Returns the detailed information on a wiki page with the name and version specified in the request.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Page name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "body",
            "description": "Page version",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Page information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/wiki/{page}/comment": {
      "post": {
        "tags": [
          "community/Wiki"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a page comment",
        "description": "Creates a comment on the selected wiki page with the content specified in the request.",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "Page name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "Comment text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentId",
            "in": "body",
            "description": "Comment parent ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "community/Wiki"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get page comments",
        "description": "Returns a list of all the comments on the wiki page with the name specified in the request.",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "Page name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of comments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommentWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/wiki/file": {
      "post": {
        "tags": [
          "community/Wiki"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Upload files",
        "description": "Uploads the selected files to the wiki page 'Files' section.",
        "parameters": [
          {
            "name": "files",
            "in": "body",
            "description": "List of files to upload",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of files",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/wiki/file/{name}": {
      "get": {
        "tags": [
          "community/Wiki"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a file",
        "description": "Returns the detailed information about a file with the name specified in the request from the wiki page 'Files' section.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "File name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "community/Wiki"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a file",
        "description": "Deletes a file with the name specified in the request from the wiki page 'Files' section.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "File name",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/2.0/community/wiki/comment/preview": {
      "post": {
        "tags": [
          "community/Wiki"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a comment preview",
        "description": "Returns a comment preview with the content specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "body",
            "description": "Comment ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "htmltext",
            "in": "body",
            "description": "Comment text in the HTML format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/wiki/comment/{commentid}": {
      "delete": {
        "tags": [
          "community/Wiki"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove a comment",
        "description": "Removes a comment with the ID specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "community/Wiki"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a comment",
        "description": "Updates a comment on the selected wiki page with the content specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "New comment text",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated comment",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/wiki/comment": {
      "post": {
        "tags": [
          "community/Wiki"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add an entity comment",
        "description": "Adds a comment to the selected entity with the content specified in the request.",
        "parameters": [
          {
            "name": "parentcommentid",
            "in": "body",
            "description": "Comment parent ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "body",
            "description": "Entity ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "Comment text",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/blog": {
      "get": {
        "tags": [
          "community/Blogs"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get posts",
        "description": "Returns a list of all the posts from the portal blogs with the post titles, dates of creation and update, post texts, and authors.",
        "responses": {
          "200": {
            "description": "List of all posts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BlogPostWrapperSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "community/Blogs"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a post",
        "description": "Creates a blog post with the specified title, content, tags and subscription to comments defined in the request body.",
        "parameters": [
          {
            "name": "title",
            "in": "body",
            "description": "Post title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "Post text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "List of tags separated with comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscribeComments",
            "in": "body",
            "description": "Subscribes to the post comments or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created post",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogPostWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/blog/{postid}": {
      "put": {
        "tags": [
          "community/Blogs"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a post",
        "description": "Updates the selected post changing the post title, content or/and tags specified in the request.",
        "parameters": [
          {
            "name": "postid",
            "in": "path",
            "description": "Post ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "New title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "New post text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "New list of tags separated with comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated post",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogPostWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "community/Blogs"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a post",
        "description": "Deletes a post with the ID specified in the request from blogs.",
        "parameters": [
          {
            "name": "postid",
            "in": "path",
            "description": "Post ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted post",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogPostWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "community/Blogs"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a post",
        "description": "Returns the detailed information on the blog post with the ID specified in the request.",
        "parameters": [
          {
            "name": "postid",
            "in": "path",
            "description": "Post ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogPostWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/blog/@self": {
      "get": {
        "tags": [
          "community/Blogs"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get my posts",
        "description": "Returns a list of all the blog posts for the current user with the post titles, dates of creation and update, post texts, and author.",
        "responses": {
          "200": {
            "description": "List of my posts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BlogPostWrapperSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/blog/@search/{query}": {
      "get": {
        "tags": [
          "community/Blogs"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Search posts",
        "description": "Returns a list of blog posts matching the search query specified in the request with the post titles, dates of creation and update, post texts, and authors.",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "Search query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of found posts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BlogPostWrapperSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/blog/user/{username}": {
      "get": {
        "tags": [
          "community/Blogs"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get user posts",
        "description": "Returns a list of blog posts for the specified user with the post titles, dates of creation and update and post texts.",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "User name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user posts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BlogPostWrapperSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/blog/tag/{tag}": {
      "get": {
        "tags": [
          "community/Blogs"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get posts by tag",
        "description": "Returns a list of blog posts containing the tag specified in the request with the post titles, dates of creation and update, post texts, and authors.",
        "parameters": [
          {
            "name": "tag",
            "in": "path",
            "description": "Tag name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of posts with the specified tag name",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BlogPostWrapperSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/blog/tag": {
      "get": {
        "tags": [
          "community/Blogs"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get tags",
        "description": "Returns a list of all the tags used in the blog posts with a number specifying the tag usage.",
        "responses": {
          "200": {
            "description": "List of tags",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BlogTagWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/blog/{postid}/comment": {
      "get": {
        "tags": [
          "community/Blogs"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get post comments",
        "description": "Returns a list of all the comments on the blog post with the ID specified in the request.",
        "parameters": [
          {
            "name": "postid",
            "in": "path",
            "description": "Post ID (GUID)",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of post comments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BlogPostCommentWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "community/Blogs"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a post comment",
        "description": "Adds a comment to the post with the ID specified in the request. The parent comment ID can be also specified if needed.\n\n**Note**: Send parentId=00000000-0000-0000-0000-000000000000 or don't send it at all if you want your comment to be on the root level.",
        "parameters": [
          {
            "name": "postid",
            "in": "path",
            "description": "Post ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "Comment text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentId",
            "in": "body",
            "description": "Parent comment ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of post comments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogPostCommentWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/blog/comment/preview": {
      "post": {
        "tags": [
          "community/Blogs"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a comment preview",
        "description": "Returns a comment preview with the content specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "body",
            "description": "Comment ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "htmltext",
            "in": "body",
            "description": "Comment text in the HTML format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/blog/comment/{commentid}": {
      "delete": {
        "tags": [
          "community/Blogs"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove a comment",
        "description": "Removes a comment with the ID specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "community/Blogs"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a blog comment",
        "description": "Updates a blog comment specified in the request changing its content.",
        "parameters": [
          {
            "name": "commentid",
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "New comment text",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated blog comment",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/blog/comment": {
      "post": {
        "tags": [
          "community/Blogs"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a blog comment",
        "description": "Adds a blog comment with the comment text specified in the request. The parent comment ID can be also specified if needed.",
        "parameters": [
          {
            "name": "parentcommentid",
            "in": "body",
            "description": "Parent comment ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "body",
            "description": "Entity ID where a comment will be added",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "Comment text",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/bookmark": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get bookmarks",
        "description": "Returns a list of all the portal bookmarks with the bookmark titles, dates of creation and update, bookmark texts, and authors.",
        "responses": {
          "200": {
            "description": "List of all bookmarks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookmarkWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "community/Bookmarks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a bookmark",
        "description": "Adds a bookmark with the title, description and tags specified in the request.",
        "parameters": [
          {
            "name": "url",
            "in": "body",
            "description": "Absolute URL to the bookmark page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "Bookmark title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "Bookmark description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "Bookmark tags separated with semicolon",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly added bookmark",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookmarkWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/bookmark/@self": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get my bookmarks",
        "description": "Returns a list of all the bookmarks for the current user with the bookmark titles, dates of creation and update, bookmark texts, and author.",
        "responses": {
          "200": {
            "description": "List of bookmarks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookmarkWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/bookmark/@search/{query}": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Search bookmarks",
        "description": "Returns a list of bookmarks matching the search query specified in the request with the bookmark titles, dates of creation and update, bookmark descriptions, and authors.",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "Search query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of bookmarks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookmarkWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/bookmark/@favs": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get my favorite bookmarks",
        "description": "Returns a list of favorite bookmarks for the current user with the bookmark titles, dates of creation and update, bookmark texts, and authors.",
        "responses": {
          "200": {
            "description": "List of bookmarks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookmarkWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/bookmark/tag": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get tags",
        "description": "Returns a list of all the bookmark tags with a number specifying the tag usage.",
        "responses": {
          "200": {
            "description": "List of tags",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/bookmark/bytag": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get bookmarks by tag",
        "description": "Returns a list of all the bookmarks marked by the tag specified in the request with the bookmark titles, dates of creation and update, bookmark texts, and authors.",
        "parameters": [
          {
            "name": "tag",
            "in": "body",
            "description": "Tag name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of bookmarks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookmarkWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/bookmark/top/recent": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get recent bookmarks",
        "description": "Returns a list of recently added bookmarks with the bookmark titles, dates of creation and update, bookmark texts, and authors.",
        "responses": {
          "200": {
            "description": "List of bookmarks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookmarkWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/bookmark/top/day": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get top of the day bookmarks",
        "description": "Returns a list of the most popular bookmarks for the current date with the bookmark titles, dates of creation and update, bookmark texts, and authors.",
        "responses": {
          "200": {
            "description": "List of bookmarks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookmarkWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/bookmark/top/month": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get top of the month bookmarks",
        "description": "Returns a list of the most popular bookmarks for the current month with the bookmark titles, dates of creation and update, bookmark texts, and authors.",
        "responses": {
          "200": {
            "description": "List of bookmarks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookmarkWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/bookmark/top/week": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get top of the week bookmarks",
        "description": "Returns a list of the most popular bookmarks for the current week with the bookmark titles, dates of creation and update, bookmark texts, and authors.",
        "responses": {
          "200": {
            "description": "List of bookmarks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookmarkWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/bookmark/top/year": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get top of the year bookmarks",
        "description": "Returns a list of the most popular bookmarks for the current year with the bookmark titles, dates of creation and update, bookmark texts, and authors.",
        "responses": {
          "200": {
            "description": "List of bookmarks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookmarkWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/bookmark/{id}/comment": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get bookmark comments",
        "description": "Returns a list of all the comments on the bookmark with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bookmark ID",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of bookmark comments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookmarkCommentWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "community/Bookmarks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a bookmark comment by bookmark ID",
        "description": "Adds a comment to the bookmark with the ID specified in the request. The parent bookmark ID can be also specified if needed.\n\n**Note**: Send parentId=00000000-0000-0000-0000-000000000000 or doesn't send it at all if you want your comment to be on the root level.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bookmark ID",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "Comment text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentId",
            "in": "body",
            "description": "Parent comment ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of bookmark comments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookmarkCommentWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/bookmark/{id}": {
      "get": {
        "tags": [
          "community/Bookmarks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a bookmark",
        "description": "Returns the detailed information on the bookmark with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bookmark ID",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bookmark information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookmarkWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "community/Bookmarks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove a bookmark",
        "description": "Removes a bookmark with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bookmark ID",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ]
      }
    },
    "/api/2.0/community/bookmark/comment/preview": {
      "post": {
        "tags": [
          "community/Bookmarks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a comment preview",
        "description": "Returns a comment preview with the content specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "body",
            "description": "Comment ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "htmltext",
            "in": "body",
            "description": "Comment content in the HTML format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/bookmark/comment/{commentid}": {
      "delete": {
        "tags": [
          "community/Bookmarks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove a comment",
        "description": "Removes a comment with the ID specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "community/Bookmarks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a bookmark comment",
        "description": "Updates the selected bookmark comment with the content specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "New comment text",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated bookmark",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/bookmark/comment": {
      "post": {
        "tags": [
          "community/Bookmarks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a bookmark comment by entity ID",
        "description": "Adds a comment to the entity with the ID specified in the request. The parent bookmark ID can be also specified if needed.",
        "parameters": [
          {
            "name": "parentcommentid",
            "in": "body",
            "description": "Parent comment ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "body",
            "description": "Entity ID",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "Comment text",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of bookmark comments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/bookmark/@favs/{id}": {
      "delete": {
        "tags": [
          "community/Bookmarks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove a bookmark from favorites",
        "description": "Removes a bookmark from favorites. If after removing the user bookmark, its rating is 0, then the bookmark will be removed completely.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bookmark ID",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bookmark",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookmarkWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/event": {
      "get": {
        "tags": [
          "community/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get events",
        "description": "Returns a list of all the portal events with the event titles, dates of creation and update, event texts, and authors.",
        "responses": {
          "200": {
            "description": "List of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "community/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create an event",
        "description": "Creates a new event with the parameters (title, content, type) specified in the request.",
        "parameters": [
          {
            "name": "title",
            "in": "body",
            "description": "Event title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "Event content",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "body",
            "description": "Event type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "News",
                "Order",
                "Advert",
                "AllNews",
                "Poll",
                "All"
              ],
              "description": "[0 - None, 1 - News, 2 - Order, 4 - Advert, 7 - AllNews, 8 - Poll, 15 - All]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/event/{feedid}": {
      "put": {
        "tags": [
          "community/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update an event",
        "description": "Updates the selected event changing the event title, content or/and event type specified in the request.",
        "parameters": [
          {
            "name": "feedid",
            "in": "path",
            "description": "Feed ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "New event title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "New event content",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "body",
            "description": "New event type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "News",
                "Order",
                "Advert",
                "AllNews",
                "Poll",
                "All"
              ],
              "description": "[0 - None, 1 - News, 2 - Order, 4 - Advert, 7 - AllNews, 8 - Poll, 15 - All]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of events",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "community/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete an event",
        "description": "Deletes an event with the ID specified in the request.",
        "parameters": [
          {
            "name": "feedid",
            "in": "path",
            "description": "Feed ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "community/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get an event",
        "description": "Returns the detailed information on the event with the ID specified in the request.",
        "parameters": [
          {
            "name": "feedid",
            "in": "path",
            "description": "Event ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/event/@self": {
      "get": {
        "tags": [
          "community/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get my events",
        "description": "Returns a list of all the events for the current user with the event titles, dates of creation and update, event texts, and author.",
        "responses": {
          "200": {
            "description": "List of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/event/@search/{query}": {
      "get": {
        "tags": [
          "community/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Search events",
        "description": "Returns a list of events matching the search query specified in the request with the event titles, dates of creation and update, event types, and authors.",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "Search query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/event/{feedid}/comment": {
      "get": {
        "tags": [
          "community/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get event comments",
        "description": "Returns a list of all the comments on the event with the ID specified in the request.",
        "parameters": [
          {
            "name": "feedid",
            "in": "path",
            "description": "Event ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of comments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventCommentWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "community/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add an event comment by feed ID",
        "description": "Adds a comment to the event with the ID specified in the request. The parent event ID can be also specified if needed.\n\n**Note**: Send parentId=0 or doesn't send it at all if you want your comment to be on the root level.",
        "parameters": [
          {
            "name": "feedid",
            "in": "path",
            "description": "Feed ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "Comment text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentId",
            "in": "body",
            "description": "Comment parent ID",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventCommentWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/event/{feedid}/vote": {
      "post": {
        "tags": [
          "community/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Vote for an option",
        "description": "Sends a vote for a certain option in a poll-type event with the ID specified in the request.\n\n**Note**: If an event is not a poll, then you'll get an error.",
        "parameters": [
          {
            "name": "feedid",
            "in": "path",
            "description": "Event ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "variants",
            "in": "body",
            "description": "Options",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/event/{feedid}/subscribe": {
      "post": {
        "tags": [
          "community/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Comment subscription",
        "description": "Subscribes to or unsubscribes from the comments of the event with the ID specified in the request.",
        "parameters": [
          {
            "name": "isSubscribe",
            "in": "body",
            "description": "Subscribes to the event comments or unsubscribes from them",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "feedid",
            "in": "path",
            "description": "Feed ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean value: true means that the user is subscribed to the event comments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/event/comment/preview": {
      "post": {
        "tags": [
          "community/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a comment preview",
        "description": "Returns a comment preview with the content specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "body",
            "description": "Comment ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "htmltext",
            "in": "body",
            "description": "Comment text in the HTML format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/event/comment/{commentid}": {
      "delete": {
        "tags": [
          "community/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove a comment",
        "description": "Removes a comment with the ID specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "community/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a comment",
        "description": "Updates the selected event comment with the content specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "New comment text",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated comment",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/event/comment": {
      "post": {
        "tags": [
          "community/Events"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add an event comment by entity ID",
        "description": "Adds a comment to the entity with the ID specified in the request. The parent event ID can be also specified if needed.",
        "parameters": [
          {
            "name": "parentcommentid",
            "in": "body",
            "description": "Comment parent ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "body",
            "description": "Entity ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "Comment text",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/forum": {
      "get": {
        "tags": [
          "community/Forums"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get forums",
        "description": "Returns a list of all the portal forums with the topic/thread titles, dates of creation and update, post texts, and authors.",
        "responses": {
          "200": {
            "description": "List of forums",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForumWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "community/Forums"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a thread to a category",
        "description": "Adds a thread to the category with the ID specified in the request.",
        "parameters": [
          {
            "name": "categoryId",
            "in": "body",
            "description": "Category ID (-1 for a new category)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "categoryName",
            "in": "body",
            "description": "Category name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "threadName",
            "in": "body",
            "description": "Thread name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "threadDescription",
            "in": "body",
            "description": "Thread description",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Added thread",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForumThreadWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/forum/{threadid}": {
      "get": {
        "tags": [
          "community/Forums"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get thread topics",
        "description": "Returns a list of all the thread topics with the topic titles, dates of creation and update, post texts, and authors.",
        "parameters": [
          {
            "name": "threadid",
            "in": "path",
            "description": "Thread ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of thread topics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForumThreadWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "community/Forums"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a topic to a thread",
        "description": "Adds a new topic to the existing thread with a subject, content and topic type specified in the request.",
        "parameters": [
          {
            "name": "threadid",
            "in": "path",
            "description": "Thread ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "subject",
            "in": "body",
            "description": "Topic subject",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "Topic text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topicType",
            "in": "body",
            "description": "Topic type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Informational",
                "Poll"
              ],
              "description": "[0 - Informational, 1 - Poll]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Added topic",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForumTopicWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/forum/topic/recent": {
      "get": {
        "tags": [
          "community/Forums"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get recently updated topics",
        "description": "Returns a list of all the recently updated topics in the portal forums with the topic titles, dates of creation and update, post texts, and authors.",
        "responses": {
          "200": {
            "description": "List of recently updated topics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ForumTopicWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/forum/topic/{topicid}": {
      "get": {
        "tags": [
          "community/Forums"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get topic posts",
        "description": "Returns a list of all the posts of the selected forum topic with the dates of creation and update, post texts, and authors.",
        "parameters": [
          {
            "name": "topicid",
            "in": "path",
            "description": "Topic ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of topic posts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForumTopicWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "community/Forums"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a topic",
        "description": "Updates a topic with the ID specified in the request, changing a topic subject, making it sticky, or closing it.",
        "parameters": [
          {
            "name": "topicid",
            "in": "path",
            "description": "Topic ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "subject",
            "in": "body",
            "description": "New subject",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sticky",
            "in": "body",
            "description": "Makes a topic sticky",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "closed",
            "in": "body",
            "description": "Closes a topic",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated topic",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForumTopicWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "community/Forums"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a post to a topic",
        "description": "Adds a post to the selected topic with a post subject and content specified in the request.",
        "parameters": [
          {
            "name": "topicid",
            "in": "path",
            "description": "Topic ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "parentPostId",
            "in": "body",
            "description": "Parent post ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "subject",
            "in": "body",
            "description": "Post subject (required)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "Post text",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New post",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForumTopicPostWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "community/Forums"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a topic",
        "description": "Deletes a topic with the ID specified in the request.",
        "parameters": [
          {
            "name": "topicid",
            "in": "path",
            "description": "Topic ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Topic",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForumTopicWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/forum/topic/{topicid}/{postid}": {
      "put": {
        "tags": [
          "community/Forums"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a topic post",
        "description": "Updates a post in the selected topic changing the post subject or/and content specified in the request.",
        "parameters": [
          {
            "name": "topicid",
            "in": "path",
            "description": "Topic ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "postid",
            "in": "path",
            "description": "Post ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "subject",
            "in": "body",
            "description": "New post subject (required)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "New post text",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated post",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForumTopicPostWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/forum/@search/{query}": {
      "get": {
        "tags": [
          "community/Forums"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Search topics",
        "description": "Returns a list of topics matching the search query specified in the request with the topic titles, dates of creation and update, post texts, and authors.",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "Search query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of topics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ForumTopicWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/forum/post/{postid}": {
      "delete": {
        "tags": [
          "community/Forums"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a post",
        "description": "Deletes a post with the ID specified in the request.",
        "parameters": [
          {
            "name": "postid",
            "in": "path",
            "description": "Post ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForumTopicPostWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/forum/thread/{threadid}": {
      "delete": {
        "tags": [
          "community/Forums"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a thread",
        "description": "Deletes a thread with the ID specified in the request.",
        "parameters": [
          {
            "name": "threadid",
            "in": "path",
            "description": "Thread ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thread",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForumThreadWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/forum/category/{categoryid}": {
      "delete": {
        "tags": [
          "community/Forums"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a category",
        "description": "Deletes a category with the ID specified in the request.",
        "parameters": [
          {
            "name": "categoryid",
            "in": "path",
            "description": "Category ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForumCategoryWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/preview": {
      "post": {
        "tags": [
          "community"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get preview",
        "description": "Returns the preview information about the specified category from the community section.",
        "parameters": [
          {
            "name": "title",
            "in": "body",
            "description": "Category title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "Category content",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Preview information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/wiki": {
      "post": {
        "tags": [
          "community/Wiki"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a page",
        "description": "Creates a new wiki page with the page name and content specified in the request.",
        "parameters": [
          {
            "name": "name",
            "in": "body",
            "description": "Page name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "body",
            "description": "Page content",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Page information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "community/Wiki"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get pages",
        "description": "Returns a list of all the pages from the wiki or wiki category specified in the request.",
        "parameters": [
          {
            "name": "category",
            "in": "body",
            "description": "Category name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/wiki/{page}/story": {
      "get": {
        "tags": [
          "community/Wiki"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the page history",
        "description": "Returns a list of history changes for a wiki page with the name specified in the request.",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "description": "Page name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of history changes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/wiki/search/byname/{name}": {
      "get": {
        "tags": [
          "community/Wiki"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Search pages by name",
        "description": "Returns a list of wiki pages with the name matching the search query specified in the request.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Search query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of pages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/community/wiki/search/bycontent/{content}": {
      "get": {
        "tags": [
          "community/Wiki"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Search pages by content",
        "description": "Returns a list of wiki pages with the content matching the search query specified in the request.",
        "parameters": [
          {
            "name": "content",
            "in": "path",
            "description": "Search query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of pages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PageWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/task/{taskid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get task by ID",
        "description": "Returns the detailed information about a task with the ID specified in the request.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a task",
        "description": "Deletes a task with the ID specified in the request.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "crm/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a task",
        "description": "Updates the selected task with the parameters (title, description, due date, etc.) specified in the request.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "New task title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "New task description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deadline",
            "in": "body",
            "description": "New task due date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responsibleid",
            "in": "body",
            "description": "New task responsible ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "categoryid",
            "in": "body",
            "description": "New task category ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactid",
            "in": "body",
            "description": "New contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entityType",
            "in": "body",
            "description": "New related entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "body",
            "description": "New related entity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isNotify",
            "in": "body",
            "description": "Notifies the responsible about the task or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "alertValue",
            "in": "body",
            "description": "New time period in minutes to remind the responsible of the task",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/task/filter": {
      "get": {
        "tags": [
          "crm/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get tasks",
        "description": "Returns a list of tasks matching the parameters specified in the request.",
        "parameters": [
          {
            "name": "responsibleid",
            "in": "body",
            "description": "Task responsible ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "categoryid",
            "in": "body",
            "description": "Task category ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isClosed",
            "in": "body",
            "description": "Task status",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "fromDate",
            "in": "body",
            "description": "Earliest task due date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "in": "body",
            "description": "Latest task due date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityType",
            "in": "body",
            "description": "Related entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "body",
            "description": "Related entity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/task/{taskid:[0-9]+}/reopen": {
      "put": {
        "tags": [
          "crm/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Reopen a task",
        "description": "Reopens a task with the ID specified in the request.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/task/{taskid:[0-9]+}/close": {
      "put": {
        "tags": [
          "crm/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Close a task",
        "description": "Closes a task with the ID specified in the request.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/task": {
      "post": {
        "tags": [
          "crm/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a task",
        "description": "Creates a task with the parameters (title, description, due date, etc.) specified in the request.",
        "parameters": [
          {
            "name": "title",
            "in": "body",
            "description": "Task title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "Task description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deadline",
            "in": "body",
            "description": "Task due date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responsibleId",
            "in": "body",
            "description": "Task responsible ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "categoryId",
            "in": "body",
            "description": "Task category ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactId",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entityType",
            "in": "body",
            "description": "Related entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "in": "body",
            "description": "Related entity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isNotify",
            "in": "body",
            "description": "Notifies the responsible about the task or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "alertValue",
            "in": "body",
            "description": "Time period in minutes to remind the responsible of the task",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/settings/currency": {
      "get": {
        "tags": [
          "crm/Currencies"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get available currencies",
        "description": "Returns a list of all the currencies currently available on the portal.",
        "responses": {
          "200": {
            "description": "List of available currencies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CurrencyInfoWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "crm/Currencies"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a currency",
        "description": "Updates the default CRM currency with the currency specified in the request.",
        "parameters": [
          {
            "name": "currency",
            "in": "body",
            "description": "Currency (abbreviation)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated currency",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyInfoWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/settings/currency/convert": {
      "get": {
        "tags": [
          "crm/Currencies"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Convert a currency",
        "description": "Returns a result of converting one currency into another.",
        "parameters": [
          {
            "name": "amount",
            "in": "body",
            "description": "Amount to convert",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "fromcurrency",
            "in": "body",
            "description": "Currency to convert",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tocurrency",
            "in": "body",
            "description": "Currency into which the original currency will be converted",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Decimal result of converting",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/settings/currency/summarytable": {
      "get": {
        "tags": [
          "crm/Currencies"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get currency summary table",
        "description": "Returns a summary table with the rates for the currency specified in the request.",
        "parameters": [
          {
            "name": "currency",
            "in": "body",
            "description": "Currency (abbreviation)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dictionary of currency rates for the specified currency",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CurrencyRateInfoWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/status/settings": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the contact status setting",
        "description": "Updates the contact status setting with the parameter specified in the request.",
        "parameters": [
          {
            "name": "changeContactStatusGroupAuto",
            "in": "body",
            "description": "Defines if the contact status setting is changed automatically or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated contact status setting value (true, false or null)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/mailtohistory/settings": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the setting for writing mails to the history",
        "description": "Updates the setting for writing mails to the history with the parameter specified in the request.",
        "parameters": [
          {
            "name": "writeMailToHistoryAuto",
            "in": "body",
            "description": "Defines if the mails are written to the history automatically or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated setting for writing mails to the history (true or false)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/tag/settings": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the setting for adding tags to the contact",
        "description": "Updates the setting for adding tags to the contact with the parameter specified in the request.",
        "parameters": [
          {
            "name": "addTagToContactGroupAuto",
            "in": "body",
            "description": "Defines if a tag is added to the contact automatically or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated setting for adding tags to the contact (true, false or null)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/settings": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set the tenant settings",
        "description": "Sets the tenant settings specified in the request to the portal.",
        "parameters": [
          {
            "name": "configured",
            "in": "body",
            "description": "Defines if the portal is configured or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "webFormKey",
            "in": "body",
            "description": "Website contact form key",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The tenant setting for the portal configuration value (true or false)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/settings/organisation/base": {
      "put": {
        "tags": [
          "crm/Organization"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a company name",
        "description": "Updates a company name with the one specified in the request.",
        "parameters": [
          {
            "name": "companyName",
            "in": "body",
            "description": "New company name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated company name",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/settings/organisation/address": {
      "put": {
        "tags": [
          "crm/Organization"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a company address",
        "description": "Updates a company address with the one specified in the request.",
        "parameters": [
          {
            "name": "street",
            "in": "body",
            "description": "New company street/building/apartment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city",
            "in": "body",
            "description": "New company city",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "body",
            "description": "New company state",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zip",
            "in": "body",
            "description": "New company zip",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "in": "body",
            "description": "New company country",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated company address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/settings/organisation/logo": {
      "put": {
        "tags": [
          "crm/Organization"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the organization logo setting",
        "description": "Updates the organization logo setting with the parameter specified in the request.",
        "parameters": [
          {
            "name": "reset",
            "in": "body",
            "description": "Resets the organization logo or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization logo ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "crm/Organization"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get an organization logo",
        "description": "Returns an organization logo with the ID specified in the request in the base64 format.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Organization logo ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization logo in the base64 format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/settings/webformkey/change": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the web form key",
        "description": "Updates the website contact form key.",
        "responses": {
          "200": {
            "description": "Updated web form key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/voip/numbers/available": {
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get filtered phone numbers",
        "description": "Returns all the available phone numbers matching the parameters specified in the request.",
        "parameters": [
          {
            "name": "numberType",
            "in": "body",
            "description": "Number type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Local",
                "TollFree"
              ],
              "description": "[0 - Local, 1 - TollFree]"
            }
          },
          {
            "name": "isoCountryCode",
            "in": "body",
            "description": "ISO country code",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phone numbers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoipPhone"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/voip/numbers/unlinked": {
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get unlinked phone numbers",
        "description": "Returns a list of all the unlinked phone numbers.",
        "responses": {
          "200": {
            "description": "List of unlinked phone numbers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoipPhone"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/voip/numbers/existing": {
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get all phone numbers",
        "description": "Returns all the existing phone numbers.",
        "responses": {
          "200": {
            "description": "Existing phone numbers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoipPhone"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/voip/numbers": {
      "post": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Buy a phone number",
        "description": "Buys a phone number specified in the request.",
        "parameters": [
          {
            "name": "number",
            "in": "body",
            "description": "Phone number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phone number",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoipPhone"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/voip/numbers/link": {
      "post": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Link a phone number",
        "description": "Links a new phone number with the ID specified in the request to the VoIP provider.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Phone number ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phone number",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoipPhone"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/voip/numbers/{numberId:\\w+}": {
      "delete": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a phone number",
        "description": "Deletes a phone number with the ID specified in the request.",
        "parameters": [
          {
            "name": "numberId",
            "in": "body",
            "description": "Phone number ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phone number",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoipPhone"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a phone number",
        "description": "Returns a phone number with the ID specified in the request.",
        "parameters": [
          {
            "name": "numberId",
            "in": "body",
            "description": "Phone number ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phone number",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoipPhone"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/voip/numbers/current": {
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the current phone number",
        "description": "Returns the current phone number.",
        "responses": {
          "200": {
            "description": "Current phone number",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoipPhone"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/voip/token": {
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a phone number token",
        "description": "Returns a token for the current phone number.",
        "responses": {
          "200": {
            "description": "Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/voip/numbers/{numberId:\\w+}/settings": {
      "put": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the phone number settings",
        "description": "Updates the settings of the phone number with the ID specified in the request.",
        "parameters": [
          {
            "name": "numberId",
            "in": "body",
            "description": "Phone number ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "greeting",
            "in": "body",
            "description": "New first greeting that callers hear when they call to this phone number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "holdUp",
            "in": "body",
            "description": "New music on hold that callers hear when they are placed in the waiting queue",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wait",
            "in": "body",
            "description": "New URL to which the customer is redirected to the voice mail service when the waiting timeout is exceeded",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "voiceMail",
            "in": "body",
            "description": "New message that callers hear when the waiting queue length or max waiting time is exceeded and the callers are able to leave a voicemail message",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workingHours",
            "in": "body",
            "description": "New phone number working hours",
            "schema": {
              "$ref": "#/components/schemas/WorkingHours"
            }
          },
          {
            "name": "allowOutgoingCalls",
            "in": "body",
            "description": "Defines if a phone number allows making the outgoing calls or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "record",
            "in": "body",
            "description": "Defines if the phone number allows recording the calls or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "alias",
            "in": "body",
            "description": "New phone number alias",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated phone number settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoipPhone"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/voip/numbers/settings": {
      "put": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the VoIP settings",
        "description": "Updates the VoIP settings with the parameters specified in the request.",
        "parameters": [
          {
            "name": "queue",
            "in": "body",
            "description": "Connection waiting queue",
            "schema": {
              "$ref": "#/components/schemas/Queue"
            }
          },
          {
            "name": "pause",
            "in": "body",
            "description": "Defines if the operator have some time before accepting calls again. This can be used to take some notes on the previous call, etc.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated VoIP settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the VoIP settings",
        "description": "Returns the VoIP settings.",
        "responses": {
          "200": {
            "description": "VoIP settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/voip/uploads": {
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the links to the uploaded files",
        "description": "Returns the links to the VoIP uploaded files.",
        "responses": {
          "200": {
            "description": "Links to the VoIP uploaded files",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoipUpload"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete an uploaded file",
        "description": "Deletes an uploaded file with the name specified in the request.",
        "parameters": [
          {
            "name": "audioType",
            "in": "body",
            "description": "Audio type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Greeting",
                "HoldUp",
                "VoiceMail",
                "Queue"
              ],
              "description": "[0 - Greeting, 1 - HoldUp, 2 - VoiceMail, 3 - Queue]"
            }
          },
          {
            "name": "fileName",
            "in": "body",
            "description": "Uploaded file name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Uploaded file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoipUpload"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/voip/numbers/{numberId:\\w+}/oper": {
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get operators",
        "description": "Returns the operators of the phone number with the ID specified in the request.",
        "parameters": [
          {
            "name": "numberId",
            "in": "body",
            "description": "Phone number ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phone number operators",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add operators",
        "description": "Adds the operators to the phone number with the ID specified in the request.",
        "parameters": [
          {
            "name": "numberId",
            "in": "body",
            "description": "Phone number ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operators",
            "in": "body",
            "description": "Phone number operators",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Added phone number operators",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Agent"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete an operator",
        "description": "Deletes an operator from the phone number with the ID specified in the request.",
        "parameters": [
          {
            "name": "numberId",
            "in": "body",
            "description": "Phone number ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "oper",
            "in": "body",
            "description": "Phone number operator GUID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phone number operator",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/voip/opers/{operatorId}": {
      "put": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update an operator",
        "description": "Updates a phone number operator with the parameters specified in the request.",
        "parameters": [
          {
            "name": "operatorId",
            "in": "path",
            "description": "Phone number operator ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "New operator status",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "allowOutgoingCalls",
            "in": "body",
            "description": "Defines if an operator allows making the outgoing calls or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "record",
            "in": "body",
            "description": "Defines if an operator allows recording calls or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "answerType",
            "in": "body",
            "description": "New operator answer type",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "redirectToNumber",
            "in": "body",
            "description": "New redirect phone number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated operator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agent"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/voip/call": {
      "post": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Make a call",
        "description": "Makes a call to the phone number specified in the request.",
        "parameters": [
          {
            "name": "to",
            "in": "body",
            "description": "Phone number to call",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phone call information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoipCallWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get calls",
        "description": "Returns a list of the calls matching the parameters specified in the request.",
        "parameters": [
          {
            "name": "callType",
            "in": "body",
            "description": "Phone call type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "body",
            "description": "Start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "body",
            "description": "End date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agent",
            "in": "body",
            "description": "Call agent",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "client",
            "in": "body",
            "description": "Call client",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "contactID",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of calls",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoipCallWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/voip/call/{callId:\\w+}/answer": {
      "post": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Answer a call",
        "description": "Answers a phone call with the ID specified in the request.",
        "parameters": [
          {
            "name": "callId",
            "in": "body",
            "description": "Phone call ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phone call information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoipCallWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/voip/call/{callId:\\w+}/reject": {
      "post": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Reject a call",
        "description": "Rejects a phone call with the ID specified in the request.",
        "parameters": [
          {
            "name": "callId",
            "in": "body",
            "description": "Phone call ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phone call information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoipCallWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/voip/call/{callId:\\w+}/redirect": {
      "post": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Redirect a call",
        "description": "Redirects a phone call with the ID specified in the request to the specified phone number.",
        "parameters": [
          {
            "name": "callId",
            "in": "body",
            "description": "Phone call ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "body",
            "description": "Phone number to redirect the phone call",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phone call information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoipCallWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/voip/call/{callId:\\w+}": {
      "post": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Save a call",
        "description": "Saves a call with the parameters specified in the request.",
        "parameters": [
          {
            "name": "callId",
            "in": "body",
            "description": "Phone call ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "body",
            "description": "Phone number that is calling",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "body",
            "description": "Phone number to call",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "answeredBy",
            "in": "body",
            "description": "Phone number ID that answered a call",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "Phone call status",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "contactId",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "price",
            "in": "body",
            "description": "Phone call price",
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phone call information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoipCallWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a call",
        "description": "Returns the detailed information about a phone call with the ID specified in the request.",
        "parameters": [
          {
            "name": "callId",
            "in": "body",
            "description": "Phone call ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phone call information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoipCallWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/voip/price/{callId:\\w+}": {
      "post": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Save a call price",
        "description": "Saves a price for the call with the ID specified in the request.",
        "parameters": [
          {
            "name": "callId",
            "in": "body",
            "description": "Phone call ID",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/2.0/crm/voip/call/missed": {
      "get": {
        "tags": [
          "crm/VoIP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get missed calls",
        "description": "Returns a list of all the missed calls.",
        "responses": {
          "200": {
            "description": "List of missed calls",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoipCallWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/opportunity/bycontact/{contactid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Opportunities"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get contact opportunities",
        "description": "Returns a list of all the opportunities for the contact with the ID specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of opportunities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpportunityWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/opportunity/stage": {
      "post": {
        "tags": [
          "crm/Opportunities"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create an opportunity stage",
        "description": "Creates an opportunity stage with the parameters (title, description, success probability, etc.) specified in the request.",
        "parameters": [
          {
            "name": "title",
            "in": "body",
            "description": "Stage title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "Stage description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "color",
            "in": "body",
            "description": "Stage color",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "successProbability",
            "in": "body",
            "description": "Stage success probability",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stageType",
            "in": "body",
            "description": "Stage type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Open",
                "ClosedAndWon",
                "ClosedAndLost"
              ],
              "description": "[0 - Open, 1 - ClosedAndWon, 2 - ClosedAndLost]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity stage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DealMilestoneWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "crm/Opportunities"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get opportunity stages",
        "description": "Returns a list of all the opportunity stages available on the portal.",
        "responses": {
          "200": {
            "description": "List of all the opportunity stages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DealMilestoneWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/opportunity/stage/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Opportunities"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update an opportunity stage",
        "description": "Updates the selected opportunity stage with the parameters (title, description, success probability, etc.) specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Opportunity stage ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "New stage title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "New stage description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "color",
            "in": "body",
            "description": "New stage color",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "successProbability",
            "in": "body",
            "description": "New stage success probability",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stageType",
            "in": "body",
            "description": "New stage type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Open",
                "ClosedAndWon",
                "ClosedAndLost"
              ],
              "description": "[0 - Open, 1 - ClosedAndWon, 2 - ClosedAndLost]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated opportunity stage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DealMilestoneWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/Opportunities"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete an opportunity stage",
        "description": "Deletes an opportunity stage with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Opportunity stage ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity stage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DealMilestoneWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/opportunity/stage/{id:[0-9]+}/color": {
      "put": {
        "tags": [
          "crm/Opportunities"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update an opportunity stage color",
        "description": "Updates the selected opportunity stage with a color specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Opportunity stage ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "color",
            "in": "body",
            "description": "New stage color",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity stage with the updated color",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DealMilestoneWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/opportunity/stage/reorder": {
      "put": {
        "tags": [
          "crm/Opportunities"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the order of opportunity stages",
        "description": "Updates the available order of opportunity stages with a list specified in the request.",
        "parameters": [
          {
            "name": "ids",
            "in": "body",
            "description": "List of opportunity stage IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity stages in the new order",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DealMilestoneWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/history/category": {
      "post": {
        "tags": [
          "crm/History"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a history category",
        "description": "Creates a new history category with the parameters (title, description, etc.) specified in the request.",
        "parameters": [
          {
            "name": "title",
            "in": "body",
            "description": "History category title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "History category description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageName",
            "in": "body",
            "description": "Image name of the history category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "body",
            "description": "History category order",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "History category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryCategoryWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "crm/History"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get history categories",
        "description": "Returns a list of all the history categories available on the portal.",
        "responses": {
          "200": {
            "description": "List of all the history categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HistoryCategoryWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/history/category/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/History"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a history category",
        "description": "Updates the selected history category with the parameters (title, description, etc.) specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "History category ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "New history category title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "New history category description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageName",
            "in": "body",
            "description": "New image name of the history category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "body",
            "description": "New history category order",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated history category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryCategoryWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/History"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a history category",
        "description": "Deletes a history category with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "History category ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "History category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryCategoryWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/history/category/{id:[0-9]+}/icon": {
      "put": {
        "tags": [
          "crm/History"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a history category icon",
        "description": "Updates an icon of a history category with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "History category ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "imageName",
            "in": "body",
            "description": "New image name of the history category",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "History category with the updated icon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoryCategoryWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/history/category/reorder": {
      "put": {
        "tags": [
          "crm/History"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the order of history categories",
        "description": "Updates the order of the history categories with a list specified in the request.",
        "parameters": [
          {
            "name": "titles",
            "in": "body",
            "description": "List of history category titles",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "History categories in the new order",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HistoryCategoryWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/task/category": {
      "post": {
        "tags": [
          "crm/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a task category",
        "description": "Creates a new task category with the parameters (title, description, etc.) specified in the request.",
        "parameters": [
          {
            "name": "title",
            "in": "body",
            "description": "Task category title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "Task category description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageName",
            "in": "body",
            "description": "Image name of task category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "body",
            "description": "Task category order",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCategoryWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "crm/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get task categories",
        "description": "Returns a list of all the task categories available on the portal.",
        "responses": {
          "200": {
            "description": "List of all the task categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskCategoryWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/task/category/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a task category",
        "description": "Updates the selected task category with the parameters (title, description, etc.) specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Task category ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "New task category title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "New task category description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageName",
            "in": "body",
            "description": "New image name of task category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "body",
            "description": "New task category order",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated task category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCategoryWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/task/category/{id:[0-9]+}/icon": {
      "put": {
        "tags": [
          "crm/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a task category icon",
        "description": "Updates an icon of the task category with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Task category ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "imageName",
            "in": "body",
            "description": "New icon name of task category",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task category with the updated icon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCategoryWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/task/category/reorder": {
      "put": {
        "tags": [
          "crm/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the order of task categories",
        "description": "Updates the order of the task categories with a list specified in the request.",
        "parameters": [
          {
            "name": "titles",
            "in": "body",
            "description": "List of task category titles",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task categories in the new order",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskCategoryWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/task/category/{categoryid:[0-9]+}": {
      "delete": {
        "tags": [
          "crm/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a task category",
        "description": "Deletes a task category with the ID specified in the request.",
        "parameters": [
          {
            "name": "categoryid",
            "in": "body",
            "description": "Task category ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "newcategoryid",
            "in": "body",
            "description": "Task category ID to replace the deleted category in the tasks with the current task category",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCategoryWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "crm/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a task category",
        "description": "Returns a task category with the ID specified in the request.",
        "parameters": [
          {
            "name": "categoryid",
            "in": "body",
            "description": "Task category ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCategoryWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/status": {
      "post": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a contact status",
        "description": "Creates a new contact status with the parameters (title, description, etc.) specified in the request.",
        "parameters": [
          {
            "name": "title",
            "in": "body",
            "description": "Contact status title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "Contact status description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "color",
            "in": "body",
            "description": "Contact status color",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "body",
            "description": "Contact status sort order",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactStatusWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get contact statuses",
        "description": "Returns a list of all the contact statuses available on the portal.",
        "responses": {
          "200": {
            "description": "List of all the contact statuses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactStatusWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/status/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a contact status",
        "description": "Updates the selected contact status with the parameters (title, description, etc.) specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Contact status ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "New contact status title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "New contact status description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "color",
            "in": "body",
            "description": "New contact status color",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "body",
            "description": "New contact status sort order",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactStatusWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/status/{id:[0-9]+}/color": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a contact status color",
        "description": "Updates a color of the selected contact status with a new color specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Contact status ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "color",
            "in": "body",
            "description": "New contact status color",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact status with a new color",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactStatusWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/status/reorder": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the order of contact statuses",
        "description": "Updates the order of the contact statuses with a list specified in the request.",
        "parameters": [
          {
            "name": "titles",
            "in": "body",
            "description": "List of contact status titles",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact statuses in the new order",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactStatusWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/status/{contactStatusid:[0-9]+}": {
      "delete": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a contact status",
        "description": "Deletes a contact status with the ID specified in the request.",
        "parameters": [
          {
            "name": "contactStatusid",
            "in": "body",
            "description": "Contact status ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactStatusWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a contact status",
        "description": "Returns a contact status with the ID specified in the request.",
        "parameters": [
          {
            "name": "contactStatusid",
            "in": "body",
            "description": "Contact status ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactStatusWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/type": {
      "post": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a contact type",
        "description": "Creates a new contact type with the parameters specified in the request.",
        "parameters": [
          {
            "name": "title",
            "in": "body",
            "description": "Contact type title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "body",
            "description": "Contact type sort order",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactTypeWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get contact types",
        "description": "Returns a list of all the contact types available on the portal.",
        "responses": {
          "200": {
            "description": "List of all the contact types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactTypeWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/type/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a contact type",
        "description": "Updates the selected contact type with the parameters specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Contact type ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "New contact type title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "body",
            "description": "New contact type order",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactTypeWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/type/reorder": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the order of contact types",
        "description": "Updates the order of the contact types with a list specified in the request.",
        "parameters": [
          {
            "name": "titles",
            "in": "body",
            "description": "List of contact type titles",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact types in the new order",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactTypeWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/type/{contactTypeid:[0-9]+}": {
      "delete": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a contact type",
        "description": "Deletes a contact type with the ID specified in the request.",
        "parameters": [
          {
            "name": "contactTypeid",
            "in": "body",
            "description": "Contact type ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactTypeWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a contact type",
        "description": "Returns a contact type with the ID specified in the request.",
        "parameters": [
          {
            "name": "contactTypeid",
            "in": "body",
            "description": "Contact type ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactTypeWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/opportunity/stage/{stageid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Opportunities"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get an opportunity stage",
        "description": "Returns an opportunity stage with the ID specified in the request.",
        "parameters": [
          {
            "name": "stageid",
            "in": "body",
            "description": "Opportunity stage ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity stage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DealMilestoneWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/history/filter": {
      "get": {
        "tags": [
          "crm/History"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get filtered events",
        "description": "Returns a list of all the events matching the parameters specified in the request.",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Related entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "in": "body",
            "description": "Related entity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "categoryId",
            "in": "body",
            "description": "Event category ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "createBy",
            "in": "body",
            "description": "Event author",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fromDate",
            "in": "body",
            "description": "Earliest event due date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "in": "body",
            "description": "Latest event due date",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RelationshipEventWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/history/{id:[0-9]+}": {
      "delete": {
        "tags": [
          "crm/History"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete an event",
        "description": "Deletes an event with the ID specified in the request and all the files associated with this event.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Event ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipEventWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/{entityType:(contact|opportunity|case)}/{entityid:[0-9]+}/files/text": {
      "post": {
        "tags": [
          "crm/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a text file",
        "description": "Creates a text (.txt) file in the selected folder with the title and contents specified in the request.",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Related entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "body",
            "description": "Related entity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "File title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "File contents",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/{entityType:(contact|opportunity|case)}/{entityid:[0-9]+}/files/upload": {
      "post": {
        "tags": [
          "crm/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Upload a file",
        "description": "Uploads a file to the CRM module with the parameters specified in the request.\n\n**Note**: Upload can be done in 2 different ways:\n             <ol>\n            <li>Single file upload. You should set the Content-Type &amp; Content-Disposition headers to specify file name and content type, and send a file in the request body.</li>\n            <li>Using standart multipart/form-data method.</li>\n            </ol>",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Related entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "body",
            "description": "Related entity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "file",
            "in": "body",
            "description": "Request input stream",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "contentType",
            "in": "body",
            "description": "Content-Type header",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "contentDisposition",
            "in": "body",
            "description": "Content-Disposition header",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "files",
            "in": "body",
            "description": "List of files when posted as multipart/form-data",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          {
            "name": "storeOriginalFileFlag",
            "in": "body",
            "description": "Defines if the documents in the original formats are also stored or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/history": {
      "post": {
        "tags": [
          "crm/History"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create an event",
        "description": "Creates an event with the parameters specified in the request.\n\n**Note**: You must set a value for 'contactId' if 'entityId' is not set, or a values for the 'entityId' and 'entityType' parameters if 'contactId' is not set.",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Related entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "in": "body",
            "description": "Related entity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactId",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "Event contents",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "body",
            "description": "Event category ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "created",
            "in": "body",
            "description": "Event creation date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "in": "body",
            "description": "List of file IDs for the current event",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "notifyUserList",
            "in": "body",
            "description": "List of users who will be notified about the event",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipEventWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/{entityType:(contact|opportunity|case)}/{entityid:[0-9]+}/files": {
      "post": {
        "tags": [
          "crm/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Attach files to the entity",
        "description": "Attaches the selected file(s) to the entity specified in the request.",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "body",
            "description": "Entity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileids",
            "in": "body",
            "description": "List of file IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entity with the file(s) attached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipEventWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "crm/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get entity files",
        "description": "Returns a list of all the files for the entity with the ID and type specified in the request.",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "body",
            "description": "Entity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of files",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/files/root": {
      "get": {
        "tags": [
          "crm/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get root folder ID",
        "description": "Returns the ID of the root folder used to store the CRM module files.",
        "responses": {
          "200": {
            "description": "Root folder ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/files/{fileid:[0-9]+}": {
      "delete": {
        "tags": [
          "crm/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a file",
        "description": "Deletes a file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileid",
            "in": "body",
            "description": "File ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/report/files": {
      "get": {
        "tags": [
          "crm/Reports"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get report files",
        "description": "Returns a list of all the user report files.",
        "responses": {
          "200": {
            "description": "Report files",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/report/file/{fileid:[0-9]+}": {
      "delete": {
        "tags": [
          "crm/Reports"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a report file",
        "description": "Deletes a report file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileid",
            "in": "body",
            "description": "File ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ]
      }
    },
    "/api/2.0/crm/report/status": {
      "get": {
        "tags": [
          "crm/Reports"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the report generation status",
        "description": "Returns a status of the report generation task.",
        "responses": {
          "200": {
            "description": "Report status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportState"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/report/terminate": {
      "get": {
        "tags": [
          "crm/Reports"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Terminate the report generation",
        "description": "Terminates the report generation task."
      }
    },
    "/api/2.0/crm/report/check": {
      "post": {
        "tags": [
          "crm/Reports"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Check report data",
        "description": "Checks the report data for the parameters specified in the request.",
        "parameters": [
          {
            "name": "type",
            "in": "body",
            "description": "Report type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "SalesByManagers",
                "SalesForecast",
                "SalesFunnel",
                "WorkloadByContacts",
                "WorkloadByTasks",
                "WorkloadByDeals",
                "WorkloadByInvoices",
                "WorkloadByVoip",
                "SummaryForThePeriod",
                "SummaryAtThisMoment"
              ],
              "description": "[0 - SalesByManagers, 1 - SalesForecast, 2 - SalesFunnel, 3 - WorkloadByContacts, 4 - WorkloadByTasks, 5 - WorkloadByDeals, 6 - WorkloadByInvoices, 7 - WorkloadByVoip, 8 - SummaryForThePeriod, 9 - SummaryAtThisMoment]"
            }
          },
          {
            "name": "timePeriod",
            "in": "body",
            "description": "Report time period",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Today",
                "Yesterday",
                "Tomorrow",
                "CurrentWeek",
                "PreviousWeek",
                "NextWeek",
                "CurrentMonth",
                "PreviousMonth",
                "NextMonth",
                "CurrentQuarter",
                "PreviousQuarter",
                "NextQuarter",
                "CurrentYear",
                "PreviousYear",
                "NextYear",
                "DuringAllTime"
              ],
              "description": "[0 - Today, 1 - Yesterday, 2 - Tomorrow, 3 - CurrentWeek, 4 - PreviousWeek, 5 - NextWeek, 6 - CurrentMonth, 7 - PreviousMonth, 8 - NextMonth, 9 - CurrentQuarter, 10 - PreviousQuarter, 11 - NextQuarter, 12 - CurrentYear, 13 - PreviousYear, 14 - NextYear, 15 - DuringAllTime]"
            }
          },
          {
            "name": "managers",
            "in": "body",
            "description": "Managers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/report/generate": {
      "post": {
        "tags": [
          "crm/Reports"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Generate a report",
        "description": "Runs the report generation task with the parameters specified in the request.",
        "parameters": [
          {
            "name": "type",
            "in": "body",
            "description": "Report type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "SalesByManagers",
                "SalesForecast",
                "SalesFunnel",
                "WorkloadByContacts",
                "WorkloadByTasks",
                "WorkloadByDeals",
                "WorkloadByInvoices",
                "WorkloadByVoip",
                "SummaryForThePeriod",
                "SummaryAtThisMoment"
              ],
              "description": "[0 - SalesByManagers, 1 - SalesForecast, 2 - SalesFunnel, 3 - WorkloadByContacts, 4 - WorkloadByTasks, 5 - WorkloadByDeals, 6 - WorkloadByInvoices, 7 - WorkloadByVoip, 8 - SummaryForThePeriod, 9 - SummaryAtThisMoment]"
            }
          },
          {
            "name": "timePeriod",
            "in": "body",
            "description": "Report time period",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Today",
                "Yesterday",
                "Tomorrow",
                "CurrentWeek",
                "PreviousWeek",
                "NextWeek",
                "CurrentMonth",
                "PreviousMonth",
                "NextMonth",
                "CurrentQuarter",
                "PreviousQuarter",
                "NextQuarter",
                "CurrentYear",
                "PreviousYear",
                "NextYear",
                "DuringAllTime"
              ],
              "description": "[0 - Today, 1 - Yesterday, 2 - Tomorrow, 3 - CurrentWeek, 4 - PreviousWeek, 5 - NextWeek, 6 - CurrentMonth, 7 - PreviousMonth, 8 - NextMonth, 9 - CurrentQuarter, 10 - PreviousQuarter, 11 - NextQuarter, 12 - CurrentYear, 13 - PreviousYear, 14 - NextYear, 15 - DuringAllTime]"
            }
          },
          {
            "name": "managers",
            "in": "body",
            "description": "Managers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportState"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/{entityType:(contact|opportunity|case)}/tag/{entityid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get entity tags",
        "description": "Returns a list of all the tags related to the entity with the ID and type specified in the request.",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "body",
            "description": "Entity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/tag": {
      "get": {
        "tags": [
          "crm/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get contact tags",
        "description": "Returns a list of all the tags for the contact with the ID specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contact tags",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/{entityType:(contact|opportunity|case)}/tag": {
      "post": {
        "tags": [
          "crm/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a tag",
        "description": "Creates a tag for the selected entity with a tag name specified in the request.",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagName",
            "in": "body",
            "description": "Tag name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "crm/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get entity type tags",
        "description": "Returns a list of all the tags associated with the entity type specified in the request.",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Entity type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a tag from entities",
        "description": "Deletes the selected tag from the entities with the type specified in the request.",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagName",
            "in": "body",
            "description": "Tag name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/{entityType:(contact|opportunity|case)}/taglist": {
      "post": {
        "tags": [
          "crm/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a tag to the entities",
        "description": "Adds a tag to the entities with the IDs specified in the request.",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "body",
            "description": "List of entity IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "tagName",
            "in": "body",
            "description": "Tag name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/filter/taglist": {
      "post": {
        "tags": [
          "crm/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a tag to contacts",
        "description": "Adds the selected tag to the group of contacts with the parameters specified in the request.",
        "parameters": [
          {
            "name": "tags",
            "in": "body",
            "description": "Contact tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "contactStage",
            "in": "body",
            "description": "Contact stage ID (warmth)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactType",
            "in": "body",
            "description": "Contact type ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactListView",
            "in": "body",
            "description": "Contact list view",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "All",
                "Company",
                "Person",
                "WithOpportunity"
              ],
              "description": "[0 - All, 1 - Company, 2 - Person, 3 - WithOpportunity]"
            }
          },
          {
            "name": "fromDate",
            "in": "body",
            "description": "Start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "in": "body",
            "description": "End date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagName",
            "in": "body",
            "description": "Tag name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/opportunity/filter/taglist": {
      "post": {
        "tags": [
          "crm/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a tag to opportunities",
        "description": "Adds the selected tag to the group of opportunities with the parameters specified in the request.",
        "parameters": [
          {
            "name": "responsibleid",
            "in": "body",
            "description": "Opportunity responsible ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "opportunityStagesid",
            "in": "body",
            "description": "Opportunity stage ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "Opportunity tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stageType",
            "in": "body",
            "description": "Opportunity stage type",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "contactAlsoIsParticipant",
            "in": "body",
            "description": "Participation status: take into account opportunities where the contact is a participant or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "fromDate",
            "in": "body",
            "description": "Start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "in": "body",
            "description": "End date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagName",
            "in": "body",
            "description": "Tag name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/case/filter/taglist": {
      "post": {
        "tags": [
          "crm/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a tag to cases",
        "description": "Adds the selected tag to the group of cases with the parameters specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isClosed",
            "in": "body",
            "description": "Case status: closed or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "Case tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tagName",
            "in": "body",
            "description": "Tag name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/{entityType:(contact|opportunity|case)}/tag/unused": {
      "delete": {
        "tags": [
          "crm/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete unused tags",
        "description": "Deletes all the unused tags from the entities with the type specified in the request.",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Entity type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tags",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/{entityType:(contact|opportunity|case)}/{entityid:[0-9]+}/tag": {
      "post": {
        "tags": [
          "crm/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a tag to the entity",
        "description": "Adds the selected tag to the entity with the type and ID specified in the request.",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "body",
            "description": "Entity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tagName",
            "in": "body",
            "description": "Tag name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete an entity tag",
        "description": "Deletes the selected tag from the entity with the type and ID specified in the request.",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "body",
            "description": "Entity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tagName",
            "in": "body",
            "description": "Tag name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/{entityType:(company|person)}/{entityid:[0-9]+}/tag/group": {
      "post": {
        "tags": [
          "crm/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a tag to the entity and related contacts",
        "description": "Adds the selected tag to the entity (company or person) specified in the request and to all the related contacts.",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "body",
            "description": "Entity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tagName",
            "in": "body",
            "description": "Tag name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a tag from the entity and related contacts",
        "description": "Deletes the selected tag from the entity (company or person) specified in the request and from all the related contacts.",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "body",
            "description": "Entity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tagName",
            "in": "body",
            "description": "Tag name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a contact by ID",
        "description": "Returns the detailed information about a contact with the ID specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a contact",
        "description": "Deletes a contact with the ID specified in the request from the portal.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/project/{projectid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get contacts by project ID",
        "description": "Returns contacts for the project with the ID specified in the request.",
        "parameters": [
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Link contacts to the project",
        "description": "Links the selected contacts to the project with the ID specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Array of contact IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/project/{projectid:[0-9]+}": {
      "post": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Link a contact to the project",
        "description": "Links the selected contact to the project with the ID specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove a contact from the project",
        "description": "Removes a link to the selected project from the contact with the ID specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactBaseWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/opportunity/{opportunityid:[0-9]+}": {
      "post": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a contact opportunity",
        "description": "Adds the selected opportunity to the contact with the ID specified in the request.",
        "parameters": [
          {
            "name": "opportunityid",
            "in": "body",
            "description": "Opportunity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpportunityWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a contact opportunity",
        "description": "Deletes the selected opportunity from the contact with the ID specified in the request.",
        "parameters": [
          {
            "name": "opportunityid",
            "in": "body",
            "description": "Opportunity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpportunityWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/filter": {
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get filtered contacts",
        "description": "Returns a list of all the contacts in the CRM module matching the parameters specified in the request.",
        "parameters": [
          {
            "name": "tags",
            "in": "body",
            "description": "Contact tag",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "contactStage",
            "in": "body",
            "description": "Contact stage ID (warmth)",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "contactType",
            "in": "body",
            "description": "Contact type ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "contactListView",
            "in": "body",
            "description": "Contact list view",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "All",
                "Company",
                "Person",
                "WithOpportunity"
              ],
              "description": "[0 - All, 1 - Company, 2 - Person, 3 - WithOpportunity]"
            }
          },
          {
            "name": "responsibleid",
            "in": "body",
            "description": "Responsible ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "isShared",
            "in": "body",
            "description": "Contact privacy: private or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "fromDate",
            "in": "body",
            "description": "Start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "in": "body",
            "description": "End date",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete contacts by parameters",
        "description": "Deletes a list of all the contacts in the CRM module matching the parameters specified in the request.",
        "parameters": [
          {
            "name": "tags",
            "in": "body",
            "description": "Contact tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "contactStage",
            "in": "body",
            "description": "Contact stage ID (warmth)",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "contactType",
            "in": "body",
            "description": "Contact type ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "contactListView",
            "in": "body",
            "description": "Contact list view",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "All",
                "Company",
                "Person",
                "WithOpportunity"
              ],
              "description": "[0 - All, 1 - Company, 2 - Person, 3 - WithOpportunity]"
            }
          },
          {
            "name": "fromDate",
            "in": "body",
            "description": "Start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "in": "body",
            "description": "End date",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactBaseWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/company/{companyid:[0-9]+}/person": {
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get company persons",
        "description": "Returns a list of all the persons linked to the company with the ID specified in the request.",
        "parameters": [
          {
            "name": "companyid",
            "in": "body",
            "description": "Company ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company persons",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a person to the company",
        "description": "Adds the selected person to the company with the ID specified in the request.",
        "parameters": [
          {
            "name": "companyid",
            "in": "body",
            "description": "Company ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "personid",
            "in": "body",
            "description": "Person ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Person",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a person from the company",
        "description": "Deletes the selected person from the company with the ID specified in the request.",
        "parameters": [
          {
            "name": "companyid",
            "in": "body",
            "description": "Company ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "personid",
            "in": "body",
            "description": "Person ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Person",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/person": {
      "post": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a person",
        "description": "Creates a person with the parameters (first name, last name, description, etc.) specified in the request.",
        "parameters": [
          {
            "name": "firstName",
            "in": "body",
            "description": "First name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "body",
            "description": "Last name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobTitle",
            "in": "body",
            "description": "Job title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "body",
            "description": "Company ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "about",
            "in": "body",
            "description": "Person description text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shareType",
            "in": "body",
            "description": "Person privacy: 0 - not shared, 1 - shared for reading/writing, 2 - shared for reading only",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "ReadWrite",
                "Read"
              ],
              "description": "[0 - None, 1 - ReadWrite, 2 - Read]"
            }
          },
          {
            "name": "managerList",
            "in": "body",
            "description": "List of person managers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "customFieldList",
            "in": "body",
            "description": "Custom field list",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          {
            "name": "photo",
            "in": "body",
            "description": "Contact photo (upload using multipart/form-data)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Person",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/changephoto": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Change a contact photo",
        "description": "Changes a photo for the contact with the ID specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "photo",
            "in": "body",
            "description": "Contact photo (upload using multipart/form-data)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Path to the contact photo",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/changephotobyurl": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Change a contact photo by URL",
        "description": "Changes a photo using its URL for the contact with the ID specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "photourl",
            "in": "body",
            "description": "Contact photo URL",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Path to the contact photo",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/merge": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Merge contacts",
        "description": "Merges two contacts specified in the request.",
        "parameters": [
          {
            "name": "fromcontactid",
            "in": "body",
            "description": "The first contact ID to merge",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tocontactid",
            "in": "body",
            "description": "The second contact ID to merge",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/person/{personid:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a person",
        "description": "Updates the selected person with the parameters (first name, last name, description, etc.) specified in the request.",
        "parameters": [
          {
            "name": "personid",
            "in": "body",
            "description": "Person ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "firstName",
            "in": "body",
            "description": "New first name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "body",
            "description": "New last name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jobTitle",
            "in": "body",
            "description": "New job title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "body",
            "description": "New company ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "about",
            "in": "body",
            "description": "New person description text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shareType",
            "in": "body",
            "description": "New person privacy: 0 - not shared, 1 - shared for reading/writing, 2 - shared for reading only",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "ReadWrite",
                "Read"
              ],
              "description": "[0 - None, 1 - ReadWrite, 2 - Read]"
            }
          },
          {
            "name": "managerList",
            "in": "body",
            "description": "New list of person managers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "customFieldList",
            "in": "body",
            "description": "New custom field list",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          {
            "name": "photo",
            "in": "body",
            "description": "New contact photo (upload using multipart/form-data)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Person",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/company": {
      "post": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a company",
        "description": "Creates a company with the parameters specified in the request.",
        "parameters": [
          {
            "name": "companyName",
            "in": "body",
            "description": "Company name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "about",
            "in": "body",
            "description": "Company description text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "personList",
            "in": "body",
            "description": "List of persons linked to the company",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "shareType",
            "in": "body",
            "description": "Company privacy: 0 - not shared, 1 - shared for reading/writing, 2 - shared for reading only",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "ReadWrite",
                "Read"
              ],
              "description": "[0 - None, 1 - ReadWrite, 2 - Read]"
            }
          },
          {
            "name": "managerList",
            "in": "body",
            "description": "List of company managers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "customFieldList",
            "in": "body",
            "description": "Custom field list",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          {
            "name": "photo",
            "in": "body",
            "description": "Contact photo (upload using multipart/form-data)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/company/quick": {
      "post": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create companies",
        "description": "Creates a list of companies with the names specified in the request.",
        "parameters": [
          {
            "name": "companyName",
            "in": "body",
            "description": "Company names",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactBaseWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/person/quick": {
      "post": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create persons",
        "description": "Creates a list of persons with the first and last names specified in the request.\n\n**Note**: Data has the following format:\n             [{key: 'First name 1', value: 'Last name 1'}, {key: 'First name 2', value: 'Last name 2'}].",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Pairs: user first name, user last name",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactBaseWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/company/{companyid:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a company",
        "description": "Updates the selected company with the parameters specified in the request.",
        "parameters": [
          {
            "name": "companyid",
            "in": "body",
            "description": "Company ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "companyName",
            "in": "body",
            "description": "New company name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "about",
            "in": "body",
            "description": "New company description text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shareType",
            "in": "body",
            "description": "New company privacy: 0 - not shared, 1 - shared for reading/writnig, 2 - shared for reading only",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "ReadWrite",
                "Read"
              ],
              "description": "[0 - None, 1 - ReadWrite, 2 - Read]"
            }
          },
          {
            "name": "managerList",
            "in": "body",
            "description": "New list of company managers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "customFieldList",
            "in": "body",
            "description": "New custom field list",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/status": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a contact status by ID",
        "description": "Updates a status of the contact with the ID specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactStatusid",
            "in": "body",
            "description": "New contact status ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/company/{companyid:[0-9]+}/status": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a company status",
        "description": "Updates a status of the selected company and all its participants.",
        "parameters": [
          {
            "name": "companyid",
            "in": "body",
            "description": "Company ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactStatusid",
            "in": "body",
            "description": "New contact status ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/person/{personid:[0-9]+}/status": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a person and his company status",
        "description": "Updates a status of the selected person, related company and all its participants.",
        "parameters": [
          {
            "name": "personid",
            "in": "body",
            "description": "Person ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactStatusid",
            "in": "body",
            "description": "New contact status ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Person",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/access": {
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get contact access rights",
        "description": "Returns access rights of the contact with the ID specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeWraper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set contact access rights",
        "description": "Sets access rights to the contact with the ID specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isShared",
            "in": "body",
            "description": "Contact privacy: private or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "managerList",
            "in": "body",
            "description": "List of managers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/access": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set access rights to the contacts by IDs",
        "description": "Sets access rights to the list of contacts with the IDs specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "List of contact IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "isShared",
            "in": "body",
            "description": "Company privacy: shared or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "managerList",
            "in": "body",
            "description": "List of managers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/filter/access": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set access rights to the contacts by parameters",
        "description": "Sets access rights to the list of contacts with the parameters specified in the request.",
        "parameters": [
          {
            "name": "tags",
            "in": "body",
            "description": "Contact tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "contactStage",
            "in": "body",
            "description": "Contact stage ID (warmth)",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "contactType",
            "in": "body",
            "description": "Contact type ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "contactListView",
            "in": "body",
            "description": "Contact list view",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "All",
                "Company",
                "Person",
                "WithOpportunity"
              ],
              "description": "[0 - All, 1 - Company, 2 - Person, 3 - WithOpportunity]"
            }
          },
          {
            "name": "fromDate",
            "in": "body",
            "description": "Start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "in": "body",
            "description": "End date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isPrivate",
            "in": "body",
            "description": "Contact privacy: private or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "managerList",
            "in": "body",
            "description": "List of managers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete contacts by IDs",
        "description": "Deletes a group of contacts with the IDs specified in the request.",
        "parameters": [
          {
            "name": "contactids",
            "in": "body",
            "description": "List of contact IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactBaseWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/bycontactinfo": {
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get contacts by contact information",
        "description": "Returns a list of contacts from the CRM module with the contact information specified in the request.\n\n**Note**: Please note that if the contact data from the \"data\" parameter refers to one of the contact information types, then the \"infoType\" parameter must be specified. For example, the \"Paris\" contact information is related to the \"Address\" information type.",
        "parameters": [
          {
            "name": "infoType",
            "in": "body",
            "description": "Contact information type",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "data",
            "in": "body",
            "description": "Contact data",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "in": "body",
            "description": "Contact category",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "isPrimary",
            "in": "body",
            "description": "Contact importance: primary or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/avatar": {
      "delete": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a contact avatar",
        "description": "Deletes an avatar of the contact with the ID specified in the request.",
        "parameters": [
          {
            "name": "contactId",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactType",
            "in": "body",
            "description": "Contact type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uploadOnly",
            "in": "body",
            "description": "Defines whether to upload a new avatar only or also delete an old one",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default photo",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/{entityType:(contact|person|company|opportunity|case)}/customfield/definitions": {
      "get": {
        "tags": [
          "crm/Custom fields"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get custom fields",
        "description": "Returns a list of descriptions for all the existing custom fields.",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Entity type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of custom fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomFieldWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/{entityType:(contact|person|company|opportunity|case)}/{entityid:[0-9]+}/customfield": {
      "get": {
        "tags": [
          "crm/Custom fields"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get entity custom fields",
        "description": "Returns a list of all the custom fields for the entity type and ID specified in the request.",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "body",
            "description": "Entity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of entity custom fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomFieldBaseWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/{entityType:(contact|person|company|opportunity|case)}/{entityid:[0-9]+}/customfield/{fieldid:[0-9]+}": {
      "post": {
        "tags": [
          "crm/Custom fields"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set an entity custom field",
        "description": "Sets the selected custom field to the entity with type and ID specified in the request.",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "body",
            "description": "Entity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fieldid",
            "in": "body",
            "description": "Field ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fieldValue",
            "in": "body",
            "description": "Field value",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Custom field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldBaseWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/{entityType:(contact|person|company|opportunity|case)}/customfield": {
      "post": {
        "tags": [
          "crm/Custom fields"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a custom field",
        "description": "Creates a new custom field with the parameters (entity type, field title, type, etc.) specified in the request.",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label",
            "in": "body",
            "description": "Field title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldType",
            "in": "body",
            "description": "Custom field type",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "position",
            "in": "body",
            "description": "Field position",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "mask",
            "in": "body",
            "description": "Mask",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Custom field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/{entityType:(contact|person|company|opportunity|case)}/customfield/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Custom fields"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a custom field",
        "description": "Updates the selected custom field with the parameters (entity type, field title, type, etc.) specified in the request.\n\n**Note**: You can update field if there are no related elements. If such elements exist, only label and mask will be updated. Other parameters will be ignored.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Custom field ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entityType",
            "in": "body",
            "description": "New entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label",
            "in": "body",
            "description": "New field title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldType",
            "in": "body",
            "description": "New custom field type",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "position",
            "in": "body",
            "description": "New field position",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "mask",
            "in": "body",
            "description": "New mask",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated custom field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/{entityType:(contact|person|company|opportunity|case)}/customfield/{fieldid:[0-9]+}": {
      "delete": {
        "tags": [
          "crm/Custom fields"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a custom field",
        "description": "Deletes a custom field with the ID specified in the request.",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldid",
            "in": "body",
            "description": "Field ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Custom field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/{entityType:(contact|person|company|opportunity|case)}/customfield/reorder": {
      "put": {
        "tags": [
          "crm/Custom fields"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the order of custom fields",
        "description": "Updates the order of the custom fields with a list specified in the request.",
        "parameters": [
          {
            "name": "fieldids",
            "in": "body",
            "description": "List of custom field IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "entityType",
            "in": "body",
            "description": "Entity type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Custom fields in the new order",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomFieldBaseWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/opportunity/{opportunityid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Opportunities"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get an opportunity",
        "description": "Returns the detailed information about an opportunity with the ID specified in the request.",
        "parameters": [
          {
            "name": "opportunityid",
            "in": "body",
            "description": "Opportunity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpportunityWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/Opportunities"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete an opportunity",
        "description": "Deletes an opportunity with the ID specified in the request.",
        "parameters": [
          {
            "name": "opportunityid",
            "in": "body",
            "description": "Opportunity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpportunityWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "crm/Opportunities"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update an opportunity",
        "description": "Updates the selected opportunity with the parameters specified in the request.",
        "parameters": [
          {
            "name": "opportunityid",
            "in": "body",
            "description": "Opportunity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactid",
            "in": "body",
            "description": "New opportunity primary contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "members",
            "in": "body",
            "description": "New opportunity participants",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "New opportunity title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "New opportunity description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responsibleid",
            "in": "body",
            "description": "New opportunity responsible ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "bidType",
            "in": "body",
            "description": "New bid type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "FixedBid",
                "PerHour",
                "PerDay",
                "PerWeek",
                "PerMonth",
                "PerYear"
              ],
              "description": "[0 - FixedBid, 1 - PerHour, 2 - PerDay, 3 - PerWeek, 4 - PerMonth, 5 - PerYear]"
            }
          },
          {
            "name": "bidValue",
            "in": "body",
            "description": "New amount of transactions",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "bidCurrencyAbbr",
            "in": "body",
            "description": "New currency (abbreviation)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "perPeriodValue",
            "in": "body",
            "description": "New amount per period",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stageid",
            "in": "body",
            "description": "New stage ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "successProbability",
            "in": "body",
            "description": "New opportunity success probability",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "actualCloseDate",
            "in": "body",
            "description": "New actual opportunity closure date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expectedCloseDate",
            "in": "body",
            "description": "New expected opportunity closure date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customFieldList",
            "in": "body",
            "description": "New custom field list",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          {
            "name": "isPrivate",
            "in": "body",
            "description": "New opportunity privacy: private or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accessList",
            "in": "body",
            "description": "New list of users with access rights to the opportunity",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "isNotify",
            "in": "body",
            "description": "Notifies users from the access list about the opportunity or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated opportunity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpportunityWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/opportunity/{opportunityid:[0-9]+}/stage/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Opportunities"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update an opportunity stage by ID",
        "description": "Updates the selected opportunity to the stage with the ID specified in the request.",
        "parameters": [
          {
            "name": "opportunityid",
            "in": "body",
            "description": "Opportunity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stageid",
            "in": "body",
            "description": "New opportunity stage ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity with the updated stage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpportunityWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/opportunity/{opportunityid:[0-9]+}/access": {
      "put": {
        "tags": [
          "crm/Opportunities"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set opportunity access rights",
        "description": "Sets access rights to the selected opportunity with the parameters specified in the request.",
        "parameters": [
          {
            "name": "opportunityid",
            "in": "body",
            "description": "Opportunity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isPrivate",
            "in": "body",
            "description": "Opportunity privacy: private or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accessList",
            "in": "body",
            "description": "List of users with access rights",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpportunityWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/opportunity/filter/access": {
      "put": {
        "tags": [
          "crm/Opportunities"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set access rights to the filtered opportunities",
        "description": "Sets access rights to the list of all the opportunities matching the parameters specified in the request.",
        "parameters": [
          {
            "name": "responsibleid",
            "in": "body",
            "description": "Opportunity responsible ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "opportunityStagesid",
            "in": "body",
            "description": "Opportunity stage ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "Opportunity tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stageType",
            "in": "body",
            "description": "Opportunity stage type",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "contactAlsoIsParticipant",
            "in": "body",
            "description": "Participation status: take into account opportunities where the contact is a participant or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "fromDate",
            "in": "body",
            "description": "Start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "in": "body",
            "description": "End date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isPrivate",
            "in": "body",
            "description": "Opportunity privacy: private or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accessList",
            "in": "body",
            "description": "List of users with access rights",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of opportunities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpportunityWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/opportunity/access": {
      "put": {
        "tags": [
          "crm/Opportunities"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set access rights to the opportunities by IDs",
        "description": "Sets access rights to the list of opportunities with the IDs specified in the request.",
        "parameters": [
          {
            "name": "opportunityid",
            "in": "body",
            "description": "List of opportunity IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "isPrivate",
            "in": "body",
            "description": "Opportunity privacy: private or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accessList",
            "in": "body",
            "description": "List of users with access rights",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of opportunities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpportunityWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/opportunity": {
      "put": {
        "tags": [
          "crm/Opportunities"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete opportunities by IDs",
        "description": "Deletes a group of opportunities with the IDs specified in the request.",
        "parameters": [
          {
            "name": "opportunityids",
            "in": "body",
            "description": "List of opportunity IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of opportunities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpportunityWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "crm/Opportunities"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create an opportunity",
        "description": "Creates an opportunity with the parameters specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Opportunity primary contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "members",
            "in": "body",
            "description": "Opportunity participants",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "Opportunity title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "Opportunity description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responsibleid",
            "in": "body",
            "description": "Opportunity responsible ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "bidType",
            "in": "body",
            "description": "Bid type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "FixedBid",
                "PerHour",
                "PerDay",
                "PerWeek",
                "PerMonth",
                "PerYear"
              ],
              "description": "[0 - FixedBid, 1 - PerHour, 2 - PerDay, 3 - PerWeek, 4 - PerMonth, 5 - PerYear]"
            }
          },
          {
            "name": "bidValue",
            "in": "body",
            "description": "Amount of transactions",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "bidCurrencyAbbr",
            "in": "body",
            "description": "Currency (abbreviation)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "perPeriodValue",
            "in": "body",
            "description": "Amount per period",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stageid",
            "in": "body",
            "description": "Stage ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "successProbability",
            "in": "body",
            "description": "Opportunity success probability",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "actualCloseDate",
            "in": "body",
            "description": "Actual opportunity closure date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expectedCloseDate",
            "in": "body",
            "description": "Expected opportunity closure date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customFieldList",
            "in": "body",
            "description": "Custom field list",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          {
            "name": "isPrivate",
            "in": "body",
            "description": "Opportunity privacy: private or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accessList",
            "in": "body",
            "description": "List of users with access rights to the opportunity",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "isNotify",
            "in": "body",
            "description": "Notifies users from the access list about the opportunity or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpportunityWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/opportunity/filter": {
      "delete": {
        "tags": [
          "crm/Opportunities"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete filtered opportunities",
        "description": "Deletes a list of all the opportunities matching the parameters specified in the request.",
        "parameters": [
          {
            "name": "responsibleid",
            "in": "body",
            "description": "Opportunity responsible ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "opportunityStagesid",
            "in": "body",
            "description": "Opportunity stage ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "Opportunity tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stageType",
            "in": "body",
            "description": "Opportunity stage type",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "contactAlsoIsParticipant",
            "in": "body",
            "description": "Participation status: take into account opportunities where the contact is a participant or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "fromDate",
            "in": "body",
            "description": "Start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "in": "body",
            "description": "End date",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of opportunities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpportunityWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "crm/Opportunities"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get filtered opportunities",
        "description": "Returns a list of all the opportunities matching the parameters specified in the request.",
        "parameters": [
          {
            "name": "responsibleid",
            "in": "body",
            "description": "Opportunity responsible ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "opportunityStagesid",
            "in": "body",
            "description": "Opportunity stage ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "Opportunity tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stageType",
            "in": "body",
            "description": "Opportunity stage type",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "contactAlsoIsParticipant",
            "in": "body",
            "description": "Participation status: take into account opportunities where the contact is a participant or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "fromDate",
            "in": "body",
            "description": "Start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "in": "body",
            "description": "End date",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of opportunities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpportunityWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/opportunity/{opportunityid:[0-9]+}/contact": {
      "get": {
        "tags": [
          "crm/Opportunities"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get opportunity contacts",
        "description": "Returns a list of all the contacts related to the opportunity with the ID specified in the request.",
        "parameters": [
          {
            "name": "opportunityid",
            "in": "body",
            "description": "Opportunity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/opportunity/{opportunityid:[0-9]+}/contact/{contactid:[0-9]+}": {
      "post": {
        "tags": [
          "crm/Opportunities"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add an opportunity contact",
        "description": "Adds the selected contact to the opportunity with the ID specified in the request.",
        "parameters": [
          {
            "name": "opportunityid",
            "in": "body",
            "description": "Opportunity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/Opportunities"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete an opportunity contact",
        "description": "Deletes the selected contact from the opportunity with the ID specified in the request.",
        "parameters": [
          {
            "name": "opportunityid",
            "in": "body",
            "description": "Opportunity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/currency/rates": {
      "get": {
        "tags": [
          "crm/Currencies"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get currency rates",
        "description": "Returns a list of all the currency rates.",
        "responses": {
          "200": {
            "description": "List of currency rates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CurrencyRateWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "crm/Currencies"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a currency rate",
        "description": "Creates a new currency rate with the parameters specified in the request.",
        "parameters": [
          {
            "name": "fromCurrency",
            "in": "body",
            "description": "Currency to convert",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toCurrency",
            "in": "body",
            "description": "Currency into which the original currency will be converted",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rate",
            "in": "body",
            "description": "Exchange rate",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Currency rate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyRateWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/currency/rates/{id:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Currencies"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a currency rate by ID",
        "description": "Returns a currency rate by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Currency rate ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Currency rate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyRateWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "crm/Currencies"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a currency rate",
        "description": "Updates a currency rate with the parameters specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Currency ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fromCurrency",
            "in": "body",
            "description": "New currency to convert",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toCurrency",
            "in": "body",
            "description": "New currency into which the original currency will be converted",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rate",
            "in": "body",
            "description": "New currency rate",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated currency rate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyRateWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/Currencies"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a currency rate",
        "description": "Deletes a currency rate with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Currency rate ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Currency rate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyRateWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/currency/rates/{fromCurrency}/{toCurrency}": {
      "get": {
        "tags": [
          "crm/Currencies"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a currency rate by currencies",
        "description": "Returns a currency rate by currencies.",
        "parameters": [
          {
            "name": "fromCurrency",
            "in": "path",
            "description": "Currency to convert",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toCurrency",
            "in": "path",
            "description": "Currency into which the original currency will be converted",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Currency rate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyRateWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/currency/setrates": {
      "post": {
        "tags": [
          "crm/Currencies"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set currency rates",
        "description": "Sets currency rates to the currency specified in the request.",
        "parameters": [
          {
            "name": "currency",
            "in": "body",
            "description": "Currency (abbreviation)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rates",
            "in": "body",
            "description": "List of currency rates",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CurrencyRate"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Currency information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CurrencyRateWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/currency/addrates": {
      "post": {
        "tags": [
          "crm/Currencies"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add currency rates",
        "description": "Adds currency rates specified in the request.",
        "parameters": [
          {
            "name": "rates",
            "in": "body",
            "description": "List of currency rates",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CurrencyRate"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Currency information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CurrencyRateWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/invoice/{invoiceid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get an invoice by ID",
        "description": "Returns the detailed information about an invoice with the ID specified in the request.",
        "parameters": [
          {
            "name": "invoiceid",
            "in": "body",
            "description": "Invoice ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete an invoice",
        "description": "Deletes an invoice with the ID specified in the request.",
        "parameters": [
          {
            "name": "invoiceid",
            "in": "body",
            "description": "Invoice ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceBaseWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/invoice/sample": {
      "get": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get an invoice sample",
        "description": "Returns the detailed information about an invoice sample.",
        "responses": {
          "200": {
            "description": "Invoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/invoice/jsondata/{invoiceid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the invoice JSON data",
        "description": "Returns the JSON data of an invoice with the ID specified in the request.",
        "parameters": [
          {
            "name": "invoiceid",
            "in": "body",
            "description": "Invoice ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice JSON data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/invoice/filter": {
      "get": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get invoices",
        "description": "Returns a list of invoices matching the parameters specified in the request.",
        "parameters": [
          {
            "name": "status",
            "in": "body",
            "description": "Invoice status",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "issueDateFrom",
            "in": "body",
            "description": "Invoice start issue date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issueDateTo",
            "in": "body",
            "description": "Invoice end issue date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dueDateFrom",
            "in": "body",
            "description": "Invoice start due date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dueDateTo",
            "in": "body",
            "description": "Invoice end due date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityType",
            "in": "body",
            "description": "Invoice entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "body",
            "description": "Invoice entity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "currency",
            "in": "body",
            "description": "Invoice currency (abbreviation)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of invoices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceBaseWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/{entityType:(contact|person|company|opportunity)}/invoicelist/{entityid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get entity invoices",
        "description": "Returns a list of all the invoices related to the entity with the ID and type specified in the request.",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Invoice entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "body",
            "description": "Invoice entity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of invoices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceBaseWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/invoice/status/{status:[\\w\\d-]+}": {
      "put": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update an invoice group status",
        "description": "Updates a status of invoices with the IDs specified in the request.",
        "parameters": [
          {
            "name": "invoiceids",
            "in": "body",
            "description": "List of invoice IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "New invoice status",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Draft",
                "Sent",
                "Rejected",
                "Paid",
                "Archived"
              ],
              "description": "[1 - Draft, 2 - Sent, 3 - Rejected, 4 - Paid, 5 - Archived]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/invoice": {
      "delete": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete invoices",
        "description": "Deletes a group of invoices with the IDs specified in the request.",
        "parameters": [
          {
            "name": "invoiceids",
            "in": "body",
            "description": "List of invoice IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of invoices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceBaseWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create an invoice",
        "description": "Creates an invoice with the parameters (contact ID, consignee ID, etc.) specified in the request.",
        "parameters": [
          {
            "name": "number",
            "in": "body",
            "description": "Invoice number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issueDate",
            "in": "body",
            "description": "Invoice issue date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateType",
            "in": "body",
            "description": "Invoice template type",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactId",
            "in": "body",
            "description": "Invoice contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "consigneeId",
            "in": "body",
            "description": "Invoice consignee ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entityId",
            "in": "body",
            "description": "Invoice entity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "billingAddressID",
            "in": "body",
            "description": "Invoice billing address ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "deliveryAddressID",
            "in": "body",
            "description": "Invoice delivery address ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dueDate",
            "in": "body",
            "description": "Invoice due date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "body",
            "description": "Invoice language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "body",
            "description": "Invoice currency (abbreviation)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exchangeRate",
            "in": "body",
            "description": "Invoice exchange rate",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "purchaseOrderNumber",
            "in": "body",
            "description": "Invoice purchase order number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "terms",
            "in": "body",
            "description": "Invoice terms",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "Invoice description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceLines",
            "in": "body",
            "description": "List of invoice lines",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InvoiceLine"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/invoice/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update an invoice",
        "description": "Updates the selected invoice with the parameters (contact ID, consignee ID, etc.) specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Invoice ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "issueDate",
            "in": "body",
            "description": "New invoice issue date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateType",
            "in": "body",
            "description": "New invoice template type",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactId",
            "in": "body",
            "description": "New invoice contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "consigneeId",
            "in": "body",
            "description": "New invoice consignee ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entityId",
            "in": "body",
            "description": "New invoice entity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "billingAddressID",
            "in": "body",
            "description": "New invoice billing address ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "deliveryAddressID",
            "in": "body",
            "description": "New invoice delivery address ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dueDate",
            "in": "body",
            "description": "New invoice due date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "body",
            "description": "New invoice language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "body",
            "description": "New invoice currency (abbreviation)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exchangeRate",
            "in": "body",
            "description": "New invoice exchange rate",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "purchaseOrderNumber",
            "in": "body",
            "description": "New invoice purchase order number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "terms",
            "in": "body",
            "description": "New invoice terms",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "New invoice description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceLines",
            "in": "body",
            "description": "New list of invoice lines",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InvoiceLine"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated invoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/invoice/{invoiceid:[0-9]+}/pdf": {
      "get": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the invoice pdf file",
        "description": "Returns the pdf file related to an invoice with the ID specified in the request.",
        "parameters": [
          {
            "name": "invoiceid",
            "in": "body",
            "description": "Invoice ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pdf file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/invoice/converter/data": {
      "post": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get invoice converter data",
        "description": "Returns information about the generation of the invoice pdf file.",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "body",
            "description": "Invoice ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "storageUrl",
            "in": "body",
            "description": "Storage URL",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revisionId",
            "in": "body",
            "description": "Revision ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Converter data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConverterData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/invoice/bynumber/exist": {
      "get": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Check invoice existence by number",
        "description": "Returns the existence of an invoice with the number specified in the request.",
        "parameters": [
          {
            "name": "number",
            "in": "body",
            "description": "Invoice number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice existence",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/invoice/bynumber": {
      "get": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get an invoice by number",
        "description": "Returns the detailed information about an invoice with the number specified in the request.",
        "parameters": [
          {
            "name": "number",
            "in": "body",
            "description": "Invoice number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/invoiceitem/filter": {
      "get": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get filtered invoice items",
        "description": "Returns a list of invoice items matching the parameters specified in the request.",
        "parameters": [
          {
            "name": "status",
            "in": "body",
            "description": "Invoice status",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "inventoryStock",
            "in": "body",
            "description": "Specifies if the inventory is tracked or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of invoice items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceItemWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/invoiceitem/{invoiceitemid:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get an invoice item by ID",
        "description": "Returns the detailed information about an invoice item with the ID specified in the request.",
        "parameters": [
          {
            "name": "invoiceitemid",
            "in": "body",
            "description": "Invoice item ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceItemWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/invoiceline": {
      "post": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create an invoice line",
        "description": "Creates an invoice line with the parameters (invoice ID, invoice item ID, etc.) specified in the request.",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "body",
            "description": "Invoice ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "invoiceItemId",
            "in": "body",
            "description": "Invoice item ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "invoiceTax1Id",
            "in": "body",
            "description": "First invoice tax ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "invoiceTax2Id",
            "in": "body",
            "description": "Second invoice tax ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortOrder",
            "in": "body",
            "description": "Sort order",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "Description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quantity",
            "in": "body",
            "description": "Quantity",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "price",
            "in": "body",
            "description": "Price",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "discount",
            "in": "body",
            "description": "Discount",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice line",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceLineWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/invoiceline/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update an invoice line",
        "description": "Updates the selected invoice line with the parameters (invoice ID, invoice item ID, etc.) specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Invoice line ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "invoiceId",
            "in": "body",
            "description": "Invoice ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "invoiceItemId",
            "in": "body",
            "description": "Invoice item ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "invoiceTax1Id",
            "in": "body",
            "description": "New first invoice tax ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "invoiceTax2Id",
            "in": "body",
            "description": "New second invoice tax ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortOrder",
            "in": "body",
            "description": "New sort order",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "New description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quantity",
            "in": "body",
            "description": "New quantity",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "price",
            "in": "body",
            "description": "New price",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "discount",
            "in": "body",
            "description": "New discount",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated invoice line",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceLineWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete an invoice line",
        "description": "Deletes an invoice line with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Invoice line ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice line ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/invoiceitem": {
      "post": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create an invoice item",
        "description": "Creates an invoice item with the parameters (title, description, price, etc.) specified in the request.",
        "parameters": [
          {
            "name": "title",
            "in": "body",
            "description": "Invoice item title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "Invoice item description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "price",
            "in": "body",
            "description": "Invoice item price",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "sku",
            "in": "body",
            "description": "Invoice item stock keeping unit",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stockQuantity",
            "in": "body",
            "description": "Invoice item stock quantity",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "trackInventory",
            "in": "body",
            "description": "Specifies if the inventory is tracked or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invoiceTax1id",
            "in": "body",
            "description": "First invoice item tax ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "invoiceTax2id",
            "in": "body",
            "description": "Second invoice item tax ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceItemWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete invoice items",
        "description": "Deletes a group of invoice items with the IDs specified in the request.",
        "parameters": [
          {
            "name": "ids",
            "in": "body",
            "description": "List of invoice item IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of invoice items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceItemWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/invoiceitem/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update an invoice item",
        "description": "Updates the selected invoice item with the parameters (title, description, price, etc.) specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Invoice item ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "New invoice item title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "New invoice item description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "price",
            "in": "body",
            "description": "New invoice item price",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "sku",
            "in": "body",
            "description": "New invoice item stock keeping unit",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stockQuantity",
            "in": "body",
            "description": "New invoice item stock quantity",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "trackInventory",
            "in": "body",
            "description": "Specifies if the inventory is tracked or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "invoiceTax1id",
            "in": "body",
            "description": "New first invoice item tax ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "invoiceTax2id",
            "in": "body",
            "description": "New second invoice item tax ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated invoice item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceItemWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete an invoice item",
        "description": "Deletes an invoice item with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Invoice item ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceItemWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/invoice/tax": {
      "get": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get invoice taxes",
        "description": "Returns a list of invoice taxes.",
        "responses": {
          "200": {
            "description": "List of invoice taxes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceTaxWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create an invoice tax",
        "description": "Creates an invoice tax with the parameters (name, description, rate) specified in the request.",
        "parameters": [
          {
            "name": "name",
            "in": "body",
            "description": "Tax name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "Tax description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rate",
            "in": "body",
            "description": "Tax rate",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice tax",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceTaxWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/invoice/tax/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update an invoice tax",
        "description": "Updates the selected invoice tax with the parameters (name, description, rate) specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Tax ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "body",
            "description": "New tax name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "New tax description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rate",
            "in": "body",
            "description": "New tax rate",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated invoice tax",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceTaxWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete an invoice tax",
        "description": "Deletes an invoice tax with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Tax ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice tax",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceTaxWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/invoice/settings": {
      "get": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the default invoice settings",
        "description": "Returns the default invoice settings.",
        "responses": {
          "200": {
            "description": "Default invoice settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceSetting"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/invoice/settings/name": {
      "put": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Save the invoice number default settings",
        "description": "Saves the default settings for the invoice number specified in the request.",
        "parameters": [
          {
            "name": "autogenerated",
            "in": "body",
            "description": "Defines if the default invoice number is autogenerated or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "prefix",
            "in": "body",
            "description": "Invoice prefix",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "body",
            "description": "Invoice number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceSetting"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/invoice/settings/terms": {
      "put": {
        "tags": [
          "crm/Invoices"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Save the invoice terms default settings",
        "description": "Saves the default settings for the invoice terms specified in the request.",
        "parameters": [
          {
            "name": "terms",
            "in": "body",
            "description": "Invoice terms",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceSetting"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/case/{caseid:[0-9]+}/close": {
      "put": {
        "tags": [
          "crm/Cases"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Close a case",
        "description": "Closes a case with the ID specified in the request.",
        "parameters": [
          {
            "name": "caseid",
            "in": "body",
            "description": "Case ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Case",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CasesWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/case/{caseid:[0-9]+}/reopen": {
      "put": {
        "tags": [
          "crm/Cases"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Reopen a case",
        "description": "Reopens a case with the ID specified in the request.",
        "parameters": [
          {
            "name": "caseid",
            "in": "body",
            "description": "Case ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Case",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CasesWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/case": {
      "post": {
        "tags": [
          "crm/Cases"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a case",
        "description": "Creates a case with the parameters specified in the request.",
        "parameters": [
          {
            "name": "title",
            "in": "body",
            "description": "Case title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "members",
            "in": "body",
            "description": "List of contact IDs of the case participants",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "customFieldList",
            "in": "body",
            "description": "List of case custom fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          {
            "name": "isPrivate",
            "in": "body",
            "description": "Case privacy: private or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accessList",
            "in": "body",
            "description": "List of users with access to the case",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "isNotify",
            "in": "body",
            "description": "Notifies users from the access list about the case",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Case",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CasesWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "crm/Cases"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete cases by IDs",
        "description": "Deletes a group of cases with the IDs specified in the request.",
        "parameters": [
          {
            "name": "casesids",
            "in": "body",
            "description": "List of case IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of cases",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CasesWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/case/{caseid:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Cases"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a case",
        "description": "Updates the selected case with the parameters specified in the request.",
        "parameters": [
          {
            "name": "caseid",
            "in": "body",
            "description": "Case ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "New case title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "members",
            "in": "body",
            "description": "List of contact IDs of the case participants",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "customFieldList",
            "in": "body",
            "description": "New list of case custom fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          {
            "name": "isPrivate",
            "in": "body",
            "description": "Case privacy: private or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accessList",
            "in": "body",
            "description": "New list of users with access to the case",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "isNotify",
            "in": "body",
            "description": "Notifies users from the access list about the case",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Case",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CasesWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "crm/Cases"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a case by ID",
        "description": "Returns the detailed information about a case with the ID specified in the request.",
        "parameters": [
          {
            "name": "caseid",
            "in": "body",
            "description": "Case ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Case",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CasesWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/Cases"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a case",
        "description": "Deletes a case with the ID specified in the request.",
        "parameters": [
          {
            "name": "caseid",
            "in": "body",
            "description": "Case ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Case",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CasesWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/case/{caseid:[0-9]+}/access": {
      "put": {
        "tags": [
          "crm/Cases"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set access rights to the case",
        "description": "Sets access rights to the selected case with the parameters specified in the request.",
        "parameters": [
          {
            "name": "caseid",
            "in": "body",
            "description": "Case ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isPrivate",
            "in": "body",
            "description": "Case privacy: private or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accessList",
            "in": "body",
            "description": "List of users with access to the case",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Case",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CasesWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/case/access": {
      "put": {
        "tags": [
          "crm/Cases"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set access rights to the cases by IDs",
        "description": "Sets access rights to the list of cases with the IDs specified in the request.",
        "parameters": [
          {
            "name": "casesid",
            "in": "body",
            "description": "List of case IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "isPrivate",
            "in": "body",
            "description": "Case privacy: private or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accessList",
            "in": "body",
            "description": "List of users with access",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of cases",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CasesWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/case/filter/access": {
      "put": {
        "tags": [
          "crm/Cases"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set access rights to the cases by parameters",
        "description": "Sets access rights to the list of all the cases matching the parameters specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isClosed",
            "in": "body",
            "description": "Case status: closed or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "Case tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "isPrivate",
            "in": "body",
            "description": "Case privacy: private or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accessList",
            "in": "body",
            "description": "List of users with access",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of cases",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CasesWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/case/filter": {
      "get": {
        "tags": [
          "crm/Cases"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get cases",
        "description": "Returns a list of all the cases matching the parameters specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isClosed",
            "in": "body",
            "description": "Case status: closed or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "Case tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of cases",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CasesWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/Cases"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete cases by parameters",
        "description": "Deletes a list of all the cases matching the parameters specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isClosed",
            "in": "body",
            "description": "Case status: closed or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "Case tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of cases",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CasesWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/case/{caseid:[0-9]+}/contact": {
      "get": {
        "tags": [
          "crm/Cases"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get case contacts",
        "description": "Returns a list of all the contacts related to the case with the ID specified in the request.",
        "parameters": [
          {
            "name": "caseid",
            "in": "body",
            "description": "Case ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "crm/Cases"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a case contact",
        "description": "Adds the selected contact to the case with the ID specified in the request.",
        "parameters": [
          {
            "name": "caseid",
            "in": "body",
            "description": "Case ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/case/{caseid:[0-9]+}/contact/{contactid:[0-9]+}": {
      "delete": {
        "tags": [
          "crm/Cases"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a case contact",
        "description": "Deletes the selected contact from the case with the ID specified in the request.",
        "parameters": [
          {
            "name": "caseid",
            "in": "body",
            "description": "Case ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/data/{infoType}/category": {
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get contact categories by information type",
        "description": "Returns a list of all the available contact categories of the specified information type.",
        "parameters": [
          {
            "name": "infoType",
            "in": "path",
            "description": "Contact information type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Phone",
                "Email",
                "Website",
                "Skype",
                "Twitter",
                "LinkedIn",
                "Facebook",
                "Address",
                "LiveJournal",
                "MySpace",
                "GMail",
                "Blogger",
                "Yahoo",
                "MSN",
                "ICQ",
                "Jabber",
                "AIM",
                "VK"
              ],
              "description": "[0 - Phone, 1 - Email, 2 - Website, 3 - Skype, 4 - Twitter, 5 - LinkedIn, 6 - Facebook, 7 - Address, 8 - LiveJournal, 9 - MySpace, 10 - GMail, 11 - Blogger, 12 - Yahoo, 13 - MSN, 14 - ICQ, 15 - Jabber, 16 - AIM, 17 - VK]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contact categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/data/infoType": {
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get contact information types",
        "description": "Returns a list of all the available contact information types.",
        "responses": {
          "200": {
            "description": "List of all the contact information types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/data": {
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get contact information",
        "description": "Returns the detailed information on the contact with the ID specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactInfoWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add contact information",
        "description": "Adds the information with the parameters specified in the request to the contact with the selected ID.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "infoType",
            "in": "body",
            "description": "Contact information type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Phone",
                "Email",
                "Website",
                "Skype",
                "Twitter",
                "LinkedIn",
                "Facebook",
                "Address",
                "LiveJournal",
                "MySpace",
                "GMail",
                "Blogger",
                "Yahoo",
                "MSN",
                "ICQ",
                "Jabber",
                "AIM",
                "VK"
              ],
              "description": "[0 - Phone, 1 - Email, 2 - Website, 3 - Skype, 4 - Twitter, 5 - LinkedIn, 6 - Facebook, 7 - Address, 8 - LiveJournal, 9 - MySpace, 10 - GMail, 11 - Blogger, 12 - Yahoo, 13 - MSN, 14 - ICQ, 15 - Jabber, 16 - AIM, 17 - VK]"
            }
          },
          {
            "name": "data",
            "in": "body",
            "description": "New data",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isPrimary",
            "in": "body",
            "description": "Contact information importance: primary or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "category",
            "in": "body",
            "description": "Contact information category",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactInfoWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/data/{id:[0-9]+}": {
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get contact information by ID",
        "description": "Returns the detailed contact information with the ID specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "body",
            "description": "Contact information ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactInfoWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update contact information",
        "description": "Updates the contact information with the parameters specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Contact information record ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "infoType",
            "in": "body",
            "description": "New contact information type",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "data",
            "in": "body",
            "description": "New data",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isPrimary",
            "in": "body",
            "description": "New contact information importance: primary or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "category",
            "in": "body",
            "description": "New contact information category",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated contact information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactInfoWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete contact information",
        "description": "Deletes the selected information from the contact with the ID specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "body",
            "description": "Contact information record ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactInfoWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/addressdata": {
      "post": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add contact address information",
        "description": "Adds the address information to the contact with the ID specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "address",
            "in": "body",
            "description": "Address data",
            "schema": {
              "$ref": "#/components/schemas/Address"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactInfoWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/addressdata/{id:[0-9]+}": {
      "put": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update contact address information",
        "description": "Updates the contact address information with the parameter specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Contact information record ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "address",
            "in": "body",
            "description": "New address data",
            "schema": {
              "$ref": "#/components/schemas/Address"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact information with the updated address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactInfoWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/crm/contact/{contactid:[0-9]+}/data/{infoType}": {
      "get": {
        "tags": [
          "crm/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get contact information by its type",
        "description": "Returns the detailed contact information by the information type specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "infoType",
            "in": "path",
            "description": "Contact information type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Phone",
                "Email",
                "Website",
                "Skype",
                "Twitter",
                "LinkedIn",
                "Facebook",
                "Address",
                "LiveJournal",
                "MySpace",
                "GMail",
                "Blogger",
                "Yahoo",
                "MSN",
                "ICQ",
                "Jabber",
                "AIM",
                "VK"
              ],
              "description": "[0 - Phone, 1 - Email, 2 - Website, 3 - Skype, 4 - Twitter, 5 - LinkedIn, 6 - Facebook, 7 - Address, 8 - LiveJournal, 9 - MySpace, 10 - GMail, 11 - Blogger, 12 - Yahoo, 13 - MSN, 14 - ICQ, 15 - Jabber, 16 - AIM, 17 - VK]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/settings/favorites": {
      "put": {
        "tags": [
          "files/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Display the \"Favorites\" folder",
        "description": "Displays the \"Favorites\" folder.",
        "parameters": [
          {
            "name": "set",
            "in": "body",
            "description": "Turns the parameter on or off",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bool value: true if the parameter is enabled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/settings/templates": {
      "put": {
        "tags": [
          "files/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Display the \"Templates\" folder",
        "description": "Displays the \"Templates\" folder.",
        "parameters": [
          {
            "name": "set",
            "in": "body",
            "description": "Turns the parameter on or off",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bool value: true if the parameter is enabled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/settings/autocleanup": {
      "put": {
        "tags": [
          "files/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the trash bin auto-clearing setting",
        "description": "Updates the trash bin auto-clearing setting.",
        "parameters": [
          {
            "name": "set",
            "in": "body",
            "description": "Enables the auto-clearing or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "gap",
            "in": "body",
            "description": "A time interval when the auto-clearing will be performed (one week, two weeks, one month, two months, three months)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "OneWeek",
                "TwoWeeks",
                "OneMonth",
                "TwoMonths",
                "ThreeMonths"
              ],
              "description": "[1 - OneWeek, 2 - TwoWeeks, 3 - OneMonth, 4 - TwoMonths, 5 - ThreeMonths]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The auto-clearing setting properties",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoCleanUpData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "files/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the auto-clearing setting properties",
        "description": "Returns the auto-clearing setting properties.",
        "responses": {
          "200": {
            "description": "The auto-clearing setting properties",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoCleanUpData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/settings/dafaultaccessrights": {
      "put": {
        "tags": [
          "files/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Change the default access rights",
        "description": "Changes the default access rights in the sharing settings.",
        "parameters": [
          {
            "name": "value",
            "in": "body",
            "description": "Default access rights",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default access rights",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/settings/downloadtargz": {
      "put": {
        "tags": [
          "files/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Change the archive format",
        "description": "Changes the format of the downloaded archive from .zip to .tar.gz.",
        "parameters": [
          {
            "name": "set",
            "in": "body",
            "description": "Turns the parameter on or off",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Archive",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ICompress"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/docservice": {
      "put": {
        "tags": [
          "files/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Check the document service URL",
        "description": "Checks the document service location.",
        "parameters": [
          {
            "name": "docServiceUrl",
            "in": "body",
            "description": "The address of Document Server",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "docServiceUrlInternal",
            "in": "body",
            "description": "The address of Document Server in the local private network",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "docServiceUrlPortal",
            "in": "body",
            "description": "The address of Community Server",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document service information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "files/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the document service URL",
        "description": "Returns the address of the connected editors.",
        "parameters": [
          {
            "name": "version",
            "in": "body",
            "description": "Specifies the editor version or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/@root": {
      "get": {
        "tags": [
          "files/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get filtered sections",
        "description": "Returns all the sections matching the parameters specified in the request.",
        "parameters": [
          {
            "name": "userIdOrGroupId",
            "in": "body",
            "description": "User or group ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "filterType",
            "in": "body",
            "description": "Filter type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "FilesOnly",
                "FoldersOnly",
                "DocumentsOnly",
                "PresentationsOnly",
                "SpreadsheetsOnly",
                "ImagesOnly",
                "ByUser",
                "ByDepartment",
                "ArchiveOnly",
                "ByExtension",
                "MediaOnly",
                "ByExtensionIncludeFolders"
              ],
              "description": "[0 - None, 1 - FilesOnly, 2 - FoldersOnly, 3 - DocumentsOnly, 4 - PresentationsOnly, 5 - SpreadsheetsOnly, 7 - ImagesOnly, 8 - ByUser, 9 - ByDepartment, 10 - ArchiveOnly, 11 - ByExtension, 12 - MediaOnly, 13 - ByExtensionIncludeFolders]"
            }
          },
          {
            "name": "searchInContent",
            "in": "body",
            "description": "Specifies whether to search within the section contents or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "extension",
            "in": "body",
            "description": "File extension by which files will be searched for if the FilterType.ByExtension parameter is passed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withSubfolders",
            "in": "body",
            "description": "Specifies whether to return sections with or without subfolders",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "withoutTrash",
            "in": "body",
            "description": "Specifies whether to return sections with or without trash folder",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "withoutAdditionalFolder",
            "in": "body",
            "description": "Specifies whether to return sections with or without additional folders",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contents of the sections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FolderContentWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/@my": {
      "get": {
        "tags": [
          "files/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the \"My documents\" section",
        "description": "Returns the detailed list of files and folders located in the \"My documents\" section.",
        "parameters": [
          {
            "name": "userIdOrGroupId",
            "in": "body",
            "description": "User or group ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "filterType",
            "in": "body",
            "description": "Filter type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "FilesOnly",
                "FoldersOnly",
                "DocumentsOnly",
                "PresentationsOnly",
                "SpreadsheetsOnly",
                "ImagesOnly",
                "ByUser",
                "ByDepartment",
                "ArchiveOnly",
                "ByExtension",
                "MediaOnly",
                "ByExtensionIncludeFolders"
              ],
              "description": "[0 - None, 1 - FilesOnly, 2 - FoldersOnly, 3 - DocumentsOnly, 4 - PresentationsOnly, 5 - SpreadsheetsOnly, 7 - ImagesOnly, 8 - ByUser, 9 - ByDepartment, 10 - ArchiveOnly, 11 - ByExtension, 12 - MediaOnly, 13 - ByExtensionIncludeFolders]"
            }
          },
          {
            "name": "searchInContent",
            "in": "body",
            "description": "Specifies whether to search within the section contents or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "extension",
            "in": "body",
            "description": "File extension by which files will be searched for if the FilterType.ByExtension parameter is passed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withSubfolders",
            "in": "body",
            "description": "Specifies whether to return sections with or without subfolders",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The \"My documents\" section contents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderContentWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/@projects": {
      "get": {
        "tags": [
          "files/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the \"In projects\" section",
        "description": "Returns the detailed list of files and folders located in the \"In projects\" section.",
        "parameters": [
          {
            "name": "userIdOrGroupId",
            "in": "body",
            "description": "User or group ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "filterType",
            "in": "body",
            "description": "Filter type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "FilesOnly",
                "FoldersOnly",
                "DocumentsOnly",
                "PresentationsOnly",
                "SpreadsheetsOnly",
                "ImagesOnly",
                "ByUser",
                "ByDepartment",
                "ArchiveOnly",
                "ByExtension",
                "MediaOnly",
                "ByExtensionIncludeFolders"
              ],
              "description": "[0 - None, 1 - FilesOnly, 2 - FoldersOnly, 3 - DocumentsOnly, 4 - PresentationsOnly, 5 - SpreadsheetsOnly, 7 - ImagesOnly, 8 - ByUser, 9 - ByDepartment, 10 - ArchiveOnly, 11 - ByExtension, 12 - MediaOnly, 13 - ByExtensionIncludeFolders]"
            }
          },
          {
            "name": "searchInContent",
            "in": "body",
            "description": "Specifies whether to search within the section contents or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "extension",
            "in": "body",
            "description": "File extension by which files will be searched for if the FilterType.ByExtension parameter is passed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withSubfolders",
            "in": "body",
            "description": "Specifies whether to return sections with or without subfolders",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The \"In projects\" section contents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderContentWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/@common": {
      "get": {
        "tags": [
          "files/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the \"Common\" section",
        "description": "Returns the detailed list of files and folders located in the \"Common\" section.",
        "parameters": [
          {
            "name": "userIdOrGroupId",
            "in": "body",
            "description": "User or group ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "filterType",
            "in": "body",
            "description": "Filter type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "FilesOnly",
                "FoldersOnly",
                "DocumentsOnly",
                "PresentationsOnly",
                "SpreadsheetsOnly",
                "ImagesOnly",
                "ByUser",
                "ByDepartment",
                "ArchiveOnly",
                "ByExtension",
                "MediaOnly",
                "ByExtensionIncludeFolders"
              ],
              "description": "[0 - None, 1 - FilesOnly, 2 - FoldersOnly, 3 - DocumentsOnly, 4 - PresentationsOnly, 5 - SpreadsheetsOnly, 7 - ImagesOnly, 8 - ByUser, 9 - ByDepartment, 10 - ArchiveOnly, 11 - ByExtension, 12 - MediaOnly, 13 - ByExtensionIncludeFolders]"
            }
          },
          {
            "name": "searchInContent",
            "in": "body",
            "description": "Specifies whether to search within the section contents or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "extension",
            "in": "body",
            "description": "File extension by which files will be searched for if the FilterType.ByExtension parameter is passed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withSubfolders",
            "in": "body",
            "description": "Specifies whether to return sections with or without subfolders",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The \"Common\" section contents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderContentWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/@share": {
      "get": {
        "tags": [
          "files/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the \"Shared with me\" section",
        "description": "Returns the detailed list of files and folders located in the \"Shared with me\" section.",
        "parameters": [
          {
            "name": "userIdOrGroupId",
            "in": "body",
            "description": "User or group ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "filterType",
            "in": "body",
            "description": "Filter type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "FilesOnly",
                "FoldersOnly",
                "DocumentsOnly",
                "PresentationsOnly",
                "SpreadsheetsOnly",
                "ImagesOnly",
                "ByUser",
                "ByDepartment",
                "ArchiveOnly",
                "ByExtension",
                "MediaOnly",
                "ByExtensionIncludeFolders"
              ],
              "description": "[0 - None, 1 - FilesOnly, 2 - FoldersOnly, 3 - DocumentsOnly, 4 - PresentationsOnly, 5 - SpreadsheetsOnly, 7 - ImagesOnly, 8 - ByUser, 9 - ByDepartment, 10 - ArchiveOnly, 11 - ByExtension, 12 - MediaOnly, 13 - ByExtensionIncludeFolders]"
            }
          },
          {
            "name": "searchInContent",
            "in": "body",
            "description": "Specifies whether to search within the section contents or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "extension",
            "in": "body",
            "description": "File extension by which files will be searched for if the FilterType.ByExtension parameter is passed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withSubfolders",
            "in": "body",
            "description": "Specifies whether to return sections with or without subfolders",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The \"Shared with me\" section contents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderContentWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/@recent": {
      "get": {
        "tags": [
          "files/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the \"Recent\" section",
        "description": "Returns the detailed list of files located in the \"Recent\" section.",
        "parameters": [
          {
            "name": "userIdOrGroupId",
            "in": "body",
            "description": "User or group ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "filterType",
            "in": "body",
            "description": "Filter type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "FilesOnly",
                "FoldersOnly",
                "DocumentsOnly",
                "PresentationsOnly",
                "SpreadsheetsOnly",
                "ImagesOnly",
                "ByUser",
                "ByDepartment",
                "ArchiveOnly",
                "ByExtension",
                "MediaOnly",
                "ByExtensionIncludeFolders"
              ],
              "description": "[0 - None, 1 - FilesOnly, 2 - FoldersOnly, 3 - DocumentsOnly, 4 - PresentationsOnly, 5 - SpreadsheetsOnly, 7 - ImagesOnly, 8 - ByUser, 9 - ByDepartment, 10 - ArchiveOnly, 11 - ByExtension, 12 - MediaOnly, 13 - ByExtensionIncludeFolders]"
            }
          },
          {
            "name": "searchInContent",
            "in": "body",
            "description": "Specifies whether to search within the section contents or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "extension",
            "in": "body",
            "description": "File extension by which files will be searched for if the FilterType.ByExtension parameter is passed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withSubfolders",
            "in": "body",
            "description": "Specifies whether to return sections with or without subfolders",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The \"Recent\" section contents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderContentWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/@favorites": {
      "get": {
        "tags": [
          "files/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the \"Favorites\" section",
        "description": "Returns the detailed list of files and folders located in the \"Favorites\" section.",
        "parameters": [
          {
            "name": "userIdOrGroupId",
            "in": "body",
            "description": "User or group ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "filterType",
            "in": "body",
            "description": "Filter type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "FilesOnly",
                "FoldersOnly",
                "DocumentsOnly",
                "PresentationsOnly",
                "SpreadsheetsOnly",
                "ImagesOnly",
                "ByUser",
                "ByDepartment",
                "ArchiveOnly",
                "ByExtension",
                "MediaOnly",
                "ByExtensionIncludeFolders"
              ],
              "description": "[0 - None, 1 - FilesOnly, 2 - FoldersOnly, 3 - DocumentsOnly, 4 - PresentationsOnly, 5 - SpreadsheetsOnly, 7 - ImagesOnly, 8 - ByUser, 9 - ByDepartment, 10 - ArchiveOnly, 11 - ByExtension, 12 - MediaOnly, 13 - ByExtensionIncludeFolders]"
            }
          },
          {
            "name": "searchInContent",
            "in": "body",
            "description": "Specifies whether to search within the section contents or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "extension",
            "in": "body",
            "description": "File extension by which files will be searched for if the FilterType.ByExtension parameter is passed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withSubfolders",
            "in": "body",
            "description": "Specifies whether to return sections with or without subfolders",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The \"Favorites\" section contents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderContentWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/@templates": {
      "get": {
        "tags": [
          "files/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the \"Templates\" section",
        "description": "Returns the detailed list of files located in the \"Templates\" section.",
        "parameters": [
          {
            "name": "userIdOrGroupId",
            "in": "body",
            "description": "User or group ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "filterType",
            "in": "body",
            "description": "Filter type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "FilesOnly",
                "FoldersOnly",
                "DocumentsOnly",
                "PresentationsOnly",
                "SpreadsheetsOnly",
                "ImagesOnly",
                "ByUser",
                "ByDepartment",
                "ArchiveOnly",
                "ByExtension",
                "MediaOnly",
                "ByExtensionIncludeFolders"
              ],
              "description": "[0 - None, 1 - FilesOnly, 2 - FoldersOnly, 3 - DocumentsOnly, 4 - PresentationsOnly, 5 - SpreadsheetsOnly, 7 - ImagesOnly, 8 - ByUser, 9 - ByDepartment, 10 - ArchiveOnly, 11 - ByExtension, 12 - MediaOnly, 13 - ByExtensionIncludeFolders]"
            }
          },
          {
            "name": "searchInContent",
            "in": "body",
            "description": "Specifies whether to search within the section contents or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "extension",
            "in": "body",
            "description": "File extension by which files will be searched for if the FilterType.ByExtension parameter is passed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withSubfolders",
            "in": "body",
            "description": "Specifies whether to return sections with or without subfolders",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The \"Templates\" section contents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderContentWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/@trash": {
      "get": {
        "tags": [
          "files/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the \"Trash\" section",
        "description": "Returns the detailed list of files and folders located in the \"Trash\" section.",
        "parameters": [
          {
            "name": "userIdOrGroupId",
            "in": "body",
            "description": "User or group ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "filterType",
            "in": "body",
            "description": "Filter type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "FilesOnly",
                "FoldersOnly",
                "DocumentsOnly",
                "PresentationsOnly",
                "SpreadsheetsOnly",
                "ImagesOnly",
                "ByUser",
                "ByDepartment",
                "ArchiveOnly",
                "ByExtension",
                "MediaOnly",
                "ByExtensionIncludeFolders"
              ],
              "description": "[0 - None, 1 - FilesOnly, 2 - FoldersOnly, 3 - DocumentsOnly, 4 - PresentationsOnly, 5 - SpreadsheetsOnly, 7 - ImagesOnly, 8 - ByUser, 9 - ByDepartment, 10 - ArchiveOnly, 11 - ByExtension, 12 - MediaOnly, 13 - ByExtensionIncludeFolders]"
            }
          },
          {
            "name": "searchInContent",
            "in": "body",
            "description": "Specifies whether to search within the section contents or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "extension",
            "in": "body",
            "description": "File extension by which files will be searched for if the FilterType.ByExtension parameter is passed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withSubfolders",
            "in": "body",
            "description": "Specifies whether to return sections with or without subfolders",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The \"Trash\" section contents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderContentWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/{folderId}": {
      "get": {
        "tags": [
          "files/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a folder by ID",
        "description": "Returns the detailed list of files and folders located in the folder with the ID specified in the request.",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userIdOrGroupId",
            "in": "body",
            "description": "User or group ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "filterType",
            "in": "body",
            "description": "Filter type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "FilesOnly",
                "FoldersOnly",
                "DocumentsOnly",
                "PresentationsOnly",
                "SpreadsheetsOnly",
                "ImagesOnly",
                "ByUser",
                "ByDepartment",
                "ArchiveOnly",
                "ByExtension",
                "MediaOnly",
                "ByExtensionIncludeFolders"
              ],
              "description": "[0 - None, 1 - FilesOnly, 2 - FoldersOnly, 3 - DocumentsOnly, 4 - PresentationsOnly, 5 - SpreadsheetsOnly, 7 - ImagesOnly, 8 - ByUser, 9 - ByDepartment, 10 - ArchiveOnly, 11 - ByExtension, 12 - MediaOnly, 13 - ByExtensionIncludeFolders]"
            }
          },
          {
            "name": "searchInContent",
            "in": "body",
            "description": "Specifies whether to search within the section contents or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "extension",
            "in": "body",
            "description": "File extension by which files will be searched for if the FilterType.ByExtension parameter is passed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withSubfolders",
            "in": "body",
            "description": "Specifies whether to return sections with or without subfolders",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder contents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderContentWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/@my/upload": {
      "post": {
        "tags": [
          "files/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Upload a file to the \"My documents\" section",
        "description": "Uploads a file specified in the request to the \"My documents\" section by single file uploading or standart multipart/form-data method.\n\n**Note**: You can upload files in two different ways:\n             <ol>\n            <li>Using single file upload. You should set the Content-Type and Content-Disposition headers to specify a file name and content type, and send the file to the request body.</li>\n            <li>Using standart multipart/form-data method.</li>\n            </ol>",
        "parameters": [
          {
            "name": "file",
            "in": "body",
            "description": "Request input stream",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "contentType",
            "in": "body",
            "description": "Content-Type header",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "contentDisposition",
            "in": "body",
            "description": "Content-Disposition header",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "files",
            "in": "body",
            "description": "List of files when specified as multipart/form-data",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Uploaded file(s)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/@common/upload": {
      "post": {
        "tags": [
          "files/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Upload a file to the \"Common\" section",
        "description": "Uploads a file specified in the request to the \"Common\" section by single file uploading or standart multipart/form-data method.\n\n**Note**: You can upload files in two different ways:\n             <ol>\n            <li>Using single file upload. You should set the Content-Type and Content-Disposition headers to specify a file name and content type, and send the file to the request body.</li>\n            <li>Using standart multipart/form-data method.</li>\n            </ol>",
        "parameters": [
          {
            "name": "file",
            "in": "body",
            "description": "Request input stream",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "contentType",
            "in": "body",
            "description": "Content-Type header",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "contentDisposition",
            "in": "body",
            "description": "Content-Disposition header",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "files",
            "in": "body",
            "description": "List of files when specified as multipart/form-data",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Uploaded file(s)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/{folderId}/upload": {
      "post": {
        "tags": [
          "files/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Upload a file",
        "description": "Uploads a file specified in the request to the selected folder by single file uploading or standart multipart/form-data method.\n\n**Note**: You can upload files in two different ways:\n             <ol>\n            <li>Using single file upload. You should set the Content-Type and Content-Disposition headers to specify a file name and content type, and send the file to the request body.</li>\n            <li>Using standart multipart/form-data method.</li>\n            </ol>",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "body",
            "description": "Request input stream",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "contentType",
            "in": "body",
            "description": "Content-Type header",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "contentDisposition",
            "in": "body",
            "description": "Content-Disposition header",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "files",
            "in": "body",
            "description": "List of files when specified as multipart/form-data",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          {
            "name": "createNewIfExist",
            "in": "body",
            "description": "Specifies whether to create a new file if it already exists or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "storeOriginalFileFlag",
            "in": "body",
            "description": "Specifies whether to upload documents in the original formats as well or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "keepConvertStatus",
            "in": "body",
            "description": "Specifies whether to keep the file converting status or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Uploaded file(s)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/@my/insert": {
      "post": {
        "tags": [
          "files/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Insert a file to the \"My documents\" section",
        "description": "Inserts a file specified in the request to the \"My documents\" section by single file uploading.",
        "parameters": [
          {
            "name": "file",
            "in": "body",
            "description": "Request input stream",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "File name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createNewIfExist",
            "in": "body",
            "description": "Specifies whether to create a new file if it already exists or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "keepConvertStatus",
            "in": "body",
            "description": "Specifies whether to keep the file converting status or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inserted file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/@common/insert": {
      "post": {
        "tags": [
          "files/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Insert a file to the \"Common\" section",
        "description": "Inserts a file specified in the request to the \"Common\" section by single file uploading.",
        "parameters": [
          {
            "name": "file",
            "in": "body",
            "description": "Request input stream",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "File name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createNewIfExist",
            "in": "body",
            "description": "Specifies whether to create a new file if it already exists or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "keepConvertStatus",
            "in": "body",
            "description": "Specifies whether to keep the file converting status or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inserted file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/{folderId}/insert": {
      "post": {
        "tags": [
          "files/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Insert a file",
        "description": "Inserts a file specified in the request to the selected folder by single file uploading.",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "body",
            "description": "Request input stream",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "File name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createNewIfExist",
            "in": "body",
            "description": "Specifies whether to create a new file if it already exists or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "keepConvertStatus",
            "in": "body",
            "description": "Specifies whether to keep the file converting status or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inserted file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/{fileId}/update": {
      "put": {
        "tags": [
          "files/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update file content",
        "description": "Updates the content of a file with the ID specified in the request.",
        "parameters": [
          {
            "name": "file",
            "in": "body",
            "description": "Request input stream",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileExtension",
            "in": "body",
            "description": "File extension",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "encrypted",
            "in": "body",
            "description": "Specifies whether to encrypt a file or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "forcesave",
            "in": "body",
            "description": "Specifies whether to force save a file or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/file/{fileId}/saveediting": {
      "put": {
        "tags": [
          "files/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Save file edits",
        "description": "Saves edits to a file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileExtension",
            "in": "body",
            "description": "File extension",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "downloadUri",
            "in": "body",
            "description": "URI to download a file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stream",
            "in": "body",
            "description": "Request file stream",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "doc",
            "in": "body",
            "description": "Shared token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forcesave",
            "in": "body",
            "description": "Specifies whether to force save a file or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Saved file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/file/{fileId}/startedit": {
      "post": {
        "tags": [
          "files/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Start file editing",
        "description": "Informs about opening a file with the ID specified in the request for editing, locking it from being deleted or moved (this method is called by the mobile editors).",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "editingAlone",
            "in": "body",
            "description": "Specifies whether to share a file with other users for editing or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "doc",
            "in": "body",
            "description": "Shared token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File key for Document Service",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/file/{fileId}/trackeditfile": {
      "get": {
        "tags": [
          "files/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Track file editing",
        "description": "Tracks file changes when editing.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tabId",
            "in": "body",
            "description": "Tab ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "docKeyForTrack",
            "in": "body",
            "description": "Document key for tracking",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "doc",
            "in": "body",
            "description": "Shared token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isFinish",
            "in": "body",
            "description": "Specifies whether to finish file tracking or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File changes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/file/{fileId}/openedit": {
      "get": {
        "tags": [
          "files/Files"
        ],
        "summary": "Open a file",
        "description": "Returns the initialization configuration of a file to open it in the editor.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "body",
            "description": "File version",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "doc",
            "in": "body",
            "description": "Shared token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Configuration"
                }
              }
            }
          }
        }
      }
    },
    "/api/2.0/files/{folderId}/upload/create_session": {
      "post": {
        "tags": [
          "files/Operations"
        ],
        "summary": "Chunked upload",
        "description": "Creates a session to upload large files in multiple chunks to the folder with the ID specified in the request.\n\n**Note**: Each chunk can have different length but the length should be multiple of <b>512</b> and greater or equal to <b>10 mb</b>. Last chunk can have any size.\n            After the initial response to the request with the <b>200 OK</b> status, you must get the <em>location</em> field value from the response. Send all your chunks to this location.\n            Each chunk must be sent in the exact order the chunks appear in the file.\n            After receiving each chunk, the server will respond with the current information about the upload session if no errors occurred.\n            When the number of bytes uploaded is equal to the number of bytes you sent in the initial request, the server responds with the <b>201 Created</b> status and sends you information about the uploaded file.",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "in": "body",
            "description": "File name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileSize",
            "in": "body",
            "description": "File length in bytes",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "relativePath",
            "in": "body",
            "description": "Relative path to the folder",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "encrypted",
            "in": "body",
            "description": "Specifies whether to encrypt a file or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information about created session which includes:\n            <ul>\n            <li><b>id:</b> unique ID of this upload session</li>\n            <li><b>created:</b> UTC time when the session was created</li>\n            <li><b>expired:</b> UTC time when the session will expire if no chunks are sent before that time</li>\n            <li><b>location:</b> URL where you should send your next chunk</li>\n            <li><b>bytes_uploaded:</b> number of bytes uploaded for the specific upload ID</li>\n            <li><b>bytes_total:</b> total number of bytes which will be uploaded</li>\n            </ul>",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/2.0/files/folder/{folderId}": {
      "post": {
        "tags": [
          "files/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a folder",
        "description": "Creates a new folder with the title specified in the request. The parent folder ID can be also specified.",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Parent folder ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "Folder title",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New folder contents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "files/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Rename a folder",
        "description": "Renames the selected folder with a new title specified in the request.",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "New folder title",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder contents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "files/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the folder information",
        "description": "Returns the detailed information about a folder with the ID specified in the request.",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "files/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a folder",
        "description": "Deletes a folder with the ID specified in the request.",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deleteAfter",
            "in": "body",
            "description": "Specifies whether to delete a folder after the editing session is finished or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "immediately",
            "in": "body",
            "description": "Specifies whether to move a folder to the \"Trash\" folder or delete it immediately",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of file operations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileOperationWraper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/folders/{folderId}": {
      "post": {
        "tags": [
          "files/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a folder structure",
        "description": "Creates a new folder structure specified in the request in a folder with a specific ID.",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Parent folder ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relativePaths",
            "in": "body",
            "description": "Relative paths to create a folder structure",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Main folder contents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/@my/file": {
      "post": {
        "tags": [
          "files/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a file in the \"My documents\" section",
        "description": "Creates a new file in the \"My documents\" section with the title specified in the request.\n\n**Note**: If a file extension is different from DOCX/XLSX/PPTX and refers to one of the known text, spreadsheet or presentation formats, it will be changed to DOCX/XLSX/PPTX accordingly. If the file extension is not specified or is unknown, the DOCX extension will be added to the file title.",
        "parameters": [
          {
            "name": "title",
            "in": "body",
            "description": "File title",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New file information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/{folderId}/file": {
      "post": {
        "tags": [
          "files/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a file",
        "description": "Creates a new file in the specified folder with the title specified in the request.\n\n**Note**: If a file extension is different from DOCX/XLSX/PPTX and refers to one of the known text, spreadsheet or presentation formats, it will be changed to DOCX/XLSX/PPTX accordingly. If the file extension is not specified or is unknown, the DOCX extension will be added to the file title.",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "File title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "body",
            "description": "Template file ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enableExternalExt",
            "in": "body",
            "description": "Specifies whether to allow the creation of external extension files or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New file information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/folder/{folderId}/path": {
      "get": {
        "tags": [
          "files/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the folder path",
        "description": "Returns a path to the folder with the ID specified in the request.",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder path",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FolderWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/file/{fileId}": {
      "get": {
        "tags": [
          "files/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the file information",
        "description": "Returns the detailed information about a file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "body",
            "description": "File version",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "files/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a file",
        "description": "Updates the information of the selected file with the parameters specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "New file title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastVersion",
            "in": "body",
            "description": "Number of the latest file version",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "files/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a file",
        "description": "Deletes a file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deleteAfter",
            "in": "body",
            "description": "Specifies whether to delete a file after the editing session is finished or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "immediately",
            "in": "body",
            "description": "Specifies whether to move a file to the \"Trash\" folder or delete it immediately",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of file operations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileOperationWraper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/file/{fileId}/copyas": {
      "post": {
        "tags": [
          "files/Files"
        ],
        "summary": "Copy a file",
        "description": "Copies (and converts if possible) an existing file to the specified folder.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destFolderId",
            "in": "body",
            "description": "Destination folder ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destTitle",
            "in": "body",
            "description": "Destination file title",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Copied file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileWrapper"
                }
              }
            }
          }
        }
      }
    },
    "/api/2.0/files/file/{fileId}/checkconversion": {
      "put": {
        "tags": [
          "files/Operations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Start file conversion",
        "description": "Starts a conversion operation of a file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConversationResult"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "files/Operations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get conversion status",
        "description": "Checks the conversion status of a file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "body",
            "description": "Specifies if a conversion operation is started or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConversationResult"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/file/{fileId}/presigneduri": {
      "get": {
        "tags": [
          "files/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get file download link",
        "description": "Returns a link to download a file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File download link",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/fileops/move": {
      "get": {
        "tags": [
          "files/Operations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Check files and folders for conflicts",
        "description": "Checks a batch of files and folders for conflicts when moving or copying them to the folder with the ID specified in the request.",
        "parameters": [
          {
            "name": "destFolderId",
            "in": "body",
            "description": "Destination folder ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folderIds",
            "in": "body",
            "description": "List of folder IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileIds",
            "in": "body",
            "description": "List of file IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IDs of files with conflicts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "files/Operations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Move to a folder",
        "description": "Moves all the selected files and folders to the folder with the ID specified in the request.",
        "parameters": [
          {
            "name": "destFolderId",
            "in": "body",
            "description": "Destination folder ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folderIds",
            "in": "body",
            "description": "List of folder IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileIds",
            "in": "body",
            "description": "List of file IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "conflictResolveType",
            "in": "body",
            "description": "Overwriting behavior: skip (0), overwrite (1) or duplicate (2)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Skip",
                "Overwrite",
                "Duplicate"
              ],
              "description": "[0 - Skip, 1 - Overwrite, 2 - Duplicate]"
            }
          },
          {
            "name": "deleteAfter",
            "in": "body",
            "description": "Specifies whether to delete a folder after the editing session is finished or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of file operations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileOperationWraper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/fileops/copy": {
      "put": {
        "tags": [
          "files/Operations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Copy to a folder",
        "description": "Copies all the selected files and folders to the folder with the ID specified in the request.",
        "parameters": [
          {
            "name": "destFolderId",
            "in": "body",
            "description": "Destination folder ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folderIds",
            "in": "body",
            "description": "List of folder IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileIds",
            "in": "body",
            "description": "List of file IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "conflictResolveType",
            "in": "body",
            "description": "Overwriting behavior: skip (0), overwrite (1) or duplicate (2)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Skip",
                "Overwrite",
                "Duplicate"
              ],
              "description": "[0 - Skip, 1 - Overwrite, 2 - Duplicate]"
            }
          },
          {
            "name": "deleteAfter",
            "in": "body",
            "description": "Specifies whether to delete a folder after the editing session is finished or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of file operations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileOperationWraper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/fileops/markasread": {
      "put": {
        "tags": [
          "files/Operations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Mark as read",
        "description": "Marks the files and folders with the IDs specified in the request as read.",
        "parameters": [
          {
            "name": "folderIds",
            "in": "body",
            "description": "List of folder IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileIds",
            "in": "body",
            "description": "List of file IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of file operations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileOperationWraper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/fileops/terminate": {
      "put": {
        "tags": [
          "files/Operations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Finish active operations",
        "description": "Finishes all the active operations.",
        "responses": {
          "200": {
            "description": "List of file operations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileOperationWraper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/fileops": {
      "get": {
        "tags": [
          "files/Operations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get active operations",
        "description": "Returns a list of all the active operations.",
        "responses": {
          "200": {
            "description": "List of file operations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileOperationWraper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/fileops/bulkdownload": {
      "put": {
        "tags": [
          "files/Operations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Bulk download",
        "description": "Starts the download process of files and folders with the IDs specified in the request.",
        "parameters": [
          {
            "name": "fileConvertIds",
            "in": "body",
            "description": "List of file IDs which will be converted",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          {
            "name": "fileIds",
            "in": "body",
            "description": "List of file IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "folderIds",
            "in": "body",
            "description": "List of folder IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of file operations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileOperationWraper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/fileops/delete": {
      "put": {
        "tags": [
          "files/Operations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete files and folders",
        "description": "Deletes the files and folders with the IDs specified in the request.",
        "parameters": [
          {
            "name": "folderIds",
            "in": "body",
            "description": "List of folder IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileIds",
            "in": "body",
            "description": "List of file IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "deleteAfter",
            "in": "body",
            "description": "Specifies whether to delete a file after the editing session is finished or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "immediately",
            "in": "body",
            "description": "Specifies whether to move a file to the \"Trash\" folder or delete it immediately",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of file operations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileOperationWraper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/fileops/emptytrash": {
      "put": {
        "tags": [
          "files/Operations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Empty the \"Trash\" folder",
        "description": "Deletes all the files and folders from the \"Trash\" folder.",
        "responses": {
          "200": {
            "description": "List of file operations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileOperationWraper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/file/{fileId}/history": {
      "get": {
        "tags": [
          "files/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get file versions",
        "description": "Returns the detailed information about all the available file versions with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "files/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Change version history",
        "description": "Changes version history of a file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "body",
            "description": "History version",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "continueVersion",
            "in": "body",
            "description": "Specifies whether to continue the current version and mark it as a revision or create a new one",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/file/{fileId}/share": {
      "get": {
        "tags": [
          "files/Sharing"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the shared file information",
        "description": "Returns the detailed information about the shared file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shared file information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileShareWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "files/Sharing"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Share a file",
        "description": "Sets the sharing settings to a file with the ID specified in the request.\n\n**Note**: Each of the sharing parameters must contain two values: \"ShareTo\" - ID of the user with whom we want to share a file, \"Access\" - access type which we want to give to the user (Read, ReadWrite, etc).",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "share",
            "in": "body",
            "description": "Collection of sharing parameters",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FileShareParams"
              }
            }
          },
          {
            "name": "notify",
            "in": "body",
            "description": "Notifies users about the shared file or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sharingMessage",
            "in": "body",
            "description": "Message to send when notifying about the shared file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "advancedSettings",
            "in": "body",
            "description": "Advanced settings which prohibit printing, downloading, copying the file, and changing sharing settings",
            "schema": {
              "$ref": "#/components/schemas/AceAdvancedSettingsWrapper"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shared file information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileShareWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/folder/{folderId}/share": {
      "get": {
        "tags": [
          "files/Sharing"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the shared folder information",
        "description": "Returns the detailed information about the shared folder with the ID specified in the request.",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shared folder information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileShareWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "files/Sharing"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Share a folder",
        "description": "Sets the sharing settings to a folder with the ID specified in the request.\n\n**Note**: Each of the sharing parameters must contain two values: \"ShareTo\" - ID of the user with whom we want to share a folder, \"Access\" - access type which we want to give to the user (Read, ReadWrite, etc).",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "share",
            "in": "body",
            "description": "Collection of sharing parameters",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FileShareParams"
              }
            }
          },
          {
            "name": "notify",
            "in": "body",
            "description": "Notifies users about the shared folder or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sharingMessage",
            "in": "body",
            "description": "Message to send when notifying about the shared folder",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shared folder information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileShareWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/share": {
      "delete": {
        "tags": [
          "files/Sharing"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove sharing rights",
        "description": "Removes the sharing rights for the group of folders and files with the IDs specified in the request.",
        "parameters": [
          {
            "name": "folderIds",
            "in": "body",
            "description": "List of folder IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileIds",
            "in": "body",
            "description": "List of file IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bool value: true if the operation is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/{fileId}/sharedlink": {
      "put": {
        "tags": [
          "files/Sharing"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the shared link",
        "description": "Returns an external link to the shared file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "share",
            "in": "body",
            "description": "Sharing rights",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "ReadWrite",
                "Read",
                "Restrict",
                "Varies",
                "Review",
                "Comment",
                "FillForms",
                "CustomFilter"
              ],
              "description": "[0 - None, 1 - ReadWrite, 2 - Read, 3 - Restrict, 4 - Varies, 5 - Review, 6 - Comment, 7 - FillForms, 8 - CustomFilter]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shared file link",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/sharedlink/password": {
      "post": {
        "tags": [
          "files/Sharing"
        ],
        "summary": "Set a cookie for a password-protected external link",
        "description": "Sets a cookie after verifying the password for a password-protected external link and returns a link to the shared file.",
        "parameters": [
          {
            "name": "key",
            "in": "body",
            "description": "Link signature",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "passwordHash",
            "in": "body",
            "description": "Password hash",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isFolder",
            "in": "body",
            "description": "Specifies if a link is to the shared folder or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shared file link",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/2.0/files/{fileId}/sharedlink/{linkId}/password": {
      "post": {
        "tags": [
          "files/Sharing"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a token for a password-protected external link",
        "description": "Returns a token after verifying the password or password hash for a password-protected external link.\n\n**Note**: The token is used in the cookies with the 'sharelink[linkId]' name when calling API methods.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "linkId",
            "in": "path",
            "description": "Link ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "password",
            "in": "body",
            "description": "Password",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "passwordHash",
            "in": "body",
            "description": "Password hash",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Token for a password-protected external link",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationTokenData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/{fileId}/sharedlink/template": {
      "get": {
        "tags": [
          "files/Sharing"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the shared link template",
        "description": "Returns a new unsaved link object to the file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isFolder",
            "in": "body",
            "description": "Specifies if a link is to the shared folder or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shared link template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AceWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/{fileId}/properties": {
      "get": {
        "tags": [
          "files/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get file properties",
        "description": "Returns file properties of the specified file.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File properties",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntryProperties"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "files/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Save file properties to a file",
        "description": "Saves file properties to the specified file.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileProperties",
            "in": "body",
            "description": "File properties",
            "schema": {
              "$ref": "#/components/schemas/EntryProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File properties",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntryProperties"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/batch/properties": {
      "put": {
        "tags": [
          "files/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Save file properties to files",
        "description": "Saves file properties to the specified files.",
        "parameters": [
          {
            "name": "filesId",
            "in": "body",
            "description": "IDs of files",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "createSubfolder",
            "in": "body",
            "description": "Creates a subfolder or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileProperties",
            "in": "body",
            "description": "File properties",
            "schema": {
              "$ref": "#/components/schemas/EntryProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of file properties",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntryProperties"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/thirdparty/capabilities": {
      "get": {
        "tags": [
          "files/Third-party integration"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get providers",
        "description": "Returns a list of the available providers.\n\n**Note**: List of provider keys: DropboxV2, Box, WebDav, Yandex, OneDrive, SharePoint, GoogleDrive, kDrive.",
        "responses": {
          "200": {
            "description": "List of provider keys",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/thirdparty": {
      "post": {
        "tags": [
          "files/Third-party integration"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Save a third-party account",
        "description": "Saves the third-party storage service account. For WebDav, Yandex, kDrive and SharePoint, the login and password are used for authentication. For other providers, the authentication is performed using a token received via OAuth 2.0.\n\n**Note**: List of provider keys: DropboxV2, Box, WebDav, Yandex, OneDrive, SharePoint, GoogleDrive, kDrive.",
        "parameters": [
          {
            "name": "url",
            "in": "body",
            "description": "Connection URL for the sharepoint",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "login",
            "in": "body",
            "description": "Login",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "body",
            "description": "Password",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "body",
            "description": "Authentication token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isCorporate",
            "in": "body",
            "description": "Specifies if this is a corporate account or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "customerTitle",
            "in": "body",
            "description": "Customer title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "providerKey",
            "in": "body",
            "description": "Provider key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "providerId",
            "in": "body",
            "description": "Provider ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder contents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "files/Third-party integration"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get third-party services",
        "description": "Returns a list of all the connected third-party services.",
        "responses": {
          "200": {
            "description": "Connected providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ThirdPartyParams"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/thirdparty/common": {
      "get": {
        "tags": [
          "files/Third-party integration"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get common third-party services",
        "description": "Returns a list of the third-party services connected to the \"Common\" section.",
        "responses": {
          "200": {
            "description": "Common third-party folders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/thirdparty/{providerId:[0-9]+}": {
      "delete": {
        "tags": [
          "files/Third-party integration"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove a third-party account",
        "description": "Removes the third-party storage service account with the ID specified in the request.",
        "parameters": [
          {
            "name": "providerId",
            "in": "body",
            "description": "Provider ID. It is a part of the folder ID. Example: folder ID is \"sbox-123\", then provider ID is \"123\".",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted third-party account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/@search/{query}": {
      "get": {
        "tags": [
          "files/Operations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Search for files and folders",
        "description": "Searches for files and folders by the query specified in the request.",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "Query string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Files and folders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileEntryWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/favorites": {
      "post": {
        "tags": [
          "files/Operations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add favorite files and folders",
        "description": "Adds files and folders with the IDs specified in the request to the favorite list.",
        "parameters": [
          {
            "name": "folderIds",
            "in": "body",
            "description": "List of folder IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileIds",
            "in": "body",
            "description": "List of file IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bool value: true if the operation is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "files/Operations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete favorite files and folders",
        "description": "Removes files and folders with the IDs specified in the request from the favorite list.",
        "parameters": [
          {
            "name": "folderIds",
            "in": "body",
            "description": "List of folder IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fileIds",
            "in": "body",
            "description": "List of file IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bool value: true if the operation is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/templates": {
      "post": {
        "tags": [
          "files/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add template files",
        "description": "Adds files with the IDs specified in the request to the template list.",
        "parameters": [
          {
            "name": "fileIds",
            "in": "body",
            "description": "List of file IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bool value: true if the operation is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "files/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete template files",
        "description": "Removes files with the IDs specified in the request from the template list.",
        "parameters": [
          {
            "name": "fileIds",
            "in": "body",
            "description": "List of file IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bool value: true if the operation is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/storeoriginal": {
      "put": {
        "tags": [
          "files/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Store original formats",
        "description": "Stores files in the original formats as well when uploading and converting.",
        "parameters": [
          {
            "name": "set",
            "in": "body",
            "description": "Turns the parameter on or off",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bool value: true if the parameter is enabled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/updateifexist": {
      "put": {
        "tags": [
          "files/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a file version if it exists",
        "description": "Updates a file version if a file with such a name already exists.",
        "parameters": [
          {
            "name": "set",
            "in": "body",
            "description": "Turns the parameter on or off",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bool value: true if the parameter is enabled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/files/displayRecent": {
      "put": {
        "tags": [
          "files/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Display the \"Recent\" folder",
        "description": "Displays the \"Recent\" folder.",
        "parameters": [
          {
            "name": "set",
            "in": "body",
            "description": "Turns the parameter on or off",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bool value: true if the parameter is enabled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/@self": {
      "get": {
        "tags": [
          "people/Profiles"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get my profile",
        "description": "Returns the detailed information about the current user profile.",
        "responses": {
          "200": {
            "description": "Detailed information about my profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeWraperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/": {
      "get": {
        "tags": [
          "people/Profiles"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get profiles",
        "description": "Returns a list of profiles for all the portal users.",
        "responses": {
          "200": {
            "description": "List of profiles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeWraperFull"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "people/Profiles"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a user",
        "description": "Adds a new portal user with the first name, last name, email address, and several optional parameters specified in the request.",
        "parameters": [
          {
            "name": "isVisitor",
            "in": "body",
            "description": "Specifies if this is a guest (true) or user (false)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "email",
            "in": "body",
            "description": "User email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstname",
            "in": "body",
            "description": "User first name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastname",
            "in": "body",
            "description": "User last name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "department",
            "in": "body",
            "description": "User department",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "User title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "body",
            "description": "User location",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sex",
            "in": "body",
            "description": "User sex (male or female)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "birthday",
            "in": "body",
            "description": "User birthday",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "worksfrom",
            "in": "body",
            "description": "User registration date. If it is not specified, then the current date will be set",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "body",
            "description": "User comment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contacts",
            "in": "body",
            "description": "Contact list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Contact"
              }
            }
          },
          {
            "name": "files",
            "in": "body",
            "description": "Avatar photo URL",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "body",
            "description": "User password",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "passwordHash",
            "in": "body",
            "description": "Password hash",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lead",
            "in": "body",
            "description": "User lead",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly added user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeWraperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/status/{status}": {
      "get": {
        "tags": [
          "people/User status"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get profiles by status",
        "description": "Returns a list of profiles filtered by user status.",
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "description": "User status (\"Active\", \"Terminated\", \"LeaveOfAbsence\", \"All\", or \"Default\")",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Active",
                "Terminated",
                "LeaveOfAbsence",
                "Default",
                "All"
              ],
              "description": "[1 - Active, 2 - Terminated, 4 - LeaveOfAbsence, 5 - Default, 7 - All]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of profiles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeWraperFull"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "people/User status"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Change a user status",
        "description": "Changes a status for the users with the IDs specified in the request.",
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "description": "New user status (\"Active\", \"Terminated\", \"LeaveOfAbsence\", \"All\", or \"Default\"",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Active",
                "Terminated",
                "LeaveOfAbsence",
                "Default",
                "All"
              ],
              "description": "[1 - Active, 2 - Terminated, 4 - LeaveOfAbsence, 5 - Default, 7 - All]"
            }
          },
          {
            "name": "userIds",
            "in": "body",
            "description": "List of user IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeWraperFull"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/{username}": {
      "get": {
        "tags": [
          "people/Profiles"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a profile by user name",
        "description": "Returns the detailed information about a profile of the user with the name specified in the request.",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "User name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeWraperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/email": {
      "get": {
        "tags": [
          "people/Profiles"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a profile by user email",
        "description": "Returns the detailed information about a profile of the user with the email specified in the request.",
        "parameters": [
          {
            "name": "email",
            "in": "body",
            "description": "User email",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeWraperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/@search/{query}": {
      "get": {
        "tags": [
          "people/Search"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Search user profiles",
        "description": "Returns a list of profiles for all the portal users matching the search query.",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "Query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user profiles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeWraperFull"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/search": {
      "get": {
        "tags": [
          "people/Search"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Search users",
        "description": "Returns a list of users matching the search query.",
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "description": "Search text",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeWraperFull"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/status/{status}/search": {
      "get": {
        "tags": [
          "people/Search"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Search users by status filter",
        "description": "Returns a list of users matching the status filter and search query.",
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "description": "User status (\"Active\", \"Terminated\", \"LeaveOfAbsence\", \"All\", or \"Default\")",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Active",
                "Terminated",
                "LeaveOfAbsence",
                "Default",
                "All"
              ],
              "description": "[1 - Active, 2 - Terminated, 4 - LeaveOfAbsence, 5 - Default, 7 - All]"
            }
          },
          {
            "name": "query",
            "in": "body",
            "description": "Search query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeWraperFull"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/import/save": {
      "post": {
        "tags": [
          "people/Profiles"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Import users",
        "description": "Imports the new portal users with the first name, last name, and email address.",
        "parameters": [
          {
            "name": "userList",
            "in": "body",
            "description": "List of users",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "importUsersAsCollaborators",
            "in": "body",
            "description": "Specifies whether to import users as guests (true) or not (false)",
            "schema": {
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/api/2.0/people/import/status": {
      "get": {
        "tags": [
          "people/User status"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a user status",
        "description": "Returns a status of the current user.",
        "responses": {
          "200": {
            "description": "Current user information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/filter": {
      "get": {
        "tags": [
          "people/Search"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Search users and their information by extended filter",
        "description": "Returns a list of users with full information about them matching the parameters specified in the request.",
        "parameters": [
          {
            "name": "employeeStatus",
            "in": "body",
            "description": "User status (\"Active\", \"Terminated\", \"LeaveOfAbsence\", \"All\", or \"Default\")",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "groupId",
            "in": "body",
            "description": "Group ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "activationStatus",
            "in": "body",
            "description": "Activation status (\"NotActivated\", \"Activated\", \"Pending\", or \"AutoGenerated\")",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "employeeType",
            "in": "body",
            "description": "User type (\"All\", \"User\", or \"Visitor\")",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "isAdministrator",
            "in": "body",
            "description": "Specifies if the user is an administrator or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users with their information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeWraperFull"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/simple/filter": {
      "get": {
        "tags": [
          "people/Search"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Search users by extended filter",
        "description": "Returns a list of users matching the parameters specified in the request.",
        "parameters": [
          {
            "name": "employeeStatus",
            "in": "body",
            "description": "User status (\"Active\", \"Terminated\", \"LeaveOfAbsence\", \"All\", or \"Default\")",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "groupId",
            "in": "body",
            "description": "Group ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "activationStatus",
            "in": "body",
            "description": "Activation status (\"NotActivated\", \"Activated\", \"Pending\", or \"AutoGenerated\")",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "employeeType",
            "in": "body",
            "description": "User type (\"All\", \"User\", or \"Visitor\")",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "isAdministrator",
            "in": "body",
            "description": "Specifies if the user is an administrator or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeWraper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/{userid}": {
      "put": {
        "tags": [
          "people/Profiles"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a user",
        "description": "Updates the data for the selected portal user with the first name, last name, email address, and/or optional parameters specified in the request.",
        "parameters": [
          {
            "name": "isVisitor",
            "in": "body",
            "description": "Specifies if this is a guest (true) or user (false)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstname",
            "in": "body",
            "description": "New user first name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastname",
            "in": "body",
            "description": "New user last name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "body",
            "description": "New user comment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "department",
            "in": "body",
            "description": "New user department",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "New user title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "body",
            "description": "New user location",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sex",
            "in": "body",
            "description": "New user sex (male or female)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "birthday",
            "in": "body",
            "description": "New user birthday",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "worksfrom",
            "in": "body",
            "description": "New user registration date. If it is not specified, then the current date will be set",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contacts",
            "in": "body",
            "description": "New contact list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Contact"
              }
            }
          },
          {
            "name": "files",
            "in": "body",
            "description": "New avatar photo URL",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "disable",
            "in": "body",
            "description": "Specifies whether to disable a user on the portal or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "lead",
            "in": "body",
            "description": "User lead",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeWraperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "people/Profiles"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a user",
        "description": "Deletes a user with the ID specified in the request from the portal.",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeWraperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/{userid}/contacts": {
      "put": {
        "tags": [
          "people/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update user contacts",
        "description": "Updates the contact information of the user with the ID specified in the request merging the new data into the current portal data.",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contacts",
            "in": "body",
            "description": "List of new contacts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Contact"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated user profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeWraperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "people/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set user contacts",
        "description": "Sets the contacts of the user with the ID specified in the request replacing the current portal data with the new data.",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contacts",
            "in": "body",
            "description": "List of new contacts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Contact"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated user profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeWraperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "people/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete user contacts",
        "description": "Deletes the contacts of the user with the ID specified in the request from the portal.",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contacts",
            "in": "body",
            "description": "List of contacts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Contact"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated user profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeWraperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/{userid}/photo": {
      "get": {
        "tags": [
          "people/Photos"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a user photo",
        "description": "Returns a photo of the user with the ID specified in the request.",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User photo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThumbnailsDataWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "people/Photos"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a user photo",
        "description": "Updates a photo of the user with the ID specified in the request.",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "files",
            "in": "body",
            "description": "New avatar photo URL",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated user photo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThumbnailsDataWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "people/Photos"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a user photo",
        "description": "Deletes a photo of the user with the ID specified in the request.",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted user photo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThumbnailsDataWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/{userid}/photo/thumbnails": {
      "post": {
        "tags": [
          "people/Photos"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a photo thumbnail",
        "description": "Creates a photo thumbnail by coordinates of the original image specified in the request.",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tmpFile",
            "in": "body",
            "description": "Path to the temporary file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x",
            "in": "body",
            "description": "Horizontal coordinate",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "y",
            "in": "body",
            "description": "Vertical coordinate",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "width",
            "in": "body",
            "description": "Thumbnail width",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "height",
            "in": "body",
            "description": "Thumbnail height",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thumbnail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThumbnailsDataWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/{userid}/email": {
      "put": {
        "tags": [
          "people/Email"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Change a user email",
        "description": "Sets a new email to the user with the ID specified in the request.",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "email",
            "in": "body",
            "description": "New email",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeWraperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/{userid}/password": {
      "put": {
        "tags": [
          "people/Password"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Change a user password",
        "description": "Sets a new password to the user with the ID specified in the request.",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "password",
            "in": "body",
            "description": "New password",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeWraperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/type/{type}": {
      "put": {
        "tags": [
          "people/User type"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Change a user type",
        "description": "Changes a type (user or visitor) for the users with the IDs specified in the request.",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "New user type (\"All\", \"User\", or \"Visitor\")",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "All",
                "User",
                "Visitor"
              ],
              "description": "[0 - All, 1 - User, 2 - Visitor]"
            }
          },
          {
            "name": "userIds",
            "in": "body",
            "description": "List of user IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeWraperFull"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/invite": {
      "put": {
        "tags": [
          "people/Profiles"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Resend an activation email",
        "description": "Resends emails to the users who have not activated their emails.",
        "parameters": [
          {
            "name": "userIds",
            "in": "body",
            "description": "List of user IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeWraperFull"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/delete": {
      "put": {
        "tags": [
          "people/Profiles"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete users",
        "description": "Deletes a list of the users with the IDs specified in the request.",
        "parameters": [
          {
            "name": "userIds",
            "in": "body",
            "description": "List of user IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeWraperFull"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/self/delete": {
      "put": {
        "tags": [
          "people/Profiles"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Send the deletion instructions",
        "description": "Sends instructions for deleting a user profile.",
        "responses": {
          "200": {
            "description": "Information message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/birthdays/reminder": {
      "post": {
        "tags": [
          "people/Birthday"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Birthday subscription",
        "description": "Subscribes to or unsubscribes from the birthday of the user with the ID specified in the request.",
        "parameters": [
          {
            "name": "userid",
            "in": "body",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "onRemind",
            "in": "body",
            "description": "Defines if the user will be notified about another user's birthday or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bool value: true means that the user will get a notification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/reassign/progress": {
      "get": {
        "tags": [
          "people/User data"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the reassignment progress",
        "description": "Returns the progress of the started data reassignment for the user with the ID specified in the request.",
        "parameters": [
          {
            "name": "userId",
            "in": "body",
            "description": "User ID whose data is reassigned",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reassignment progress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReassignProgressItem"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/reassign/terminate": {
      "put": {
        "tags": [
          "people/User data"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Terminate the data reassignment",
        "description": "Terminates the data reassignment for the user with the ID specified in the request.",
        "parameters": [
          {
            "name": "userId",
            "in": "body",
            "description": "User ID whose data is reassigned",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ]
      }
    },
    "/api/2.0/people/reassign/start": {
      "post": {
        "tags": [
          "people/User data"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Start the data reassignment",
        "description": "Starts the data reassignment for the user with the ID specified in the request.",
        "parameters": [
          {
            "name": "fromUserId",
            "in": "body",
            "description": "User ID whose data will be reassigned to another user",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "toUserId",
            "in": "body",
            "description": "User ID to whom all the data will be reassigned",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "deleteProfile",
            "in": "body",
            "description": "Specifies whether to delete a profile when the data reassignment will be finished or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reassignment progress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReassignProgressItem"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/remove/progress": {
      "get": {
        "tags": [
          "people/User data"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the deletion progress",
        "description": "Returns the progress of the started data deletion for the user with the ID specified in the request.",
        "parameters": [
          {
            "name": "userId",
            "in": "body",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion progress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveProgressItem"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/people/remove/terminate": {
      "put": {
        "tags": [
          "people/User data"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Terminate the data deletion",
        "description": "Terminates the data deletion for the user with the ID specified in the request.",
        "parameters": [
          {
            "name": "userId",
            "in": "body",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ]
      }
    },
    "/api/2.0/people/remove/start": {
      "post": {
        "tags": [
          "people/User data"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Start the data deletion",
        "description": "Starts the data deletion for the user with the ID specified in the request.",
        "parameters": [
          {
            "name": "userId",
            "in": "body",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion progress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveProgressItem"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/group/": {
      "get": {
        "tags": [
          "group"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get groups",
        "description": "Returns the general information about all the groups, such as group ID and group manager.\n\n**Note**: This method returns partial group information.",
        "responses": {
          "200": {
            "description": "List of groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupWrapperSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "group"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a new group",
        "description": "Adds a new group with the group manager, name, and members specified in the request.",
        "parameters": [
          {
            "name": "groupManager",
            "in": "body",
            "description": "Group manager",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "groupName",
            "in": "body",
            "description": "Group name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "members",
            "in": "body",
            "description": "List of group members",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/group/search": {
      "get": {
        "tags": [
          "group"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get groups by a group name",
        "description": "Returns a list of all the groups by the group name specified in the request.",
        "parameters": [
          {
            "name": "groupName",
            "in": "body",
            "description": "Group name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupWrapperSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/group/{groupid}": {
      "get": {
        "tags": [
          "group"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a group",
        "description": "Returns the detailed information about the selected group: group name, category, description, manager, members, and parent group if it exists.\n\n**Note**: This method returns full group information.",
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "description": "Group ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "group"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a group",
        "description": "Updates the existing group changing the group manager, name, and/or members.",
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "description": "Group ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "groupManager",
            "in": "body",
            "description": "New group manager",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "groupName",
            "in": "body",
            "description": "New group name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "members",
            "in": "body",
            "description": "New list of group members",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "group"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a group",
        "description": "Deletes a group with the ID specified in the request from the list of groups on the portal.",
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "description": "Group ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/group/user/{userid}": {
      "get": {
        "tags": [
          "group"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get user groups",
        "description": "Returns a list of groups for the user with the ID specified in the request.",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupWrapperSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/group/{groupid}/members/{newgroupid}": {
      "put": {
        "tags": [
          "group"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Move group members",
        "description": "Moves all the members from the selected group to another one specified in the request.",
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "description": "Group ID to move from",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "newgroupid",
            "in": "path",
            "description": "Group ID to move to",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New group information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/group/{groupid}/members": {
      "post": {
        "tags": [
          "group"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Replace group members",
        "description": "Replaces the group members with those specified in the request.",
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "description": "Group ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "members",
            "in": "body",
            "description": "List of new members",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "group"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add group members",
        "description": "Adds new group members to the group with the ID specified in the request.",
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "description": "Group ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "members",
            "in": "body",
            "description": "List of new members",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "group"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove group members",
        "description": "Removes the group members specified in the request from the selected group.",
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "description": "Group ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "members",
            "in": "body",
            "description": "List of group members",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/group/{groupid}/manager": {
      "put": {
        "tags": [
          "group"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set a group manager",
        "description": "Sets a user with the ID specified in the request as a group manager.",
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "description": "Group ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userid",
            "in": "body",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/feed//read": {
      "put": {
        "tags": [
          "feed"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Read feeds",
        "description": "Opens feeds for reading."
      }
    },
    "/api/2.0/feed//filter": {
      "get": {
        "tags": [
          "feed"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get feeds",
        "description": "Returns a list of feeds that are filtered by the parameters specified in the request.",
        "parameters": [
          {
            "name": "product",
            "in": "body",
            "description": "Product which feeds you want to read",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "body",
            "description": "Time from which the feeds should be displayed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "body",
            "description": "Time until which the feeds should be displayed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "author",
            "in": "body",
            "description": "Author whose feeds you want to read",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "onlyNew",
            "in": "body",
            "description": "Displays only fresh feeds",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "timeReaded",
            "in": "body",
            "description": "Time when the feeds were read",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of filtered feeds",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/feed//newfeedscount": {
      "get": {
        "tags": [
          "feed"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Count fresh feeds",
        "description": "Returns a number of fresh feeds.",
        "responses": {
          "200": {
            "description": "Number of fresh feeds",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/conversations/crm/link": {
      "put": {
        "tags": [
          "mail/Conversations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Link a conversation to CRM",
        "description": "Links a conversation to the CRM entities. All the new mails will be added to the CRM history.",
        "parameters": [
          {
            "name": "id_message",
            "in": "body",
            "description": "ID of any message from the conversation",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "crm_contact_ids",
            "in": "body",
            "description": "List of CRM entities in the following format: {entity_id: 0, entity_type: 0}.\n            Entity types: 1 - Contact, 2 - Case, 3 - Opportunity",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CrmContactData"
              }
            }
          }
        ]
      }
    },
    "/api/2.0/mail/conversations/crm/mark": {
      "put": {
        "tags": [
          "mail/Conversations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Mark a conversation as CRM linked",
        "description": "Marks a conversation as CRM linked. All the new mails will be added to the CRM history.",
        "parameters": [
          {
            "name": "id_message",
            "in": "body",
            "description": "ID of any messages from the conversation",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "crm_contact_ids",
            "in": "body",
            "description": "List of CRM entities in the following format: {entity_id: 0, entity_type: 0}.\n            Entity types: 1 - Contact, 2 - Case, 3 - Opportunity",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CrmContactData"
              }
            }
          }
        ]
      }
    },
    "/api/2.0/mail/conversations/crm/unmark": {
      "put": {
        "tags": [
          "mail/Conversations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Unmark a conversation as CRM linked",
        "description": "Unmarks a conversation as CRM linked.",
        "parameters": [
          {
            "name": "id_message",
            "in": "body",
            "description": "ID of any messages from the conversation",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "crm_contact_ids",
            "in": "body",
            "description": "List of CRM entities in the following format: {entity_id: 0, entity_type: 0}.\n            Entity types: 1 - Contact, 2 - Case, 3 - Opportunity",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CrmContactData"
              }
            }
          }
        ]
      }
    },
    "/api/2.0/mail/conversations/link/crm/status": {
      "get": {
        "tags": [
          "mail/Conversations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Check a conversation CRM status",
        "description": "Checks if a conversation is CRM linked or not by message ID.",
        "parameters": [
          {
            "name": "message_id",
            "in": "body",
            "description": "ID of any messages from the conversation",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation CRM status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailCrmStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/folders": {
      "get": {
        "tags": [
          "mail/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the default folders",
        "description": "Returns a list of default folders.",
        "responses": {
          "200": {
            "description": "List of default folders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailFolderData"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/folders/{folderid:[0-9]+}/messages": {
      "delete": {
        "tags": [
          "mail/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove folder messages",
        "description": "Removes all the messages from the trash or spam folder.",
        "parameters": [
          {
            "name": "folderid",
            "in": "body",
            "description": "Folder ID: 4 - Trash, 5 - Spam",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/userfolders": {
      "get": {
        "tags": [
          "mail/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the user folders",
        "description": "Returns a list of user folders with the IDs specified in the request.",
        "parameters": [
          {
            "name": "ids",
            "in": "body",
            "description": "List of folder IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint32"
              }
            }
          },
          {
            "name": "parentId",
            "in": "body",
            "description": "Parent folder ID (root level is equal to 0)",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of folders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailUserFolderData"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "mail/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a folder",
        "description": "Creates a user folder with the name specified in the request.",
        "parameters": [
          {
            "name": "name",
            "in": "body",
            "description": "Folder name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentId",
            "in": "body",
            "description": "Parent folder ID (root level is equal to 0)",
            "schema": {
              "type": "integer",
              "format": "uint32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailUserFolderData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/userfolders/{id}": {
      "put": {
        "tags": [
          "mail/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a folder",
        "description": "Updates a user folder with the parameters specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID",
            "schema": {
              "type": "integer",
              "format": "uint32"
            }
          },
          {
            "name": "name",
            "in": "body",
            "description": "New folder name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentId",
            "in": "body",
            "description": "New parent folder ID (root level is equal to 0)",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailUserFolderData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "mail/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a folder",
        "description": "Deletes a user folder with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID",
            "schema": {
              "type": "integer",
              "format": "uint32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailOperationStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/userfolders/bymail": {
      "get": {
        "tags": [
          "mail/Folders"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a folder by mail ID",
        "description": "Returns a user folder by the mail ID specified in the request.",
        "parameters": [
          {
            "name": "mailId",
            "in": "body",
            "description": "Mail ID",
            "schema": {
              "type": "integer",
              "format": "uint32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailUserFolderData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/display_images/addresses": {
      "get": {
        "tags": [
          "mail/Images"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get trusted image addresses",
        "description": "Returns a list of all the trusted addresses for image displaying.",
        "responses": {
          "200": {
            "description": "List of addresses. Email adresses are represented as strings in the name@domain format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/display_images/address": {
      "post": {
        "tags": [
          "mail/Images"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add the trusted image address",
        "description": "Adds an image address specified in the request to the list of trusted image addresses.",
        "parameters": [
          {
            "name": "address",
            "in": "body",
            "description": "Image address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Added image address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "mail/Images"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove the trusted image address",
        "description": "Removes an image address specified in the request from the list of trusted image addresses.",
        "parameters": [
          {
            "name": "address",
            "in": "body",
            "description": "Image address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Removed image address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/messages": {
      "get": {
        "tags": [
          "mail/Messages"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get filtered messages",
        "description": "Returns the messages with the parameters specified in the request.",
        "parameters": [
          {
            "name": "folder",
            "in": "body",
            "description": "Folder ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "unread",
            "in": "body",
            "description": "Message status: unread (true), read (false), or all (null) messages",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "attachments",
            "in": "body",
            "description": "Defines if a message has attachments or not: with attachments (true), without attachments (false), or all (null) messages",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "period_from",
            "in": "body",
            "description": "Start search period date",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "period_to",
            "in": "body",
            "description": "End search period date",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "important",
            "in": "body",
            "description": "Specifies if only important messages will be displayed or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "from_address",
            "in": "body",
            "description": "Mail address from which a letter was received",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to_address",
            "in": "body",
            "description": "Mail address to which a letter was sent",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mailbox_id",
            "in": "body",
            "description": "Recipient mailbox ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "IDs of tags linked to the target messages",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "search",
            "in": "body",
            "description": "Text to search in the message bodies and subjects",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "body",
            "description": "Page number",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "with_calendar",
            "in": "body",
            "description": "Specifies if the messages have a calendar or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "page_size",
            "in": "body",
            "description": "Number of messages on the page",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "user_folder_id",
            "in": "body",
            "description": "User folder ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "sortorder",
            "in": "body",
            "description": "Sort order by date: \"ascending\" or \"descending\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of filtered messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailMessageData"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/messages/{id:[0-9]+}": {
      "get": {
        "tags": [
          "mail/Messages"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a message",
        "description": "Returns the detailed information about a message with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Message ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadImages",
            "in": "body",
            "description": "Specifies whether to display images sent in a message or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "needSanitize",
            "in": "body",
            "description": "Specifies if HTML needs to be prepared for the FCK editor or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "markRead",
            "in": "body",
            "description": "Specifies if a message will be marked as read or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailMessageData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/messages/reassign": {
      "put": {
        "tags": [
          "mail/Messages"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Reassign drafts/templates",
        "description": "Reassigns drafts/templates to the selected email.",
        "parameters": [
          {
            "name": "folder",
            "in": "body",
            "description": "Folder ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "email",
            "in": "body",
            "description": "Email to which messages will be reassigned",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/2.0/mail/messages/{id:[0-9]+}/{direction:(next|prev)}": {
      "get": {
        "tags": [
          "mail/Messages"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the previous or next message ID",
        "description": "Returns the previous or next message ID filtered with the parameters specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Head message ID of the current conversation",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "direction",
            "in": "body",
            "description": "Defines if the previous or next message is needed: \"prev\" for previous, \"next\" for next",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder",
            "in": "body",
            "description": "Folder type: 1 - inbox, 2 - sent, 5 - spam",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "unread",
            "in": "body",
            "description": "Message status: unread (true), read (false), or all (null) messages",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "attachments",
            "in": "body",
            "description": "Defines if a message has attachments or not: with attachments (true), without attachments (false), or all (null) messages",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "period_from",
            "in": "body",
            "description": "Start search period date",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "period_to",
            "in": "body",
            "description": "End search period date",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "important",
            "in": "body",
            "description": "Specifies if only important messages will be displayed or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "from_address",
            "in": "body",
            "description": "Mail address from which a letter was received",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to_address",
            "in": "body",
            "description": "Mail address to which a letter was sent",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mailbox_id",
            "in": "body",
            "description": "Recipient mailbox ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "IDs of tags linked to the target message",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "search",
            "in": "body",
            "description": "Text to search in the message bodies and subjects",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "in": "body",
            "description": "Number of messages on the page",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "sortorder",
            "in": "body",
            "description": "Sort order by date: \"ascending\" or \"descending\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "with_calendar",
            "in": "body",
            "description": "Specifies if the messages have a calendar or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "user_folder_id",
            "in": "body",
            "description": "User folder ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Previous or next message ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/messages/{messageid:[0-9]+}/attachments/{attachmentid:[0-9]+}": {
      "delete": {
        "tags": [
          "mail/Attachments"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete an attachment",
        "description": "Deletes the selected attachment from the message with the ID specified in the request.",
        "parameters": [
          {
            "name": "messageid",
            "in": "body",
            "description": "Message ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attachmentid",
            "in": "body",
            "description": "Attachment ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The message ID which attachment was removed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/messages/mark": {
      "put": {
        "tags": [
          "mail/Messages"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set a message status",
        "description": "Sets a status to the messages with the IDs specified in the request.",
        "parameters": [
          {
            "name": "ids",
            "in": "body",
            "description": "List of message IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "Message status: \"read\", \"unread\", \"important\", or \"normal\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of messages with changed status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/messages/restore": {
      "put": {
        "tags": [
          "mail/Messages"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Restore messages",
        "description": "Restores the messages with the IDs specified in the request to their original folders.",
        "parameters": [
          {
            "name": "ids",
            "in": "body",
            "description": "List of message IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of restored message IDs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/messages/move": {
      "put": {
        "tags": [
          "mail/Messages"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Move messages to the folder",
        "description": "Moves the messages to a folder with the ID specified in the request.",
        "parameters": [
          {
            "name": "ids",
            "in": "body",
            "description": "List of message IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "folder",
            "in": "body",
            "description": "Folder type: 1 - inbox, 2 - sent, 3 - drafts, 4 - trash, 5 - spam",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userFolderId",
            "in": "body",
            "description": "User folder ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of moved message IDs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/messages/send": {
      "put": {
        "tags": [
          "mail/Messages"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Send a message",
        "description": "Sends a message with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Message ID which will be sent or 0",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "body",
            "description": "Mail address from which a letter will be sent. Format: Name &lt;name@domain&gt;",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "body",
            "description": "List of mail addresses to which a letter will be sent. Format: Name &lt;name@domain&gt;",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "cc",
            "in": "body",
            "description": "List of Cc (carbon copy) mail addresses. Format: Name &lt;name@domain&gt;",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "bcc",
            "in": "body",
            "description": "List of Bcc (blind carbon copy) mail addresses. Format: Name &lt;name@domain&gt;",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "mimeReplyToId",
            "in": "body",
            "description": "Message ID to which this message is replying to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "importance",
            "in": "body",
            "description": "Specifies if this message is important or not: true - important, false - not important",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "subject",
            "in": "body",
            "description": "Message subject",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "List of tag IDs added to the message",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "body",
            "in": "body",
            "description": "Message body as the HTML string",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachments",
            "in": "body",
            "description": "List of message attachments",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MailAttachmentData"
              }
            }
          },
          {
            "name": "fileLinksShareMode",
            "in": "body",
            "description": "Sharing mode for the links of the attached files",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "ReadWrite",
                "Read",
                "Restrict",
                "Varies",
                "Review",
                "Comment",
                "FillForms",
                "CustomFilter"
              ],
              "description": "[0 - None, 1 - ReadWrite, 2 - Read, 3 - Restrict, 4 - Varies, 5 - Review, 6 - Comment, 7 - FillForms, 8 - CustomFilter]"
            }
          },
          {
            "name": "calendarIcs",
            "in": "body",
            "description": "Calendar event in the iCal format for sending",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isAutoreply",
            "in": "body",
            "description": "Specifies if this message is autoreply or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "requestReceipt",
            "in": "body",
            "description": "Specifies whether to add a request with the Return-Receipt-To header or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "requestRead",
            "in": "body",
            "description": "Specifies whether to add a request with the Disposition-Notification-To header or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/messages/simpleSend": {
      "put": {
        "tags": [
          "mail/Messages"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Send a message quickly",
        "description": "Sends a message quickly specifying the sender, recipients, message subject, and message body.",
        "parameters": [
          {
            "name": "from",
            "in": "body",
            "description": "Mail address from which a letter will be sent. Format: Name &lt;name@domain&gt;",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "body",
            "description": "List of mail addresses to which a letter will be sent. Format: Name &lt;name@domain&gt;",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "subject",
            "in": "body",
            "description": "Message subject",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "body",
            "description": "Message body as the HTML string",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isReceipt",
            "in": "body",
            "description": "Specifies if the receipt is returned to the sender or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean value: true if a message was sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/drafts/save": {
      "put": {
        "tags": [
          "mail/Messages"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Save a draft message",
        "description": "Saves a message with the ID specified in the request as a draft.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Message ID which will be saved or 0",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "body",
            "description": "Mail address from which a letter will be sent. Format: Name &lt;name@domain&gt;",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "body",
            "description": "List of mail addresses to which a letter will be sent. Format: Name &lt;name@domain&gt;",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "cc",
            "in": "body",
            "description": "List of Cc (carbon copy) mail addresses. Format: Name &lt;name@domain&gt;",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "bcc",
            "in": "body",
            "description": "List of Bcc (blind carbon copy) mail addresses. Format: Name &lt;name@domain&gt;",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "mimeReplyToId",
            "in": "body",
            "description": "Message ID to which this message is replying to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "importance",
            "in": "body",
            "description": "Specifies if this message is important or not: true - important, false - not important",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "subject",
            "in": "body",
            "description": "Message subject",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "List of tag IDs added to the message",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "body",
            "in": "body",
            "description": "Message body as the HTML string",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachments",
            "in": "body",
            "description": "List of message attachments",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MailAttachmentData"
              }
            }
          },
          {
            "name": "calendarIcs",
            "in": "body",
            "description": "Calendar event in the iCal format for sending",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Saved message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailMessageData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/templates/save": {
      "put": {
        "tags": [
          "mail/Messages"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Save a template message",
        "description": "Saves a template message with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Template ID which will be saved",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "body",
            "description": "Mail address from which a letter will be sent. Format: Name &lt;name@domain&gt;",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "body",
            "description": "List of mail addresses to which a letter will be sent. Format: Name &lt;name@domain&gt;",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "cc",
            "in": "body",
            "description": "List of Cc (carbon copy) mail addresses. Format: Name &lt;name@domain&gt;",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "bcc",
            "in": "body",
            "description": "List of Bcc (blind carbon copy) mail addresses. Format: Name &lt;name@domain&gt;",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "mimeReplyToId",
            "in": "body",
            "description": "Message ID to which this message is replying to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "importance",
            "in": "body",
            "description": "Specifies if this message is important or not: true - important, false - not important",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "subject",
            "in": "body",
            "description": "Message subject",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "List of tag IDs added to the message",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "body",
            "in": "body",
            "description": "Message body as the HTML string",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachments",
            "in": "body",
            "description": "List of message attachments",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MailAttachmentData"
              }
            }
          },
          {
            "name": "calendarIcs",
            "in": "body",
            "description": "Calendar event in the iCal format for sending",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Saved template message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailMessageData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/messages/remove": {
      "put": {
        "tags": [
          "mail/Messages"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove messages",
        "description": "Removes messages with the IDs specified in the request.",
        "parameters": [
          {
            "name": "ids",
            "in": "body",
            "description": "List of message IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of removed message IDs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/messages/template": {
      "get": {
        "tags": [
          "mail/Messages"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a message template",
        "description": "Returns a message template - empty message in the JSON format.",
        "responses": {
          "200": {
            "description": "Empty message in the JSON format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailMessageData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/messages/{id:[0-9]+}/document": {
      "post": {
        "tags": [
          "mail/Attachments"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Attach a document",
        "description": "Attaches a document to the message with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Message ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileId",
            "in": "body",
            "description": "Document ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "body",
            "description": "Document version",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "needSaveToTemp",
            "in": "body",
            "description": "Specifies if this document needs to be saved to a template message or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attached document",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailAttachmentData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/messages/crm/export": {
      "put": {
        "tags": [
          "mail/Messages"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Export a message to CRM",
        "description": "Exports a mail to the CRM relation history for some entities.",
        "parameters": [
          {
            "name": "id_message",
            "in": "body",
            "description": "ID of any message from the chain",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "crm_contact_ids",
            "in": "body",
            "description": "List of CRM contact entity IDs in the following format: {entity_id: 0, entity_type: 0}.\n            Entity types: 1 - Contact, 2 - Case, 3 - Opportunity",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CrmContactData"
              }
            }
          }
        ]
      }
    },
    "/api/2.0/mail/tags": {
      "get": {
        "tags": [
          "mail/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get tags",
        "description": "Returns a list of all the tags used in the Mail module.",
        "responses": {
          "200": {
            "description": "List of tags represented as JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailTagData"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "mail/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a tag",
        "description": "Creates a new tag with the parameters specified in the request.",
        "parameters": [
          {
            "name": "name",
            "in": "body",
            "description": "Tag name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "style",
            "in": "body",
            "description": "Style identifier: a postfix which represents the CSS style (tag color)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addresses",
            "in": "body",
            "description": "List of addresses associated with a tag",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mail tag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailTagData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/tags/{id}": {
      "put": {
        "tags": [
          "mail/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a tag",
        "description": "Updates a tag with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tag ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "body",
            "description": "New tag name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "style",
            "in": "body",
            "description": "New style identifier: a postfix which represents the CSS style (tag color)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addresses",
            "in": "body",
            "description": "New list of addresses associated with a tag",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated mail tag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailTagData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "mail/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a tag",
        "description": "Deletes a tag with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tag ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted mail tag",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/tags/{id}/set": {
      "put": {
        "tags": [
          "mail/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set a tag to the messages",
        "description": "Adds a tag with the ID specified in the request to the messages.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tag ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "messages",
            "in": "body",
            "description": "List of message IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Added mail tag ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/tags/{id}/unset": {
      "put": {
        "tags": [
          "mail/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove a tag from the messages",
        "description": "Removes a tag with the ID specified in the request from the messages.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tag ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "messages",
            "in": "body",
            "description": "List of message IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Removed mail tag ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/filters": {
      "get": {
        "tags": [
          "mail/Filters"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get filters",
        "description": "Returns a list of filters used in all the mails.",
        "responses": {
          "200": {
            "description": "List of filters which is represented as JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailSieveFilterData"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "mail/Filters"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a filter",
        "description": "Creates a new filter with the parameters specified in the request.",
        "parameters": [
          {
            "name": "filter",
            "in": "body",
            "description": "Filter parameters: ID, name, position, enabled, conditions, actions, options",
            "schema": {
              "$ref": "#/components/schemas/MailSieveFilterData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailSieveFilterData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "mail/Filters"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a filter",
        "description": "Updates the selected filter with the parameters specified in the request.",
        "parameters": [
          {
            "name": "filter",
            "in": "body",
            "description": "New filter parameters: ID, name, position, enabled, conditions, actions, options",
            "schema": {
              "$ref": "#/components/schemas/MailSieveFilterData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailSieveFilterData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/filters/{id}": {
      "delete": {
        "tags": [
          "mail/Filters"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a filter",
        "description": "Deletes a filter with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Filter ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Filter ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/filters/check": {
      "post": {
        "tags": [
          "mail/Filters"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Check filter results",
        "description": "Checks the results of a filter specified in the request.",
        "parameters": [
          {
            "name": "filter",
            "in": "body",
            "description": "Filter parameters: ID, name, position, enabled, conditions, actions, options",
            "schema": {
              "$ref": "#/components/schemas/MailSieveFilterData"
            }
          },
          {
            "name": "page",
            "in": "body",
            "description": "Page number",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "pageSize",
            "in": "body",
            "description": "Number of messages on the page",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailMessageData"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/filters/{id}/apply": {
      "get": {
        "tags": [
          "mail/Filters"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Apply a filter",
        "description": "Applies a filter to the existing messages.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Filter ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mail operation status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailOperationStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/settings": {
      "get": {
        "tags": [
          "mail/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the mail common settings",
        "description": "Returns the mail common settings.",
        "responses": {
          "200": {
            "description": "Mail common settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailCommonSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/settings/conversationsEnabled": {
      "get": {
        "tags": [
          "mail/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the \"Enable Conversations\" flag",
        "description": "Returns a flag that specifies whether to group messages into conversations or not.",
        "responses": {
          "200": {
            "description": "Boolean value: true - the flag is enabled, false - the flag is disabled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "mail/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set the \"Enable Conversations\" flag",
        "description": "Sets a flag that specifies whether to group messages into conversations or not.",
        "parameters": [
          {
            "name": "enabled",
            "in": "body",
            "description": "Specifies whether to group messages into conversations or not",
            "schema": {
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/api/2.0/mail/settings/alwaysDisplayImages": {
      "get": {
        "tags": [
          "mail/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the \"Always display external images\" flag",
        "description": "Returns a flag that specifies whether to display external images in the messages or not.",
        "responses": {
          "200": {
            "description": "Boolean value: true - the flag is enabled, false - the flag is disabled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "mail/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set the \"Always display external images\" flag",
        "description": "Sets a flag that specifies whether to display external images in the messages or not.",
        "parameters": [
          {
            "name": "enabled",
            "in": "body",
            "description": "Specifies whether to display external images in the messages or not",
            "schema": {
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/api/2.0/mail/settings/cacheMessagesEnabled": {
      "get": {
        "tags": [
          "mail/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the \"Cache unread messages\" flag",
        "description": "Returns a flag that specifies whether to cache unread messages or not.",
        "responses": {
          "200": {
            "description": "Boolean value: true - the flag is enabled, false - the flag is disabled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "mail/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set the \"Cache unread messages\" flag",
        "description": "Sets a flag that specifies whether to cache unread messages or not.",
        "parameters": [
          {
            "name": "enabled",
            "in": "body",
            "description": "Specifies whether to cache unread messages or not",
            "schema": {
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/api/2.0/mail/settings/goNextAfterMoveEnabled": {
      "get": {
        "tags": [
          "mail/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the \"Go next after move\" flag",
        "description": "Returns a flag that specifies whether to go to the next message after moving/deleting the currently viewed or return to the current folder.",
        "responses": {
          "200": {
            "description": "Boolean value: true - the flag is enabled, false - the flag is disabled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "mail/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set the \"Go next after move\" flag",
        "description": "Sets a flag that specifies whether to go to the next message after moving/deleting the currently viewed or return to the current folder.",
        "parameters": [
          {
            "name": "enabled",
            "in": "body",
            "description": "Specifies whether to go to the next message after moving/deleting the currently viewed or return to the current folder",
            "schema": {
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/api/2.0/mail/settings/replaceMessageBody": {
      "get": {
        "tags": [
          "mail/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the \"Replace message body\" flag",
        "description": "Returns a flag that specifies whether to completely replace text of the email when inserting a template or not.",
        "responses": {
          "200": {
            "description": "Boolean value: true - the flag is enabled, false - the flag is disabled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "mail/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set the \"Replace message body\" flag",
        "description": "Sets a flag that specifies whether to completely replace text of the email when inserting a template or not.",
        "parameters": [
          {
            "name": "enabled",
            "in": "body",
            "description": "Specifies whether to completely replace text of the email when inserting a template or not",
            "schema": {
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/api/2.0/mail/messages/attachments/export": {
      "put": {
        "tags": [
          "mail/Attachments"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Export message attachments",
        "description": "Exports all the message attachments to the folder with documents.",
        "parameters": [
          {
            "name": "id_message",
            "in": "body",
            "description": "Message ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id_folder",
            "in": "body",
            "description": "Folder ID (if this parameter is empty, the \"My documents\" folder is used)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Number of attachments exported",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/messages/attachment/export": {
      "put": {
        "tags": [
          "mail/Attachments"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Export an attachment",
        "description": "Exports an attachment with the ID specified in the request to the folder with documents.",
        "parameters": [
          {
            "name": "id_attachment",
            "in": "body",
            "description": "Attachment ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id_folder",
            "in": "body",
            "description": "Folder ID (if this parameter is empty, the \"My documents\" folder is used)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document ID in the folder with documents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/messages/attachment/add": {
      "post": {
        "tags": [
          "mail/Attachments"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add an attachment",
        "description": "Adds an attachment to the draft with the ID specified in the request.",
        "parameters": [
          {
            "name": "id_message",
            "in": "body",
            "description": "Message ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "body",
            "description": "File name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file",
            "in": "body",
            "description": "File stream",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "content_type",
            "in": "body",
            "description": "File content type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mail attachment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailAttachmentData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/messages/calendarbody/add": {
      "post": {
        "tags": [
          "mail/Attachments"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a calendar",
        "description": "Adds an iCal body to the draft with the ID specified in the request.",
        "parameters": [
          {
            "name": "id_message",
            "in": "body",
            "description": "Message ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ical_body",
            "in": "body",
            "description": "iCal body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mail attachment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailAttachmentData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/messages/attachment/downloadall/{messageId}": {
      "put": {
        "tags": [
          "mail/Attachments"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Download attachments",
        "description": "Downloads all the attachments from the message with the ID specified in the request.",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "Message ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attachment archive",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailOperationStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/autoreply/update/{mailboxId:[0-9]+}": {
      "post": {
        "tags": [
          "mail/Autoreply"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update an autoreply",
        "description": "Updates or creates an autoreply with the parameters specified in the request.",
        "parameters": [
          {
            "name": "mailboxId",
            "in": "body",
            "description": "Mailbox ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "turnOn",
            "in": "body",
            "description": "New autoreply status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "onlyContacts",
            "in": "body",
            "description": "Specifies whether to send an autoreply only to the contacts or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "turnOnToDate",
            "in": "body",
            "description": "Specifies whether to send an autoreply till the specified date or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fromDate",
            "in": "body",
            "description": "New start date of autoreply sending",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "body",
            "description": "New end date of autoreply sending",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "subject",
            "in": "body",
            "description": "New autoreply subject",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "html",
            "in": "body",
            "description": "New autoreply contents in the HTML format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated autoreply information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailAutoreplyData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/operations": {
      "get": {
        "tags": [
          "mail/Operations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get running mail operations",
        "description": "Returns all the running mail operations.",
        "responses": {
          "200": {
            "description": "List of running mail operations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailOperationStatus"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/operations/{operationId}": {
      "get": {
        "tags": [
          "mail/Operations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a mail operation status",
        "description": "Returns a status of the mail operation with the ID specified in the request.",
        "parameters": [
          {
            "name": "operationId",
            "in": "path",
            "description": "Operation ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mail operation status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailOperationStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/helpcenter": {
      "get": {
        "tags": [
          "mail/Help Center"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the Help Center page HTML",
        "description": "Returns the Help Center page HTML.",
        "responses": {
          "200": {
            "description": "String with the Help Center page HTML",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/signature/{mailbox_id:[0-9]+}": {
      "get": {
        "tags": [
          "mail/Signature"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a signature",
        "description": "Returns a signature of a mailbox with the ID specified in the request.",
        "parameters": [
          {
            "name": "mailbox_id",
            "in": "body",
            "description": "Mailbox ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Signature object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailSignatureData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/signature/update/{mailbox_id:[0-9]+}": {
      "post": {
        "tags": [
          "mail/Signature"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a signature",
        "description": "Updates a signature of a mailbox with the ID specified in the request.",
        "parameters": [
          {
            "name": "mailbox_id",
            "in": "body",
            "description": "Mailbox ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "html",
            "in": "body",
            "description": "New signature value in the HTML format",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_active",
            "in": "body",
            "description": "New signature status (active or not)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated signature object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailSignatureData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/accounts": {
      "get": {
        "tags": [
          "mail/Accounts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get user accounts",
        "description": "Returns a list of all the user mailboxes, aliases, and groups.",
        "parameters": [
          {
            "name": "username",
            "in": "body",
            "description": "User name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user mailboxes, aliases and groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailAccountData"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "mail/Accounts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create an account by custom mail servers",
        "description": "Creates an account using full information about mail servers specified in the request.",
        "parameters": [
          {
            "name": "name",
            "in": "body",
            "description": "Account name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "body",
            "description": "Account email address in the name@domain format",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account",
            "in": "body",
            "description": "IMAP or POP server login",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "body",
            "description": "IMAP or POP server password",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port",
            "in": "body",
            "description": "IMAP or POP server port",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "server",
            "in": "body",
            "description": "IMAP or POP server address or IP",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "smtp_account",
            "in": "body",
            "description": "SMTP server login",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "smtp_password",
            "in": "body",
            "description": "SMTP server password",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "smtp_port",
            "in": "body",
            "description": "SMTP server port",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "smtp_server",
            "in": "body",
            "description": "SMTP server address or IP",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "smtp_auth",
            "in": "body",
            "description": "Specifies if the authentication is needed for the SMTP server or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "imap",
            "in": "body",
            "description": "Specifies if the IMAP server is used for incoming mails or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "restrict",
            "in": "body",
            "description": "Specifies if all the mails should be downloaded from the account (false) or not (true). If true, then messages for the last 30 days only will be imported",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "incoming_encryption_type",
            "in": "body",
            "description": "Encryption type for the IMAP or POP server: 0 - None, 1 - SSL, 2 - StartTLS",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "SSL",
                "StartTLS"
              ],
              "description": "[0 - None, 1 - SSL, 2 - StartTLS]"
            }
          },
          {
            "name": "outcoming_encryption_type",
            "in": "body",
            "description": "Encryption type for the SMTP server: 0 - None, 1 - SSL, 2 - StartTLS",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "SSL",
                "StartTLS"
              ],
              "description": "[0 - None, 1 - SSL, 2 - StartTLS]"
            }
          },
          {
            "name": "auth_type_in",
            "in": "body",
            "description": "Authentication type for the IMAP or POP server: 0 - None, 1 - Login, 4 - CramMd5, 5 - OAuth2",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "Login",
                "CramMd5",
                "OAuth2",
                "Ntlm"
              ],
              "description": "[0 - None, 1 - Login, 4 - CramMd5, 5 - OAuth2, 7 - Ntlm]"
            }
          },
          {
            "name": "auth_type_smtp",
            "in": "body",
            "description": "Authentication type for the SMTP server: 0 - None, 1 - Login, 4 - CramMd5, 5 - OAuth2",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "Login",
                "CramMd5",
                "OAuth2",
                "Ntlm"
              ],
              "description": "[0 - None, 1 - Login, 4 - CramMd5, 5 - OAuth2, 7 - Ntlm]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailAccountData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "mail/Accounts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update an account",
        "description": "Updates an account with the name specified in the request.",
        "parameters": [
          {
            "name": "name",
            "in": "body",
            "description": "Account name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "body",
            "description": "New account email in the name@domain format",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account",
            "in": "body",
            "description": "New IMAP or POP server login",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "body",
            "description": "New IMAP or POP server password",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port",
            "in": "body",
            "description": "New IMAP or POP server port",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "server",
            "in": "body",
            "description": "New IMAP or POP server address or IP",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "smtp_account",
            "in": "body",
            "description": "New SMTP server login",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "smtp_password",
            "in": "body",
            "description": "New SMTP server password",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "smtp_port",
            "in": "body",
            "description": "New SMTP server port",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "smtp_server",
            "in": "body",
            "description": "New SMTP server address or IP",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "smtp_auth",
            "in": "body",
            "description": "Specifies if the authentication is needed for the SMTP server or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "restrict",
            "in": "body",
            "description": "Specifies if all the mails should be downloaded from the account (false) or not (true). If true, then messages for the last 30 days only will be imported",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "incoming_encryption_type",
            "in": "body",
            "description": "New encryption type for the IMAP or POP server: 0 - None, 1 - SSL, 2 - StartTLS",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "SSL",
                "StartTLS"
              ],
              "description": "[0 - None, 1 - SSL, 2 - StartTLS]"
            }
          },
          {
            "name": "outcoming_encryption_type",
            "in": "body",
            "description": "New encryption type for the SMTP server: 0 - None, 1 - SSL, 2 - StartTLS",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "SSL",
                "StartTLS"
              ],
              "description": "[0 - None, 1 - SSL, 2 - StartTLS]"
            }
          },
          {
            "name": "auth_type_in",
            "in": "body",
            "description": "New authentication type for the IMAP or POP server: 0 - None, 1 - Login, 4 - CramMd5, 5 - OAuth2",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "Login",
                "CramMd5",
                "OAuth2",
                "Ntlm"
              ],
              "description": "[0 - None, 1 - Login, 4 - CramMd5, 5 - OAuth2, 7 - Ntlm]"
            }
          },
          {
            "name": "auth_type_smtp",
            "in": "body",
            "description": "New authentication type for the SMTP server: 0 - None, 1 - Login, 4 - CramMd5, 5 - OAuth2",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "Login",
                "CramMd5",
                "OAuth2",
                "Ntlm"
              ],
              "description": "[0 - None, 1 - Login, 4 - CramMd5, 5 - OAuth2, 7 - Ntlm]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailAccountData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "mail/Accounts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete an account",
        "description": "Deletes an account by email address specified in the request.",
        "parameters": [
          {
            "name": "email",
            "in": "body",
            "description": "Account email address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailOperationStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/accounts/single": {
      "get": {
        "tags": [
          "mail/Accounts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get an account by email",
        "description": "Returns the account information by the email address specified in the request.",
        "parameters": [
          {
            "name": "email",
            "in": "body",
            "description": "Account email address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailBoxData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/accounts/simple": {
      "post": {
        "tags": [
          "mail/Accounts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create an account by email and password",
        "description": "Creates an account based on the email address and password specified in the request.",
        "parameters": [
          {
            "name": "email",
            "in": "body",
            "description": "Account email address in the name@domain format",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "body",
            "description": "Email password",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailAccountData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/accounts/oauth": {
      "post": {
        "tags": [
          "mail/Accounts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create an OAuth account",
        "description": "Creates a mail account with OAuth (only Google OAuth is supported).",
        "parameters": [
          {
            "name": "code",
            "in": "body",
            "description": "OAuth code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "body",
            "description": "OAuth service type: 0 - Unknown, 1 - Google",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailAccountData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "mail/Accounts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update an OAuth account",
        "description": "Updates a mail account with OAuth (only Google OAuth is supported).",
        "parameters": [
          {
            "name": "code",
            "in": "body",
            "description": "New OAuth code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "body",
            "description": "New OAuth service type: 0 - Unknown, 1 - Google",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "mailboxId",
            "in": "body",
            "description": "Mailbox ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated OAuth account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailAccountData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/accounts/state": {
      "put": {
        "tags": [
          "mail/Accounts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set the account status",
        "description": "Sets the status of an account with the email address specified in the request.",
        "parameters": [
          {
            "name": "email",
            "in": "body",
            "description": "Account email address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "body",
            "description": "Account activity status: true - enabled, false - disabled",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account mailbox ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/accounts/default": {
      "put": {
        "tags": [
          "mail/Accounts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set the default account",
        "description": "Sets the default account with the email address specified in the request.",
        "parameters": [
          {
            "name": "email",
            "in": "body",
            "description": "Account email address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isDefault",
            "in": "body",
            "description": "Specifies if this account is default or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account email address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/accounts/setups": {
      "get": {
        "tags": [
          "mail/Accounts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the default account settings",
        "description": "Returns the default settings for an account with the email address specified in the request.",
        "parameters": [
          {
            "name": "email",
            "in": "body",
            "description": "Account email address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action",
            "in": "body",
            "description": "The default settings type:\n            \"get_imap_pop_settings\" - get the IMAP or POP settings (IMAP settings are prior),\n            \"get_imap_server\" | \"get_imap_server_full\" - get the IMAP server settings,\n            \"get_pop_server\" | \"get_pop_server_full\" - get the POP server settings.\n            The default IMAP settings are returned by default.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account with default settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailBoxData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/accounts/emailinfolder": {
      "put": {
        "tags": [
          "mail/Accounts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set a folder account email",
        "description": "Sets an account email in a folder with the ID specified in the request.",
        "parameters": [
          {
            "name": "mailbox_id",
            "in": "body",
            "description": "Mailbox ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "email_in_folder",
            "in": "body",
            "description": "Document folder ID",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/2.0/mail/accounts/updateuseractivity": {
      "put": {
        "tags": [
          "mail/Accounts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the user activity status",
        "description": "Updates the user activity status.",
        "parameters": [
          {
            "name": "userOnline",
            "in": "body",
            "description": "Specifies if the user is online or not",
            "schema": {
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/api/2.0/mail/alert": {
      "get": {
        "tags": [
          "mail/Alerts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get alerts",
        "description": "Returns a list of all the alerts for the authenticated user.",
        "responses": {
          "200": {
            "description": "List of alerts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailAlertData"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/alert/{id}": {
      "delete": {
        "tags": [
          "mail/Alerts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete an alert",
        "description": "Deletes an alert with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Alert ID",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted alert ID. Same as the request parameter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/emails/search": {
      "get": {
        "tags": [
          "mail/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Search contacts",
        "description": "Searches for contacts by their names, last names, or emails.",
        "parameters": [
          {
            "name": "term",
            "in": "body",
            "description": "The string part of the contact name, last name, or email address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of strings in the following format: \"Name Last name\" email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/contacts": {
      "get": {
        "tags": [
          "mail/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get contacts by search query",
        "description": "Returns a list of filtered mail contacts by the search query specified in the request.",
        "parameters": [
          {
            "name": "search",
            "in": "body",
            "description": "Text to search in contact names or emails",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contactType",
            "in": "body",
            "description": "Contact type",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "pageSize",
            "in": "body",
            "description": "Number of contacts on the page",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "fromIndex",
            "in": "body",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortorder",
            "in": "body",
            "description": "Sort order by name. String parameter: \"ascending\" or \"descending\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of filtered contacts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailContactData"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/contacts/bycontactinfo": {
      "get": {
        "tags": [
          "mail/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get contacts by contact information",
        "description": "Returns a list of mail contacts with the contact information specified in the request.",
        "parameters": [
          {
            "name": "infoType",
            "in": "body",
            "description": "Information type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Email",
                "Phone"
              ],
              "description": "[1 - Email, 2 - Phone]"
            }
          },
          {
            "name": "data",
            "in": "body",
            "description": "Contact data",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isPrimary",
            "in": "body",
            "description": "Contact importance: primary or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of filtered contacts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailContactData"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/contact/add": {
      "post": {
        "tags": [
          "mail/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a mail contact",
        "description": "Creates a mail contact with the parameters specified in the request.",
        "parameters": [
          {
            "name": "name",
            "in": "body",
            "description": "Contact name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "Contact description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emails",
            "in": "body",
            "description": "List of contact emails",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "phoneNumbers",
            "in": "body",
            "description": "List of contact phone numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information about created contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailContactData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/contacts/remove": {
      "put": {
        "tags": [
          "mail/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove mail contacts",
        "description": "Removes the mail contacts with the IDs specified in the request.",
        "parameters": [
          {
            "name": "ids",
            "in": "body",
            "description": "List of mail contact IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of removed mail contact IDs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/contact/update": {
      "put": {
        "tags": [
          "mail/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a mail contact",
        "description": "Updates a mail contact with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Mail contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "body",
            "description": "New contact name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "New contact description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emails",
            "in": "body",
            "description": "New list of contact emails",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "phoneNumbers",
            "in": "body",
            "description": "New list of contact phone numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information about updated contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailContactData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/crm/linked/entities": {
      "get": {
        "tags": [
          "mail/Contacts"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the linked CRM entities",
        "description": "Returns a list of the CRM entities (contact, case, or opportunity) linked with a conversation.",
        "parameters": [
          {
            "name": "message_id",
            "in": "body",
            "description": "Message ID. It may be ID of any message included in the conversation",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of entity information: {entity_id, entity_type, avatar_link, title}",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CrmContactData"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/conversations": {
      "get": {
        "tags": [
          "mail/Conversations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get filtered conversations",
        "description": "Returns the conversations with the parameters specified in the request.",
        "parameters": [
          {
            "name": "folder",
            "in": "body",
            "description": "Folder type: 1 - inbox, 2 - sent, 3 - drafts, 4 - trash, 5 - spam",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "unread",
            "in": "body",
            "description": "Conversation status: unread (true), read (false), or all (null) messages",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "attachments",
            "in": "body",
            "description": "Defines if a conversation has attachments or not: with attachments (true), without attachments (false), or all (null) messages",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "period_from",
            "in": "body",
            "description": "Start search period date",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "period_to",
            "in": "body",
            "description": "End search period date",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "important",
            "in": "body",
            "description": "Specifies if only important conversations will be displayed or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "from_address",
            "in": "body",
            "description": "Mail address from which the conversation messages were received",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to_address",
            "in": "body",
            "description": "Mail address to which the conversation messages were sent",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mailbox_id",
            "in": "body",
            "description": "Recipient mailbox ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "IDs of tags linked to the target conversation",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "search",
            "in": "body",
            "description": "Text to search in the conversation bodies and subjects",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "in": "body",
            "description": "Number of conversations on the page",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "sortorder",
            "in": "body",
            "description": "Sort order by date: \"ascending\" or \"descending\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from_date",
            "in": "body",
            "description": "Start date of conversation search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from_message",
            "in": "body",
            "description": "Message from which the conversations are searched",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "with_calendar",
            "in": "body",
            "description": "Specifies if the conversations have a calendar or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "user_folder_id",
            "in": "body",
            "description": "User folder ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "prev_flag",
            "in": "body",
            "description": "Direction sort of the conversation list: true for previous, false for next",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of filtered conversations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailMessageData"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/conversation/{id:[0-9]+}": {
      "get": {
        "tags": [
          "mail/Conversations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a conversation",
        "description": "Returns a list of messages linked in one chain (conversation).",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "ID of any message from the conversation",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAll",
            "in": "body",
            "description": "Loads the content of all messages",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "markRead",
            "in": "body",
            "description": "Specifies if a conversation will be marked as read or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "needSanitize",
            "in": "body",
            "description": "Specifies if HTML needs to be prepared for the FCK editor or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of messages linked in one chain",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailMessageData"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/conversation/{id:[0-9]+}/{direction:(next|prev)}": {
      "get": {
        "tags": [
          "mail/Conversations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the previous or next conversation ID",
        "description": "Returns the previous or next conversation ID filtered with the parameters specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Head message ID of the current conversation",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "direction",
            "in": "body",
            "description": "Defines if the previous or next conversation is needed: \"prev\" for previous, \"next\" for next",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder",
            "in": "body",
            "description": "Folder type: 1 - inbox, 2 - sent, 5 - spam",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "unread",
            "in": "body",
            "description": "Conversation status: unread (true), read (false), or all (null) conversations",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "attachments",
            "in": "body",
            "description": "Defines if a conversation has attachments or not: with attachments (true), without attachments (false) or all (null) messages",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "period_from",
            "in": "body",
            "description": "Start search period date",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "period_to",
            "in": "body",
            "description": "End search period date",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "important",
            "in": "body",
            "description": "Specifies if only important conversations will be displayed or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "from_address",
            "in": "body",
            "description": "Mail address from which the conversation messages were received",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to_address",
            "in": "body",
            "description": "Mail address to which the conversation messages were sent",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mailbox_id",
            "in": "body",
            "description": "Recipient mailbox ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "IDs of tags linked to the target conversation",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "search",
            "in": "body",
            "description": "Text to search in the conversation bodies and subjects",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "in": "body",
            "description": "Number of conversations on the page",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "sortorder",
            "in": "body",
            "description": "Sort order by date: \"ascending\" or \"descending\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "with_calendar",
            "in": "body",
            "description": "Specifies if the conversations have a calendar or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "user_folder_id",
            "in": "body",
            "description": "User folder ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Head message ID of the previous or next conversation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/conversations/move": {
      "put": {
        "tags": [
          "mail/Conversations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Move conversations",
        "description": "Moves conversations with the IDs specified in the request to the selected folder.",
        "parameters": [
          {
            "name": "ids",
            "in": "body",
            "description": "List of message IDs from the conversations",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "folder",
            "in": "body",
            "description": "Folder type: 1 - inbox, 2 - sent, 3 - drafts, 4 - trash, 5 - spam",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userFolderId",
            "in": "body",
            "description": "User folder ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of message IDs from the conversations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/conversations/restore": {
      "put": {
        "tags": [
          "mail/Conversations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Restore conversations",
        "description": "Restores the conversations with the IDs specified in the request to their original folders.",
        "parameters": [
          {
            "name": "ids",
            "in": "body",
            "description": "List of conversation IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "learnSpamTrainer",
            "in": "body",
            "description": "Specifies whether to send messages to the spam training or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of restored conversation IDs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/conversations/remove": {
      "put": {
        "tags": [
          "mail/Conversations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove conversations",
        "description": "Removes conversations with the IDs specified in the request from the folders.",
        "parameters": [
          {
            "name": "ids",
            "in": "body",
            "description": "List of conversation IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of removed conversation IDs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/conversations/mark": {
      "put": {
        "tags": [
          "mail/Conversations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set a conversation status",
        "description": "Sets a status to the conversations with the IDs specified in the request.",
        "parameters": [
          {
            "name": "ids",
            "in": "body",
            "description": "List of conversation IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "New status (\"read\", \"unread\", \"important\", or \"normal\")",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of conversations with the changed status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/conversations/tag/{tag_id}/set": {
      "put": {
        "tags": [
          "mail/Conversations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a tag to the conversations",
        "description": "Adds a tag specified in the request to the selected conversations.",
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "description": "Tag ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "messages",
            "in": "body",
            "description": "List of conversation IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mail/conversations/tag/{tag_id}/unset": {
      "put": {
        "tags": [
          "mail/Conversations"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove a tag from the conversations",
        "description": "Removes a tag specified in the request from the conversations.",
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "description": "Tag ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "messages",
            "in": "body",
            "description": "List of conversation IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/mailboxes/add": {
      "post": {
        "tags": [
          "mailserver/Mailboxes"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a mailbox",
        "description": "Creates a mailbox with the parameters specified in the request.",
        "parameters": [
          {
            "name": "name",
            "in": "body",
            "description": "Mailbox name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "local_part",
            "in": "body",
            "description": "Mailbox local part",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domain_id",
            "in": "body",
            "description": "Mailbox domain ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "user_id",
            "in": "body",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notifyCurrent",
            "in": "body",
            "description": "Specifies whether to notify the current user's email when a mailbox is created or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "notifyProfile",
            "in": "body",
            "description": "Specifies whether to notify the current user's profile when a mailbox is created or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mailbox data associated with the tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerMailboxData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/mailboxes/addmy": {
      "post": {
        "tags": [
          "mailserver/Mailboxes"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a mailbox with your own domain",
        "description": "Creates a mailbox with your own domain name.",
        "parameters": [
          {
            "name": "name",
            "in": "body",
            "description": "Mailbox name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mailbox data associated with the tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerMailboxData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/mailboxes/get": {
      "get": {
        "tags": [
          "mailserver/Mailboxes"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get mailboxes",
        "description": "Returns a list of all the mailboxes associated with the tenant.",
        "responses": {
          "200": {
            "description": "List of mailbox data for the current tenant",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServerMailboxData"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/mailboxes/remove/{id}": {
      "delete": {
        "tags": [
          "mailserver/Mailboxes"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove a mailbox",
        "description": "Deletes a mailbox with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Mailbox ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailOperationStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/mailboxes/update": {
      "put": {
        "tags": [
          "mailserver/Mailboxes"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a mailbox",
        "description": "Updates a mailbox with the ID specified in the request.",
        "parameters": [
          {
            "name": "mailbox_id",
            "in": "body",
            "description": "Mailbox ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "body",
            "description": "New sender name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated mailbox data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerMailboxData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/mailboxes/alias/add": {
      "put": {
        "tags": [
          "mailserver/Mailboxes"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a mailbox alias",
        "description": "Adds an alias to the mailbox with the ID specified in the request.",
        "parameters": [
          {
            "name": "mailbox_id",
            "in": "body",
            "description": "Mailbox ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "alias_name",
            "in": "body",
            "description": "Mailbox alias",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mailbox data associated with the tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerDomainAddressData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/mailboxes/alias/remove": {
      "put": {
        "tags": [
          "mailserver/Mailboxes"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove a mailbox alias",
        "description": "Removes an alias from the mailbox with the ID specified in the request.",
        "parameters": [
          {
            "name": "mailbox_id",
            "in": "body",
            "description": "Mailbox ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "address_id",
            "in": "body",
            "description": "Mailbox address ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mailbox ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/mailboxes/changepwd": {
      "put": {
        "tags": [
          "mailserver/Mailboxes"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Change a mailbox password",
        "description": "Changes a password of a mailbox with the ID specified in the request.",
        "parameters": [
          {
            "name": "mailbox_id",
            "in": "body",
            "description": "Mailbox ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "password",
            "in": "body",
            "description": "New password",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/2.0/mailserver/mailboxes/alias/exists": {
      "get": {
        "tags": [
          "mailserver/Mailboxes"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Check the mailbox address existence",
        "description": "Checks if the mailbox address is already registered or not.",
        "parameters": [
          {
            "name": "local_part",
            "in": "body",
            "description": "Mailbox local part",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domain_id",
            "in": "body",
            "description": "Mailbox domain ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean value: true - address exists, false - address does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/mailboxes/alias/valid": {
      "get": {
        "tags": [
          "mailserver/Mailboxes"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Check the mailbox address correctness",
        "description": "Checks if the mailbox address is valid or not.",
        "parameters": [
          {
            "name": "local_part",
            "in": "body",
            "description": "Mailbox local part",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domain_id",
            "in": "body",
            "description": "Mailbox domain ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean value: true - address is valid, false - address is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/groupaddress/add": {
      "post": {
        "tags": [
          "mailserver/Mail groups"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a mail group",
        "description": "Creates a mail group with the parameters specified in the request.",
        "parameters": [
          {
            "name": "name",
            "in": "body",
            "description": "Sender name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domain_id",
            "in": "body",
            "description": "Domain ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "address_ids",
            "in": "body",
            "description": "List of address IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mail group data associated with the tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerDomainGroupData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/groupaddress/address/add": {
      "put": {
        "tags": [
          "mailserver/Mail groups"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add an address to the mail group",
        "description": "Adds an address with the ID specified in the request to the mail group.",
        "parameters": [
          {
            "name": "mailgroup_id",
            "in": "body",
            "description": "Mail group ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "address_id",
            "in": "body",
            "description": "Address ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mail group data associated with the tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerDomainGroupData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/groupaddress/addresses/remove": {
      "delete": {
        "tags": [
          "mailserver/Mail groups"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove an address from the mail group",
        "description": "Removes an address with the ID specified in the request from the mail group.",
        "parameters": [
          {
            "name": "mailgroup_id",
            "in": "body",
            "description": "Mail group ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "address_id",
            "in": "body",
            "description": "Address ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mail group ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/groupaddress/get": {
      "get": {
        "tags": [
          "mailserver/Mail groups"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get mail groups",
        "description": "Returns a list of mail groups associated with the tenant.",
        "responses": {
          "200": {
            "description": "List of mail group data for the current tenant",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServerDomainGroupData"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/groupaddress/remove/{id}": {
      "delete": {
        "tags": [
          "mailserver/Mail groups"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove a mail group",
        "description": "Deletes a mail group with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Mail group ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mail group ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/notification/address/add": {
      "post": {
        "tags": [
          "mailserver/Notifications"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a notification address",
        "description": "Creates an address for the tenant notifications with the parameters specified in the request.",
        "parameters": [
          {
            "name": "name",
            "in": "body",
            "description": "Address name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "body",
            "description": "Address password",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domain_id",
            "in": "body",
            "description": "Domain ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification address data associated with the tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerNotificationAddressData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/notification/address/remove": {
      "delete": {
        "tags": [
          "mailserver/Notifications"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove a notification address",
        "description": "Deletes an address for the tenant notifications specified in the request.",
        "parameters": [
          {
            "name": "address",
            "in": "body",
            "description": "Address name",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/2.0/mailserver/server": {
      "get": {
        "tags": [
          "mailserver/Servers"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the mail server",
        "description": "Returns the mail server associated with the current tenant.",
        "responses": {
          "200": {
            "description": "Mail server data for the current tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/serverinfo/get": {
      "get": {
        "tags": [
          "mailserver/Servers"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the mail server information",
        "description": "Returns full information on the mail server associated with the current tenant.",
        "responses": {
          "200": {
            "description": "Full mail server information for the current tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerFullData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/freedns/get": {
      "get": {
        "tags": [
          "mailserver/Servers"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get or create free DNS records",
        "description": "Returns or generates free DNS records.",
        "responses": {
          "200": {
            "description": "DNS records for the current tenant and user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerDomainDnsData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/domains/get": {
      "get": {
        "tags": [
          "mailserver/Domains"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get web domains",
        "description": "Returns a list of all the web domains associated with the current tenant.",
        "responses": {
          "200": {
            "description": "List of web domains for the current tenant",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServerDomainData"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/domains/common": {
      "get": {
        "tags": [
          "mailserver/Domains"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get common web domain",
        "description": "Returns the common web domain.",
        "responses": {
          "200": {
            "description": "Common web domain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerDomainData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/domains/add": {
      "post": {
        "tags": [
          "mailserver/Domains"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a domain to the mail server",
        "description": "Adds a web domain to the current tenant.",
        "parameters": [
          {
            "name": "name",
            "in": "body",
            "description": "Web domain name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id_dns",
            "in": "body",
            "description": "DNS ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Web domain data associated with the tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerDomainData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/domains/remove/{id}": {
      "delete": {
        "tags": [
          "mailserver/Domains"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove a domain from the mail server",
        "description": "Deletes a web domain with the ID specified in the request from the mail server.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Web domain ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailOperationStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/domains/dns/get": {
      "get": {
        "tags": [
          "mailserver/Domains"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get DNS records by domain ID",
        "description": "Returns DNS records related to the domain with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Domain ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DNS records associated with the domain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerDomainDnsData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/domains/exists": {
      "get": {
        "tags": [
          "mailserver/Domains"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Check the domain name existence",
        "description": "Checks if a web domain name specified in the request already exists or not.",
        "parameters": [
          {
            "name": "name",
            "in": "body",
            "description": "Web domain name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean value: true - domain name exists, false - domain name does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/mailserver/domains/ownership/check": {
      "get": {
        "tags": [
          "mailserver/Domains"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Check the domain ownership",
        "description": "Checks if a web domain specified in the request belongs to the current user or not.",
        "parameters": [
          {
            "name": "name",
            "in": "body",
            "description": "Web domain name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean value: true - current user is the domain owner, false - current user is not the domain owner",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/MigrationApi/tmp": {
      "get": {
        "tags": [
          "MigrationApi"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get migration temporary folder",
        "description": "Returns the temporary folder where all the migration files are stored.",
        "responses": {
          "200": {
            "description": "Path to the migration temporary folder",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/MigrationApi/list": {
      "get": {
        "tags": [
          "MigrationApi"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get migrations",
        "description": "Returns all the available migrations.",
        "responses": {
          "200": {
            "description": "List of migrations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/MigrationApi/migratorsInfo": {
      "post": {
        "tags": [
          "MigrationApi"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get migrator information",
        "description": "Returns the information about the migrators with the names specified in the request.",
        "parameters": [
          {
            "name": "migratorsName",
            "in": "body",
            "description": "List of migrator names",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of migrator information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MigratorInfo"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/MigrationApi/init/{migratorName}": {
      "post": {
        "tags": [
          "MigrationApi"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Initialize migration",
        "description": "Uploads a backup of a migrator specified in the request and initializes the import.",
        "parameters": [
          {
            "name": "migratorName",
            "in": "path",
            "description": "Migrator name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "body",
            "description": "Path to the backup file",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/2.0/MigrationApi/status": {
      "get": {
        "tags": [
          "MigrationApi"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get migration status",
        "description": "Returns a status of the running migration process.",
        "responses": {
          "200": {
            "description": "Object with the information about migration status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/MigrationApi/cancel": {
      "post": {
        "tags": [
          "MigrationApi"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Cancel migration",
        "description": "Cancels the running migration process."
      }
    },
    "/api/2.0/MigrationApi/migrate": {
      "post": {
        "tags": [
          "MigrationApi"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Start migration",
        "description": "Starts the migration process specifying the migration information to be imported (users, modules, groups, etc.).",
        "parameters": [
          {
            "name": "info",
            "in": "body",
            "description": "Migration information",
            "schema": {
              "$ref": "#/components/schemas/MigrationApiInfo"
            }
          }
        ]
      }
    },
    "/api/2.0/MigrationApi/logs": {
      "get": {
        "tags": [
          "MigrationApi"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get migration logs",
        "description": "Returns the logs of the migration process.",
        "responses": {
          "200": {
            "description": "Migration logs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MigrationLogApiContentResponce"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/MigrationApi/finish": {
      "post": {
        "tags": [
          "MigrationApi"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Complete migration",
        "description": "Completes the migration process.",
        "parameters": [
          {
            "name": "isSendWelcomeEmail",
            "in": "body",
            "description": "Specifies whether to send a welcome letter to the imported users or not",
            "schema": {
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/api/2.0/portal/": {
      "get": {
        "tags": [
          "portal/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the current portal",
        "description": "Returns the current portal.",
        "responses": {
          "200": {
            "description": "Portal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/portal/users/{userID}": {
      "get": {
        "tags": [
          "portal/Users"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a user by ID",
        "description": "Returns a user with the ID specified in the request from the current portal.",
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/portal/users/invite/{employeeType}": {
      "get": {
        "tags": [
          "portal/Users"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get an invitation link",
        "description": "Returns an invitation link for joining the portal.",
        "parameters": [
          {
            "name": "employeeType",
            "in": "path",
            "description": "Employee type (User or Visitor)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "All",
                "User",
                "Visitor"
              ],
              "description": "[0 - All, 1 - User, 2 - Visitor]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invitation link",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/portal/usedspace": {
      "get": {
        "tags": [
          "portal/Quota"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the used portal space",
        "description": "Returns the used space of the current portal.",
        "responses": {
          "200": {
            "description": "Used space",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/portal/userscount": {
      "get": {
        "tags": [
          "portal/Users"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a number of portal users",
        "description": "Returns a number of portal users.",
        "responses": {
          "200": {
            "description": "User count",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/portal/tariff": {
      "get": {
        "tags": [
          "portal/Quota"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a portal tariff",
        "description": "Returns the current portal tariff.",
        "responses": {
          "200": {
            "description": "Tariff",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tariff"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/portal/quota": {
      "get": {
        "tags": [
          "portal/Quota"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a portal quota",
        "description": "Returns the current portal quota.",
        "responses": {
          "200": {
            "description": "Quota",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantQuota"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/portal/quota/right": {
      "get": {
        "tags": [
          "portal/Quota"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the recommended quota",
        "description": "Returns the recommended quota for the current portal.",
        "responses": {
          "200": {
            "description": "Quota",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantQuota"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/portal/getbackupschedule": {
      "get": {
        "tags": [
          "portal/Backup"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the backup schedule",
        "description": "Returns the backup schedule for the current portal.",
        "responses": {
          "200": {
            "description": "Backup schedule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schedule"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/portal/createbackupschedule": {
      "post": {
        "tags": [
          "portal/Backup"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create the backup schedule",
        "description": "Creates the backup schedule for the current portal with the parameters specified in the request.",
        "parameters": [
          {
            "name": "storageType",
            "in": "body",
            "description": "Storage type (\"Documents\", \"ThridpartyDocuments\", \"CustomCloud\", \"Local\", \"DataStore\", or \"ThirdPartyConsumer\")",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Documents",
                "ThridpartyDocuments",
                "CustomCloud",
                "Local",
                "DataStore",
                "ThirdPartyConsumer"
              ],
              "description": "[0 - Documents, 1 - ThridpartyDocuments, 2 - CustomCloud, 3 - Local, 4 - DataStore, 5 - ThirdPartyConsumer]"
            }
          },
          {
            "name": "storageParams",
            "in": "body",
            "description": "Storage parameters",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          {
            "name": "backupsStored",
            "in": "body",
            "description": "Maximum number of backup stored copies",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cronParams",
            "in": "body",
            "description": "Cron parameters",
            "schema": {
              "$ref": "#/components/schemas/CronParams"
            }
          },
          {
            "name": "backupMail",
            "in": "body",
            "description": "Specifies if the mails will be included into the backup or not",
            "schema": {
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/api/2.0/portal/deletebackupschedule": {
      "delete": {
        "tags": [
          "portal/Backup"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete the backup schedule",
        "description": "Deletes the backup schedule for the current portal."
      }
    },
    "/api/2.0/portal/startbackup": {
      "post": {
        "tags": [
          "portal/Backup"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Start the backup",
        "description": "Starts the backup of the current portal with the parameters specified in the request.",
        "parameters": [
          {
            "name": "storageType",
            "in": "body",
            "description": "Storage type (\"Documents\", \"ThridpartyDocuments\", \"CustomCloud\", \"Local\", \"DataStore\", or \"ThirdPartyConsumer\")",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Documents",
                "ThridpartyDocuments",
                "CustomCloud",
                "Local",
                "DataStore",
                "ThirdPartyConsumer"
              ],
              "description": "[0 - Documents, 1 - ThridpartyDocuments, 2 - CustomCloud, 3 - Local, 4 - DataStore, 5 - ThirdPartyConsumer]"
            }
          },
          {
            "name": "storageParams",
            "in": "body",
            "description": "Storage parameters",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          {
            "name": "backupMail",
            "in": "body",
            "description": "Specifies if the mails will be included into the backup or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Backup progress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupProgress"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/portal/getbackupprogress": {
      "get": {
        "tags": [
          "portal/Backup"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the backup progress",
        "description": "Returns the progress of the started backup.",
        "responses": {
          "200": {
            "description": "Backup progress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupProgress"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/portal/getbackuphistory": {
      "get": {
        "tags": [
          "portal/Backup"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the backup history",
        "description": "Returns the history of the started backup.",
        "responses": {
          "200": {
            "description": "Backup history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BackupHistoryRecord"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/portal/deletebackup/{id}": {
      "delete": {
        "tags": [
          "portal/Backup"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete the backup",
        "description": "Deletes the backup with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Backup ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ]
      }
    },
    "/api/2.0/portal/deletebackuphistory": {
      "delete": {
        "tags": [
          "portal/Backup"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete the backup history",
        "description": "Deletes the backup history of the current portal."
      }
    },
    "/api/2.0/portal/startrestore": {
      "post": {
        "tags": [
          "portal/Backup"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Start the restoring process",
        "description": "Starts the data restoring process for the current portal with the parameters specified in the request.",
        "parameters": [
          {
            "name": "backupId",
            "in": "body",
            "description": "Backup ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storageType",
            "in": "body",
            "description": "Storage type (\"Documents\", \"ThridpartyDocuments\", \"CustomCloud\", \"Local\", \"DataStore\", or \"ThirdPartyConsumer\")",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Documents",
                "ThridpartyDocuments",
                "CustomCloud",
                "Local",
                "DataStore",
                "ThirdPartyConsumer"
              ],
              "description": "[0 - Documents, 1 - ThridpartyDocuments, 2 - CustomCloud, 3 - Local, 4 - DataStore, 5 - ThirdPartyConsumer]"
            }
          },
          {
            "name": "storageParams",
            "in": "body",
            "description": "Storage parameters",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          {
            "name": "notify",
            "in": "body",
            "description": "Specifies whether to notify the users about the backup or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Restoring progress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupProgress"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/portal/getrestoreprogress": {
      "get": {
        "tags": [
          "portal/Backup"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the restoring progress",
        "description": "Returns the progress of the started restoring process.",
        "responses": {
          "200": {
            "description": "Restoring progress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupProgress"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/portal/search": {
      "get": {
        "tags": [
          "portal/Search"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the search settings",
        "description": "Returns the search settings.",
        "responses": {
          "200": {
            "description": "Search settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "portal/Search"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set the search settings",
        "description": "Sets the search settings specified in the request.",
        "parameters": [
          {
            "name": "items",
            "in": "body",
            "description": "Search settings",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SearchSettingsItem"
              }
            }
          }
        ]
      }
    },
    "/api/2.0/portal/search/state": {
      "get": {
        "tags": [
          "portal/Search"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Check the search availability",
        "description": "Checks if the search process is available or not.",
        "responses": {
          "200": {
            "description": "Search information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/portal/search/reindex": {
      "post": {
        "tags": [
          "portal/Search"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Reindex a page",
        "description": "Reindexes a page during the search process.",
        "parameters": [
          {
            "name": "name",
            "in": "body",
            "description": "Index name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/contact/{contactid:[0-9]+}": {
      "get": {
        "tags": [
          "project/Projects"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get contact projects",
        "description": "Returns a list of all the projects linked with a contact with the ID specified in the request.",
        "parameters": [
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectWrapperFull"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{projectid:[0-9]+}/contact": {
      "post": {
        "tags": [
          "project/Projects"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a project contact",
        "description": "Adds the selected contact to the project with the ID specified in the request.",
        "parameters": [
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "project/Projects"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a project contact",
        "description": "Deletes the selected contact from the project with the ID specified in the request.",
        "parameters": [
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactid",
            "in": "body",
            "description": "Contact ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/template": {
      "get": {
        "tags": [
          "project/Templates"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get templates",
        "description": "Returns a list of all the templates with the base information about them.",
        "responses": {
          "200": {
            "description": "List of templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "project/Templates"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a template",
        "description": "Creates a new template with the title and description specified in the request.",
        "parameters": [
          {
            "name": "title",
            "in": "body",
            "description": "Template title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "JSON template structure in the following format: {\"tasks\": [{\"title\": \"Task without milestone\"}], \"milestones\":[{\"title\": \"milestone title\", \"duration\":0.5, \"tasks\":[{\"title\": \"milestone task\"}]}]}",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectWrapperBase"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/template/{id:[0-9]+}": {
      "get": {
        "tags": [
          "project/Templates"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a template",
        "description": "Returns the detailed information about a template with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Template ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectWrapperBase"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "project/Templates"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a template",
        "description": "Updates the existing template information with the parameters specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Template ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "New template title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "New JSON template structure in the following format: {\"tasks\": [{\"title\": \"Task without milestone\"}], \"milestones\":[{\"title\": \"milestone title\", \"duration\": 0.5, \"tasks\": [{\"title\": \"milestone task\"}]}]}",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectWrapperBase"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "project/Templates"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a template",
        "description": "Deletes a template with the ID specified in the request from the portal.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Template ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectWrapperBase"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/task/@self": {
      "get": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get my tasks",
        "description": "Returns a list with the detailed information about all the tasks for the current user.",
        "responses": {
          "200": {
            "description": "List of tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/task/@self/{status:(notaccept|open|closed|disable|unclassified|notinmilestone)}": {
      "get": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get my tasks by status",
        "description": "Returns a list with the detailed information about the tasks for the current user with a status specified in the request.",
        "parameters": [
          {
            "name": "status",
            "in": "body",
            "description": "Task status",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Open",
                "Closed"
              ],
              "description": "[1 - Open, 2 - Closed]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}": {
      "get": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a task",
        "description": "Returns the detailed information about a task with the ID specified in the request.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a task",
        "description": "Updates the selected task with the parameters (responsible user ID, task description, deadline time, etc) specified in the request.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "New task description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deadline",
            "in": "body",
            "description": "New task deadline time",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "body",
            "description": "New task start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "priority",
            "in": "body",
            "description": "New task priority",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "New task title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "milestoneid",
            "in": "body",
            "description": "New task milestone ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responsibles",
            "in": "body",
            "description": "New list of task responsibles",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "projectID",
            "in": "body",
            "description": "New task project ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "notify",
            "in": "body",
            "description": "Specifies whether to notify responsibles about the task actions or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "New task status",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "progress",
            "in": "body",
            "description": "New task progress",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a task",
        "description": "Deletes a task with the ID specified in the request from the project.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a subtask",
        "description": "Creates a subtask with the title and responsible within the parent task specified in the request.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Parent task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responsible",
            "in": "body",
            "description": "Subtask responsible",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "Subtask title",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subtask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubtaskWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/task/filter": {
      "get": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get filtered tasks",
        "description": "Returns a list with the detailed information about all the tasks matching the parameters specified in the request.",
        "parameters": [
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "myProjects",
            "in": "body",
            "description": "Specifies whether to return tasks only from my projects or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "milestone",
            "in": "body",
            "description": "Milestone ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "myMilestones",
            "in": "body",
            "description": "Specifies whether to return tasks only from my milestones or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "nomilestone",
            "in": "body",
            "description": "Specifies whether to return tasks only without milestones or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "tag",
            "in": "body",
            "description": "Project tag",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "Task status",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "substatus",
            "in": "body",
            "description": "Custom task status",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "follow",
            "in": "body",
            "description": "Specifies whether to return only followed tasks or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "departament",
            "in": "body",
            "description": "Departament GUID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "participant",
            "in": "body",
            "description": "Participant GUID",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "creator",
            "in": "body",
            "description": "Creator GUID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "deadlineStart",
            "in": "body",
            "description": "Minimum value of task deadline",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deadlineStop",
            "in": "body",
            "description": "Maximum value of task deadline",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastId",
            "in": "body",
            "description": "Last task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/files": {
      "get": {
        "tags": [
          "project/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get task files",
        "description": "Returns a list of all the files attached to the task with the ID specified in the request.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of files",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "project/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Upload files to the task",
        "description": "Uploads the files specified in the request to the selected task.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "files",
            "in": "body",
            "description": "File IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "project/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Detach a file from a task",
        "description": "Detaches the selected file from a task with the ID specified in the request.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileid",
            "in": "body",
            "description": "File ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/status": {
      "put": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a task status by task ID",
        "description": "Updates a status of a task with the ID specified in the request.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "New task status",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Open",
                "Closed"
              ],
              "description": "[1 - Open, 2 - Closed]"
            }
          },
          {
            "name": "statusId",
            "in": "body",
            "description": "Custom status ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/task/status": {
      "put": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a status of tasks",
        "description": "Updates a status of the tasks with the IDs specified in the request.",
        "parameters": [
          {
            "name": "taskids",
            "in": "body",
            "description": "Task IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "New task status",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Open",
                "Closed"
              ],
              "description": "[1 - Open, 2 - Closed]"
            }
          },
          {
            "name": "statusId",
            "in": "body",
            "description": "New custom status ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskWrapperFull"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/milestone": {
      "put": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a task milestone",
        "description": "Updates a milestone of a task with the ID specified in the request.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "milestoneid",
            "in": "body",
            "description": "Milestone ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/task/milestone": {
      "put": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a milestone of tasks",
        "description": "Updates a milestone of the tasks with the IDs specified in the request.",
        "parameters": [
          {
            "name": "taskids",
            "in": "body",
            "description": "Task IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "milestoneid",
            "in": "body",
            "description": "Milestone ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskWrapperFull"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/task/{copyFrom:[0-9]+}/copy": {
      "post": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Copy a task",
        "description": "Copies a task with the parameters specified in the request.",
        "parameters": [
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "Task description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deadline",
            "in": "body",
            "description": "Task deadline",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "priority",
            "in": "body",
            "description": "Task priority: Low|Normal|High",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Normal",
                "High",
                "Low"
              ],
              "description": "[0 - Normal, 1 - High, -1 - Low]"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "Task title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "milestoneid",
            "in": "body",
            "description": "Task milestone ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responsibles",
            "in": "body",
            "description": "List of task responsibles",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "notify",
            "in": "body",
            "description": "Specifies whether to notify responsibles about the task actions or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "startDate",
            "in": "body",
            "description": "Task start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "copyFrom",
            "in": "body",
            "description": "Task ID from which the information is copied",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "copySubtasks",
            "in": "body",
            "description": "Specifies if the subtasks will be copied or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "copyFiles",
            "in": "body",
            "description": "Specifies if the attached files will be copied or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "removeOld",
            "in": "body",
            "description": "Specifies if the original task will be removed or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Copied task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/task": {
      "delete": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete tasks",
        "description": "Deletes the tasks with the IDs specified in the request from the project.",
        "parameters": [
          {
            "name": "taskids",
            "in": "body",
            "description": "Task IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/comment": {
      "get": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get task comments",
        "description": "Returns a list of the comments for the task with the ID specified in the request.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of comments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommentWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a task comment",
        "description": "Adds a comment to the selected task with the comment text and parent comment ID specified in the request.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "Comment text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentid",
            "in": "body",
            "description": "Parent comment ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of comments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/notify": {
      "get": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Notify the task responsible",
        "description": "Notifies the responsible for the task with the ID specified in the request about the task.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/subscribe": {
      "put": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Subscribe to a task",
        "description": "Subscribes to the notifications about the actions performed with the selected task.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Check the task subscription",
        "description": "Checks the subscription to the notifications about the actions performed with the selected task.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean value: true - subscribed, false - unsubscribed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/task/{parentTaskId:[0-9]+}/link": {
      "post": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a link between tasks",
        "description": "Adds a link between the dependent and parent tasks specified in the request.",
        "parameters": [
          {
            "name": "parentTaskId",
            "in": "body",
            "description": "Parent task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dependenceTaskId",
            "in": "body",
            "description": "Dependent task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "linkType",
            "in": "body",
            "description": "Link type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Start",
                "End",
                "EndStart"
              ],
              "description": "[0 - Start, 1 - End, 2 - EndStart]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dependent task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/link": {
      "delete": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove a link between tasks",
        "description": "Removes a link between the dependent and parent tasks specified in the request.",
        "parameters": [
          {
            "name": "dependenceTaskId",
            "in": "body",
            "description": "Dependent task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "parentTaskId",
            "in": "body",
            "description": "Parent task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dependent task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/{subtaskid:[0-9]+}/copy": {
      "post": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Copy a subtask",
        "description": "Copies a subtask with the ID specified in the request.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "subtaskid",
            "in": "body",
            "description": "Subtask ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New subtask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubtaskWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/{subtaskid:[0-9]+}/move": {
      "put": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Move a subtask",
        "description": "Moves a subtask with the ID specified in the request to another task.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "subtaskid",
            "in": "body",
            "description": "Subtask ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated subtask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubtaskWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/{subtaskid:[0-9]+}": {
      "put": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a subtask",
        "description": "Updates the selected subtask with the title and responsible specified in the request.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "subtaskid",
            "in": "body",
            "description": "Subtask ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responsible",
            "in": "body",
            "description": "New subtask responsible",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "New subtask title",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated subtask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubtaskWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a subtask",
        "description": "Deletes the selected subtask from the parent task with the ID specified in the request.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "subtaskid",
            "in": "body",
            "description": "Subtask ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subtask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubtaskWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/{subtaskid:[0-9]+}/status": {
      "put": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a subtask status",
        "description": "Updates the selected subtask status of the parent task with the ID specified in the request.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "subtaskid",
            "in": "body",
            "description": "Subtask ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "New subtask status",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Open",
                "Closed"
              ],
              "description": "[1 - Open, 2 - Closed]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated subtask",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubtaskWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/comment/{commentid}": {
      "get": {
        "tags": [
          "project/Comments"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a comment",
        "description": "Returns the information about a comment with the ID specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "project/Comments"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove a comment",
        "description": "Removes a comment with the ID specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "project/Comments"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a comment",
        "description": "Updates the seleted comment using the comment text specified in the request.",
        "parameters": [
          {
            "name": "commentid",
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "New comment text",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated comment",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/comment/preview": {
      "post": {
        "tags": [
          "project/Comments"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a comment preview",
        "description": "Returns a preview of a project comment with the ID specified in the request.",
        "parameters": [
          {
            "name": "htmltext",
            "in": "body",
            "description": "Comment text in the HTML format",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentid",
            "in": "body",
            "description": "Comment ID, or empty string if a comment is new",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/comment": {
      "post": {
        "tags": [
          "project/Projects"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a project comment",
        "description": "Adds a project comment with the parameters specified in the request. The parent comment ID can also be selected.",
        "parameters": [
          {
            "name": "parentcommentid",
            "in": "body",
            "description": "Parent comment ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityid",
            "in": "body",
            "description": "Entity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "Comment text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "body",
            "description": "Comment type (message or task)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/tag": {
      "get": {
        "tags": [
          "project/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get project tags",
        "description": "Returns a list of all the available project tags.",
        "responses": {
          "200": {
            "description": "List of tags",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ObjectWrapperBase"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "project/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a tag",
        "description": "Creates a new tag with the data specified in the request.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Tag data",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created tag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectWrapperBase"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/tag/{tag}": {
      "get": {
        "tags": [
          "project/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get projects by a tag",
        "description": "Returns the detailed list of all the projects with a tag specified in the request.",
        "parameters": [
          {
            "name": "tag",
            "in": "path",
            "description": "Tag name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/tag/search": {
      "get": {
        "tags": [
          "project/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get tags by a tag name",
        "description": "Returns a list of all the tags by the tag name specified in the request.",
        "parameters": [
          {
            "name": "tagName",
            "in": "body",
            "description": "Tag name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tags",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ObjectWrapperBase"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/milestone": {
      "get": {
        "tags": [
          "project/Milestones"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get recent milestones",
        "description": "Returns a list of the recent milestones within all the portal projects.",
        "responses": {
          "200": {
            "description": "List of milestones",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MilestoneWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "project/Milestones"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete milestones",
        "description": "Deletes the milestones with the IDs specified in the request.",
        "parameters": [
          {
            "name": "ids",
            "in": "body",
            "description": "Milestone IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted milestones",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MilestoneWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/milestone/upcoming": {
      "get": {
        "tags": [
          "project/Milestones"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get upcoming milestones",
        "description": "Returns a list of all the upcoming milestones within all the portal projects.",
        "responses": {
          "200": {
            "description": "List of milestones",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MilestoneWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/milestone/filter": {
      "get": {
        "tags": [
          "project/Milestones"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get filtered milestones",
        "description": "Returns a list of all the milestones matching the parameters specified in the request.",
        "parameters": [
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tag",
            "in": "body",
            "description": "Milestone tag",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "Milestone status (\"Open\" or \"Closed\")",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "deadlineStart",
            "in": "body",
            "description": "Minimum value of milestone deadline",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deadlineStop",
            "in": "body",
            "description": "Maximum value of milestone deadline",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "taskResponsible",
            "in": "body",
            "description": "Milestone responsible GUID",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "lastId",
            "in": "body",
            "description": "Last milestone ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "myProjects",
            "in": "body",
            "description": "Specifies whether to return milestones only from my projects or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "milestoneResponsible",
            "in": "body",
            "description": "Milestone responsible GUID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of milestones",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MilestoneWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/milestone/late": {
      "get": {
        "tags": [
          "project/Milestones"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get overdue milestones",
        "description": "Returns a list of all the overdue milestones in the portal projects.",
        "responses": {
          "200": {
            "description": "List of milestones",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MilestoneWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/milestone/{year}/{month}/{day}": {
      "get": {
        "tags": [
          "project/Milestones"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get milestones by deadline",
        "description": "Returns a list of all the milestones with the deadline specified in the request.",
        "parameters": [
          {
            "name": "year",
            "in": "path",
            "description": "Deadline year",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "path",
            "description": "Deadline month",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "day",
            "in": "path",
            "description": "Deadline day",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of milestones",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MilestoneWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/milestone/{year}/{month}": {
      "get": {
        "tags": [
          "project/Milestones"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get milestones by deadline month",
        "description": "Returns a list of all the milestones with the deadline month specified in the request.",
        "parameters": [
          {
            "name": "year",
            "in": "path",
            "description": "Deadline year",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "path",
            "description": "Deadline month",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of milestones",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MilestoneWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/milestone/{id:[0-9]+}": {
      "get": {
        "tags": [
          "project/Milestones"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a milestone",
        "description": "Returns the detailed information about a milestone with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Milestone ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Milestone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilestoneWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "project/Milestones"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a milestone",
        "description": "Updates the selected milestone changing the milestone parameters (title, deadline, status, etc.) specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Milestone ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "New milestone title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deadline",
            "in": "body",
            "description": "New milestone deadline",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isKey",
            "in": "body",
            "description": "Specifies if this is a key milestone or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "New milestone status (\"Open\" or \"Closed\")",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Open",
                "Closed"
              ],
              "description": "[0 - Open, 1 - Closed]"
            }
          },
          {
            "name": "isNotify",
            "in": "body",
            "description": "Specifies whether to remind me 48 hours before the milestone due date or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "New milestone description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectID",
            "in": "body",
            "description": "New project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responsible",
            "in": "body",
            "description": "New milestone responsible",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "notifyResponsible",
            "in": "body",
            "description": "Specifies whether to notify responsible about the milestone actions or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated milestone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilestoneWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "project/Milestones"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a milestone",
        "description": "Deletes a milestone with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Milestone ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted milestone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilestoneWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/milestone/{id:[0-9]+}/task": {
      "get": {
        "tags": [
          "project/Milestones"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get milestone tasks",
        "description": "Returns a list of all the tasks from a milestone with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Milestone ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/milestone/{id:[0-9]+}/status": {
      "put": {
        "tags": [
          "project/Milestones"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a milestone status",
        "description": "Updates a status of a milestone with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Milestone ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "New milestone status (\"Open\" or \"Closed\")",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Open",
                "Closed"
              ],
              "description": "[0 - Open, 1 - Closed]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated milestone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilestoneWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/time/filter": {
      "get": {
        "tags": [
          "project/Time"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get filtered task time",
        "description": "Returns a list with the detailed information about all the task time spent matching the filter parameters specified in the request.",
        "parameters": [
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "myProjects",
            "in": "body",
            "description": "Specifies whether to return task time only for my projects or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "milestone",
            "in": "body",
            "description": "Milestone ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "myMilestones",
            "in": "body",
            "description": "Specifies whether to return task time only for my milestones or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "tag",
            "in": "body",
            "description": "Project tag",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "departament",
            "in": "body",
            "description": "Departament GUID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "participant",
            "in": "body",
            "description": "Participant GUID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "createdStart",
            "in": "body",
            "description": "The earliest date of task creation",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdStop",
            "in": "body",
            "description": "The latest date of task creation",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastId",
            "in": "body",
            "description": "Last spent time ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "Payment status (\"NotChargeable\", \"NotBilled\", or \"Billed\")",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of spent time",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/time/filter/total": {
      "get": {
        "tags": [
          "project/Time"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get filtered total task time",
        "description": "Returns the total time spent matching the filter parameters specified in the request.",
        "parameters": [
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "myProjects",
            "in": "body",
            "description": "Specifies whether to return task time only for my projects or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "milestone",
            "in": "body",
            "description": "Milestone ID",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "myMilestones",
            "in": "body",
            "description": "Specifies whether to return task time only for my milestones or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "tag",
            "in": "body",
            "description": "Project tag",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "departament",
            "in": "body",
            "description": "Departament GUID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "participant",
            "in": "body",
            "description": "Participant GUID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "createdStart",
            "in": "body",
            "description": "The earliest date of task creation",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdStop",
            "in": "body",
            "description": "The latest date of task creation",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastId",
            "in": "body",
            "description": "Last spent time ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "Payment status (\"NotChargeable\", \"NotBilled\", or \"Billed\")",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Total spent time",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/task/{taskid:[0-9]+}/time": {
      "get": {
        "tags": [
          "project/Time"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get task time",
        "description": "Returns the time spent on the task with the ID specified in the request.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task time",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "project/Time"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add task time",
        "description": "Adds the time to the selected task with the time parameters specified in the request.",
        "parameters": [
          {
            "name": "taskid",
            "in": "body",
            "description": "Task ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "note",
            "in": "body",
            "description": "Time note",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "body",
            "description": "Date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "personId",
            "in": "body",
            "description": "Person ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "hours",
            "in": "body",
            "description": "Spent hours",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "projectId",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created time",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/time/{timeid:[0-9]+}": {
      "put": {
        "tags": [
          "project/Time"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update task time",
        "description": "Updates the time for the selected task with the time parameters specified in the request.",
        "parameters": [
          {
            "name": "timeid",
            "in": "body",
            "description": "Time ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "note",
            "in": "body",
            "description": "New time note",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "body",
            "description": "New date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "personId",
            "in": "body",
            "description": "New person ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "hours",
            "in": "body",
            "description": "New spent hours",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated time",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/time/times/status": {
      "put": {
        "tags": [
          "project/Time"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the time payment status",
        "description": "Updates the time payment status with the parameters specified in the request.",
        "parameters": [
          {
            "name": "timeids",
            "in": "body",
            "description": "Spent time IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "New payment status (\"NotChargeable\", \"NotBilled\", or \"Billed\")",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "NotChargeable",
                "NotBilled",
                "Billed"
              ],
              "description": "[0 - NotChargeable, 1 - NotBilled, 2 - Billed]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated time",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/time/times/remove": {
      "delete": {
        "tags": [
          "project/Time"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete task time",
        "description": "Deletes the time from the tasks with the IDs specified in the request.",
        "parameters": [
          {
            "name": "timeids",
            "in": "body",
            "description": "Spent time IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted time",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/settings": {
      "put": {
        "tags": [
          "project/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the project settings",
        "description": "Updates the project settings with the parameters specified in the request.",
        "parameters": [
          {
            "name": "everebodyCanCreate",
            "in": "body",
            "description": "Specifies if all the portal users can create projects or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hideEntitiesInPausedProjects",
            "in": "body",
            "description": "Specifies if the entities will be hidden in the paused projects or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "startModule",
            "in": "body",
            "description": "Module type: Projects, Tasks, Discussions, TimeTracking",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "folderId",
            "in": "body",
            "description": "Folder ID",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated project settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectsCommonSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "project/Settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the project settings",
        "description": "Returns the common project settings.",
        "responses": {
          "200": {
            "description": "Project common settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectsCommonSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/status": {
      "post": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a task status",
        "description": "Creates a task status specified in the request.",
        "parameters": [
          {
            "name": "status",
            "in": "body",
            "description": "Task status",
            "schema": {
              "$ref": "#/components/schemas/CustomTaskStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomTaskStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a task status",
        "description": "Updates a task status with a value specified in the request.",
        "parameters": [
          {
            "name": "newStatus",
            "in": "body",
            "description": "New task status",
            "schema": {
              "$ref": "#/components/schemas/CustomTaskStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated task status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomTaskStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get task statuses",
        "description": "Returns all the task statuses.",
        "responses": {
          "200": {
            "description": "Task statuses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomTaskStatus"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/statuses": {
      "put": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update task statuses",
        "description": "Updates the task statuses with the values specified in the request.",
        "parameters": [
          {
            "name": "statuses",
            "in": "body",
            "description": "New task statuses",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CustomTaskStatus"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated task statuses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomTaskStatus"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/status/{id}": {
      "delete": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a task status",
        "description": "Deletes a task status with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task status ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomTaskStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/message/filter": {
      "get": {
        "tags": [
          "project/Discussions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get filtered messages",
        "description": "Returns a list with the detailed information about all the messages matching the filter parameters specified in the request.",
        "parameters": [
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tag",
            "in": "body",
            "description": "Project tag",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "departament",
            "in": "body",
            "description": "Departament GUID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "participant",
            "in": "body",
            "description": "Participant GUID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "createdStart",
            "in": "body",
            "description": "Minimum value of message creation date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdStop",
            "in": "body",
            "description": "Maximum value of message creation date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastId",
            "in": "body",
            "description": "Last message ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "myProjects",
            "in": "body",
            "description": "Specifies whether to return messages only from my projects or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "follow",
            "in": "body",
            "description": "Specifies whether to return messages only from followed discussions or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "Message status (\"Open\" or \"Archived\")",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{projectid:[0-9]+}/message": {
      "get": {
        "tags": [
          "project/Discussions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get messages",
        "description": "Returns a list of all the discussion messages within a project with the ID specified in the request.",
        "parameters": [
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "project/Discussions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a message",
        "description": "Adds a message to the selected discussion within a project with the ID specified in the request.",
        "parameters": [
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "Discussion title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "Message text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "participants",
            "in": "body",
            "description": "User IDs (GUIDs) separated with ','",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notify",
            "in": "body",
            "description": "Specifies whether to notify participants about a message or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/message/{messageid:[0-9]+}": {
      "put": {
        "tags": [
          "project/Discussions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a message",
        "description": "Updates the selected discussion message from a project with the ID specified in the request.",
        "parameters": [
          {
            "name": "messageid",
            "in": "body",
            "description": "Message ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "Discussion title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "New message text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "participants",
            "in": "body",
            "description": "New user IDs (GUIDs) separated with ','",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notify",
            "in": "body",
            "description": "Specifies whether to notify participants about a message or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "project/Discussions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a message",
        "description": "Deletes a message with the ID specified in the request from a project discussion.",
        "parameters": [
          {
            "name": "messageid",
            "in": "body",
            "description": "Message ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "project/Discussions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a message",
        "description": "Returns the detailed information about a discussion message with the ID specified in the request.",
        "parameters": [
          {
            "name": "messageid",
            "in": "body",
            "description": "Message ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/message/{messageid:[0-9]+}/status": {
      "put": {
        "tags": [
          "project/Discussions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a message status",
        "description": "Updates the selected message status.",
        "parameters": [
          {
            "name": "messageid",
            "in": "body",
            "description": "Message ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "New message status (\"Open\" or \"Archived\")",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Open",
                "Archived"
              ],
              "description": "[0 - Open, 1 - Archived]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/message/{messageid:[0-9]+}/files": {
      "get": {
        "tags": [
          "project/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get message files",
        "description": "Returns the detailed information about files attached to the discussion message with the ID specified in the request.",
        "parameters": [
          {
            "name": "messageid",
            "in": "body",
            "description": "Message ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of message files",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "project/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Upload files to the message",
        "description": "Uploads files specified in the request to the selected discussion message.",
        "parameters": [
          {
            "name": "messageid",
            "in": "body",
            "description": "Message ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "files",
            "in": "body",
            "description": "File IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "project/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Detach a file from a message",
        "description": "Detaches the selected file from the discussion message with the ID specified in the request.",
        "parameters": [
          {
            "name": "messageid",
            "in": "body",
            "description": "Message ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileid",
            "in": "body",
            "description": "File ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/message": {
      "get": {
        "tags": [
          "project/Discussions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get recent messages",
        "description": "Returns a list of the recent discussion messages from a project with the ID specified in the request.",
        "responses": {
          "200": {
            "description": "List of recent messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/message/{messageid:[0-9]+}/comment": {
      "get": {
        "tags": [
          "project/Discussions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get message comments",
        "description": "Returns a list of the discussion message comments from a project with the ID specified in the request.",
        "parameters": [
          {
            "name": "messageid",
            "in": "body",
            "description": "Message ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message comments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommentWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "project/Discussions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a message comment",
        "description": "Adds a comment to the selected discussion message with the text specified in the request. The parent comment ID can be also selected.",
        "parameters": [
          {
            "name": "messageid",
            "in": "body",
            "description": "Message ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "content",
            "in": "body",
            "description": "Comment text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentId",
            "in": "body",
            "description": "Parent comment ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/message/{messageid:[0-9]+}/subscribe": {
      "put": {
        "tags": [
          "project/Discussions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Subscribe to discussion",
        "description": "Subscribes to the notifications about the actions performed in the discussion with the selected message.",
        "parameters": [
          {
            "name": "messageid",
            "in": "body",
            "description": "Message ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Discussion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "project/Discussions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Check the discussion subscription",
        "description": "Checks subscription to the notifications about the actions performed in the discussion with the selected message.",
        "parameters": [
          {
            "name": "messageid",
            "in": "body",
            "description": "Message ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean value: true - subscibed, false - unsubscribed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/message/{messageid:[0-9]+}/subscribes": {
      "get": {
        "tags": [
          "project/Discussions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get discussion subscribers",
        "description": "Returns a list of all the subscribers to the discussion with the selected message.",
        "parameters": [
          {
            "name": "messageid",
            "in": "body",
            "description": "Message ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeWraperFull"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/message/discussion/preview": {
      "post": {
        "tags": [
          "project/Discussions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a message preview",
        "description": "Returns a preview of the discussion message.",
        "parameters": [
          {
            "name": "htmltext",
            "in": "body",
            "description": "Message text in the HTML format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message preview",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/report/create": {
      "post": {
        "tags": [
          "project/Reports"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Check the report data",
        "description": "Checks the report data by the URI specified in the request.",
        "parameters": [
          {
            "name": "uri",
            "in": "body",
            "description": "Report URI",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportState"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/report/status": {
      "get": {
        "tags": [
          "project/Reports"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a report status",
        "description": "Returns a report status.",
        "responses": {
          "200": {
            "description": "Report status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportState"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/report/terminate": {
      "get": {
        "tags": [
          "project/Reports"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Terminate the reporting process",
        "description": "Terminates the reporting process."
      }
    },
    "/api/2.0/project/report": {
      "post": {
        "tags": [
          "project/Reports"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a report template",
        "description": "Creates a project report template with the parameters specified in the request. Most of the parameters are optional and depend on the report type selected.",
        "parameters": [
          {
            "name": "name",
            "in": "body",
            "description": "Report name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "in": "body",
            "description": "Report generation period: Day/Week/Month",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "periodItem",
            "in": "body",
            "description": "Period item: day of the week (for a weekly report, starting with Sunday), day of the month (for a monthly report)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hour",
            "in": "body",
            "description": "Report sending time (in hours)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "autoGenerated",
            "in": "body",
            "description": "Specifies if a report will be automatically generated or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "reportType",
            "in": "body",
            "description": "Report type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "MilestonesExpired",
                "MilestonesNearest",
                "UsersWithoutActiveTasks",
                "ProjectsWithoutActiveMilestones",
                "ProjectsWithoutActiveTasks",
                "UsersActivity",
                "UsersWorkload",
                "ProjectsList",
                "TimeSpend",
                "TasksByProjects",
                "TasksByUsers",
                "TasksExpired",
                "EmptyReport"
              ],
              "description": "[0 - MilestonesExpired, 1 - MilestonesNearest, 2 - UsersWithoutActiveTasks, 3 - ProjectsWithoutActiveMilestones, 4 - ProjectsWithoutActiveTasks, 5 - UsersActivity, 6 - UsersWorkload, 7 - ProjectsList, 8 - TimeSpend, 9 - TasksByProjects, 10 - TasksByUsers, 11 - TasksExpired, 12 - EmptyReport]"
            }
          },
          {
            "name": "tag",
            "in": "body",
            "description": "Report tag",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "project",
            "in": "body",
            "description": "Report project",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "Task status",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "departament",
            "in": "body",
            "description": "Department/Group GUID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "body",
            "description": "User GUID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "reportTimeInterval",
            "in": "body",
            "description": "Report time interval",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Absolute",
                "Relative",
                "Today",
                "Yesterday",
                "Tomorrow",
                "CurrWeek",
                "PrevWeek",
                "NextWeek",
                "CurrMonth",
                "PrevMonth",
                "NextMonth",
                "CurrYear",
                "PrevYear",
                "NextYear"
              ],
              "description": "[0 - Absolute, 1 - Relative, 2 - Today, 3 - Yesterday, 4 - Tomorrow, 5 - CurrWeek, 6 - PrevWeek, 7 - NextWeek, 8 - CurrMonth, 9 - PrevMonth, 10 - NextMonth, 11 - CurrYear, 12 - PrevYear, 13 - NextYear]"
            }
          },
          {
            "name": "fromDate",
            "in": "body",
            "description": "Report period start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "in": "body",
            "description": "Report period end date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewType",
            "in": "body",
            "description": "Report view type: by group or by project",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noResponsible",
            "in": "body",
            "description": "Specifies if the tasks without responsibles will be shown or hidden",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isShowAverageTime",
            "in": "body",
            "description": "Specifies if the average time will be shown or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "typeOfShowAverageTime",
            "in": "body",
            "description": "Average time type (All, ClosingProjects, CompletingTasks)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "All",
                "ClosingProjects",
                "CompletingTasks"
              ],
              "description": "[0 - All, 1 - ClosingProjects, 2 - CompletingTasks]"
            }
          },
          {
            "name": "projectAverageCompletingTasks",
            "in": "body",
            "description": "Specifies if the average time of completing tasks will be shown or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project report template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportTemplateWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/report/{reportid:[0-9]+}": {
      "put": {
        "tags": [
          "project/Reports"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a report template",
        "description": "Updates the selected project report template with the parameters specified in the request.",
        "parameters": [
          {
            "name": "reportid",
            "in": "body",
            "description": "Report template ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "body",
            "description": "New report name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "in": "body",
            "description": "New report generation period: Day/Week/Month",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "periodItem",
            "in": "body",
            "description": "New period item: day of the week (for a weekly report, starting with Sunday), day of the month (for a monthly report)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hour",
            "in": "body",
            "description": "New report sending time (in hours)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "autoGenerated",
            "in": "body",
            "description": "Specifies if a report will be automatically generated or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "reportType",
            "in": "body",
            "description": "New report type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "MilestonesExpired",
                "MilestonesNearest",
                "UsersWithoutActiveTasks",
                "ProjectsWithoutActiveMilestones",
                "ProjectsWithoutActiveTasks",
                "UsersActivity",
                "UsersWorkload",
                "ProjectsList",
                "TimeSpend",
                "TasksByProjects",
                "TasksByUsers",
                "TasksExpired",
                "EmptyReport"
              ],
              "description": "[0 - MilestonesExpired, 1 - MilestonesNearest, 2 - UsersWithoutActiveTasks, 3 - ProjectsWithoutActiveMilestones, 4 - ProjectsWithoutActiveTasks, 5 - UsersActivity, 6 - UsersWorkload, 7 - ProjectsList, 8 - TimeSpend, 9 - TasksByProjects, 10 - TasksByUsers, 11 - TasksExpired, 12 - EmptyReport]"
            }
          },
          {
            "name": "tag",
            "in": "body",
            "description": "New report tag",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "project",
            "in": "body",
            "description": "New report project",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "New task status",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "departament",
            "in": "body",
            "description": "New department/group GUID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "body",
            "description": "New user GUID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "reportTimeInterval",
            "in": "body",
            "description": "New report time interval",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Absolute",
                "Relative",
                "Today",
                "Yesterday",
                "Tomorrow",
                "CurrWeek",
                "PrevWeek",
                "NextWeek",
                "CurrMonth",
                "PrevMonth",
                "NextMonth",
                "CurrYear",
                "PrevYear",
                "NextYear"
              ],
              "description": "[0 - Absolute, 1 - Relative, 2 - Today, 3 - Yesterday, 4 - Tomorrow, 5 - CurrWeek, 6 - PrevWeek, 7 - NextWeek, 8 - CurrMonth, 9 - PrevMonth, 10 - NextMonth, 11 - CurrYear, 12 - PrevYear, 13 - NextYear]"
            }
          },
          {
            "name": "fromDate",
            "in": "body",
            "description": "New report period start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "in": "body",
            "description": "New report period end date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewType",
            "in": "body",
            "description": "New view type: by group or by project",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noResponsible",
            "in": "body",
            "description": "Specifies if the tasks without responsibles will be shown or hidden",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated project report template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportTemplateWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "project/Reports"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a report template",
        "description": "Returns a project report template with the ID specified in the request.",
        "parameters": [
          {
            "name": "reportid",
            "in": "body",
            "description": "Report template ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project report template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportTemplateWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "project/Reports"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a report template",
        "description": "Deletes a project report template with the ID specified in the request.",
        "parameters": [
          {
            "name": "reportid",
            "in": "body",
            "description": "Report template ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project report template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportTemplateWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/report/files": {
      "get": {
        "tags": [
          "project/Reports"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get generated reports",
        "description": "Returns the generated report files.",
        "responses": {
          "200": {
            "description": "Generated report files",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/report/files/{fileid:[0-9]+}": {
      "delete": {
        "tags": [
          "project/Reports"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove the generated report",
        "description": "Removes the generated report file with the ID specified in the request.",
        "parameters": [
          {
            "name": "fileid",
            "in": "body",
            "description": "Report file ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Generated report file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportFile"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/": {
      "get": {
        "tags": [
          "project/Projects"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get projects",
        "description": "Returns a list of all the portal projects with the base information about them.",
        "responses": {
          "200": {
            "description": "List of projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "project/Projects"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a project",
        "description": "Creates a new project using all the necessary (title, description, responsible ID, etc) and some optional parameters specified in the request.",
        "parameters": [
          {
            "name": "title",
            "in": "body",
            "description": "Project title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "Project description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responsibleId",
            "in": "body",
            "description": "Project responsible ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "Project tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "private",
            "in": "body",
            "description": "Specifies if this project is private or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "participants",
            "in": "body",
            "description": "Project participants",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "notify",
            "in": "body",
            "description": "Specifies whether to notify a project manager about the project actions or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "tasks",
            "in": "body",
            "description": "Project tasks",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Task"
              }
            }
          },
          {
            "name": "milestones",
            "in": "body",
            "description": "Project milestones",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Milestone"
              }
            }
          },
          {
            "name": "notifyResponsibles",
            "in": "body",
            "description": "Specifies whether to notify responsibles about the project actions or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "project/Projects"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete projects",
        "description": "Deletes the projects with the IDs specified in the request from the portal.",
        "parameters": [
          {
            "name": "projectids",
            "in": "body",
            "description": "List of project IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectWrapperFull"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/@self": {
      "get": {
        "tags": [
          "project/Projects"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get my projects",
        "description": "Returns a list of all the projects in which the current user participates.",
        "responses": {
          "200": {
            "description": "List of projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/@follow": {
      "get": {
        "tags": [
          "project/Projects"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get followed projects",
        "description": "Returns a list of all the projects which the current user is following.",
        "responses": {
          "200": {
            "description": "List of projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{status:(open|paused|closed)}": {
      "get": {
        "tags": [
          "project/Projects"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get projects by status",
        "description": "Returns a list of all the projects with a status specified in the request.",
        "parameters": [
          {
            "name": "status",
            "in": "body",
            "description": "Project status (\"Open\", \"Paused\", or \"Closed\")",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Open",
                "Closed",
                "Paused"
              ],
              "description": "[0 - Open, 1 - Closed, 2 - Paused]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{id:[0-9]+}": {
      "get": {
        "tags": [
          "project/Projects"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a project by ID",
        "description": "Returns the detailed information about a project with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "project/Projects"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a project",
        "description": "Updates the existing project using all the parameters (project ID, title, description, responsible ID, etc) specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "New project title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "New project description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responsibleId",
            "in": "body",
            "description": "New project responsible ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "New project tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "participants",
            "in": "body",
            "description": "New project participants",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "New project status (\"Open\", \"Paused\", or \"Closed\")",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "private",
            "in": "body",
            "description": "Specifies if this project is private or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "notify",
            "in": "body",
            "description": "Specifies whether to notify a project manager about the project actions or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "project/Projects"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a project",
        "description": "Deletes a project with the ID specified in the request from the portal.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/filter": {
      "get": {
        "tags": [
          "project/Projects"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get filtered projects",
        "description": "Returns a list of all the portal projects filtered by project title, status, participant ID, and other parameters specified in the request.",
        "parameters": [
          {
            "name": "tag",
            "in": "body",
            "description": "Project tag",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "Project status (\"Open\", \"Paused\", or \"Closed\")",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "participant",
            "in": "body",
            "description": "Project participant GUID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "manager",
            "in": "body",
            "description": "Project manager GUID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "departament",
            "in": "body",
            "description": "Project department",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "follow",
            "in": "body",
            "description": "Specifies if the current user is following this project or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectWrapperFull"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{id:[0-9]+}/@search/{query}": {
      "get": {
        "tags": [
          "project/Projects"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Search in a project",
        "description": "Returns the search results for a project containing the words/phrases matching the query specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "query",
            "in": "path",
            "description": "Search query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/@search/{query}": {
      "get": {
        "tags": [
          "project/Projects"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Search projects",
        "description": "Returns a list of all the projects matching the query specified in the request.",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "Search query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/withSecurity": {
      "post": {
        "tags": [
          "project/Projects"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Create a project with team security",
        "description": "Creates a new project with team security using all the necessary (title, description, responsible ID, etc) and some optional parameters specified in the request.",
        "parameters": [
          {
            "name": "title",
            "in": "body",
            "description": "Project title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "Project description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responsibleId",
            "in": "body",
            "description": "Project responsible ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "Project tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "private",
            "in": "body",
            "description": "Specifies if this project is private or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "participants",
            "in": "body",
            "description": "Project participants with the information about their security rights",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Participant"
              }
            }
          },
          {
            "name": "notify",
            "in": "body",
            "description": "Specifies whether to notify a project manager about the project actions or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "tasks",
            "in": "body",
            "description": "Project tasks",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Task"
              }
            }
          },
          {
            "name": "milestones",
            "in": "body",
            "description": "Project milestones",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Milestone"
              }
            }
          },
          {
            "name": "notifyResponsibles",
            "in": "body",
            "description": "Specifies whether to notify responsibles about the project actions or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{id:[0-9]+}/withSecurityInfo": {
      "put": {
        "tags": [
          "project/Projects"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a project with team security",
        "description": "Updates the existing project with team security using all the parameters (project ID, title, description, responsible ID, etc) specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "New project title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "New project description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responsibleId",
            "in": "body",
            "description": "New project responsible ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "New project tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "participants",
            "in": "body",
            "description": "New project participants with the information about their security rights",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Participant"
              }
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "New project status (\"Open\", \"Paused\", or \"Closed\")",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "private",
            "in": "body",
            "description": "Specifies if this project is private or not",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "notify",
            "in": "body",
            "description": "Specifies whether to notify a project manager about the project actions or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{id:[0-9]+}/status": {
      "put": {
        "tags": [
          "project/Projects"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a project status",
        "description": "Updates a status of a project with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "New project status (\"Open\", \"Paused\", or \"Closed\")",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Open",
                "Closed",
                "Paused"
              ],
              "description": "[0 - Open, 1 - Closed, 2 - Paused]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{projectid:[0-9]+}/follow": {
      "put": {
        "tags": [
          "project/Projects"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Project subscription",
        "description": "Subscribes to or unsubscribes from the notifications about the actions performed in the project with the ID specified in the request.",
        "parameters": [
          {
            "name": "projectId",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{id:[0-9]+}/tag": {
      "put": {
        "tags": [
          "project/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a project tag",
        "description": "Updates a tag from the selected project with a new tag specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "New project tag",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{id:[0-9]+}/tags": {
      "put": {
        "tags": [
          "project/Tags"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update project tags",
        "description": "Updates the tags from the selected project with the new tags specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tags",
            "in": "body",
            "description": "New project tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectWrapperFull"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{id:[0-9]+}/time": {
      "get": {
        "tags": [
          "project/Time"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get project time",
        "description": "Returns the detailed information about the time spent on the project with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of project time",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{id:[0-9]+}/time/total": {
      "get": {
        "tags": [
          "project/Time"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get total project time",
        "description": "Returns the total time spent on the project with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project time",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{id:[0-9]+}/milestone": {
      "post": {
        "tags": [
          "project/Milestones"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a milestone",
        "description": "Adds a new milestone using the parameters (project ID, milestone title, deadline, etc) specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "Milestone title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deadline",
            "in": "body",
            "description": "Milestone deadline",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isKey",
            "in": "body",
            "description": "Specifies if this is a key milestone or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isNotify",
            "in": "body",
            "description": "Specifies whether to remind me 48 hours before the milestone due date or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "Milestone description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responsible",
            "in": "body",
            "description": "Milestone responsible",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "notifyResponsible",
            "in": "body",
            "description": "Specifies whether to notify responsible about the milestone actions or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Added milestone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilestoneWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "project/Milestones"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get milestones by project ID",
        "description": "Returns a list of all the milestones from a project with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of milestones",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MilestoneWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{id:[0-9]+}/milestone/{status:(open|closed|late|disable)}": {
      "get": {
        "tags": [
          "project/Milestones"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get milestones by milestone status",
        "description": "Returns a list of all the milestones with the selected status from a project with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "Milestone status (\"Open\" or \"Closed\")",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Open",
                "Closed"
              ],
              "description": "[0 - Open, 1 - Closed]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of milestones",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MilestoneWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{projectid:[0-9]+}/team": {
      "get": {
        "tags": [
          "project/Teams"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a project team",
        "description": "Returns a list of all the users participating in the project with the ID specified in the request.",
        "parameters": [
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of team members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParticipantWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "project/Teams"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a user to the team",
        "description": "Adds a user with the ID specified in the request to the selected project team.",
        "parameters": [
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "body",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of team members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParticipantWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "project/Teams"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Remove a user from the team",
        "description": "Removes a user with the ID specified in the request from the selected project team.",
        "parameters": [
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "body",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of team members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParticipantWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "project/Teams"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a project team",
        "description": "Updates a project team with the user IDs specified in the request.",
        "parameters": [
          {
            "name": "projectId",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "participants",
            "in": "body",
            "description": "List of user IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "notify",
            "in": "body",
            "description": "Specifies whether to notify a project team members that they are added to the project or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Number of project participants",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParticipantWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{projectid:[0-9]+}/teamExcluded": {
      "get": {
        "tags": [
          "project/Teams"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get current and excluded team members",
        "description": "Returns a list of all the current and excluded project team members.",
        "parameters": [
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of team members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParticipantWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/team": {
      "post": {
        "tags": [
          "project/Teams"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get team members of projects",
        "description": "Returns a list of all the users participating in the projects with the ID specified in the request.",
        "parameters": [
          {
            "name": "ids",
            "in": "body",
            "description": "List of project IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of team members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParticipantWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{projectid:[0-9]+}/team/security": {
      "put": {
        "tags": [
          "project/Teams"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set team security",
        "description": "Sets the security rights to the user with the ID specified in the request from the selected project.",
        "parameters": [
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "body",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "security",
            "in": "body",
            "description": "Security rights",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "Messages",
                "Tasks",
                "Files",
                "Milestone",
                "Contacts"
              ],
              "description": "[0 - None, 1 - Messages, 2 - Tasks, 4 - Files, 8 - Milestone, 16 - Contacts]"
            }
          },
          {
            "name": "visible",
            "in": "body",
            "description": "Specifies if the user security rights will be visible or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of team members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParticipantWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{projectid:[0-9]+}/task": {
      "get": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get tasks",
        "description": "Returns a list of all the tasks from a project with the ID specified in the request.",
        "parameters": [
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a task",
        "description": "Adds a task to the selected project with the parameters (responsible user ID, task description, deadline time, etc) specified in the request.",
        "parameters": [
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "description",
            "in": "body",
            "description": "Task description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deadline",
            "in": "body",
            "description": "Task deadline time",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "priority",
            "in": "body",
            "description": "Task priority (\"Low\", \"Normal\", or \"High\")",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Normal",
                "High",
                "Low"
              ],
              "description": "[0 - Normal, 1 - High, -1 - Low]"
            }
          },
          {
            "name": "title",
            "in": "body",
            "description": "Task title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "milestoneid",
            "in": "body",
            "description": "Task milestone ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responsibles",
            "in": "body",
            "description": "List of responsibles",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "notify",
            "in": "body",
            "description": "Specifies whether to notify the responsibles about the task actions or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "startDate",
            "in": "body",
            "description": "Task start date",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Added task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{projectid:[0-9]+}/task/{messageid:[0-9]+}": {
      "post": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a task by message ID",
        "description": "Adds a task to the selected project by the message ID specified in the request.",
        "parameters": [
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "messageid",
            "in": "body",
            "description": "Message ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Added task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{projectid:[0-9]+}/task/{status:(notaccept|open|closed|disable|unclassified|notinmilestone)}": {
      "get": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get tasks by status",
        "description": "Returns a list of all the tasks with the selected status in the project with the ID specified in the request.",
        "parameters": [
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "Task status",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Open",
                "Closed"
              ],
              "description": "[1 - Open, 2 - Closed]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{projectid:[0-9]+}/task/@self/{status:(notaccept|open|closed|disable|unclassified|notinmilestone)}": {
      "get": {
        "tags": [
          "project/Tasks"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get my tasks by status",
        "description": "Returns a list of all the tasks for the current user with the selected status in the project with the ID specified in the request.",
        "parameters": [
          {
            "name": "projectid",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "body",
            "description": "Task status",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Open",
                "Closed"
              ],
              "description": "[1 - Open, 2 - Closed]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{id:[0-9]+}/files": {
      "get": {
        "tags": [
          "project/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get project files",
        "description": "Returns the detailed list of all the files and folders for the project with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project files",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderContentWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/project/{entityID:[0-9]+}/entityfiles": {
      "get": {
        "tags": [
          "project/Files"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get entity files",
        "description": "Returns a list of all the files for the entity with the type and ID specified in the request.",
        "parameters": [
          {
            "name": "entityType",
            "in": "body",
            "description": "Entity type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "Project",
                "Milestone",
                "Task",
                "SubTask",
                "Team",
                "Comment",
                "Message",
                "File",
                "TimeSpend"
              ],
              "description": "[0 - Project, 1 - Milestone, 2 - Task, 3 - SubTask, 4 - Team, 5 - Comment, 6 - Message, 7 - File, 8 - TimeSpend]"
            }
          },
          {
            "name": "entityID",
            "in": "body",
            "description": "Entity ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of files",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/SampleApi/create": {
      "post": {
        "tags": [
          "SampleApi"
        ],
        "summary": "Create a module",
        "description": "Creates a new module for the current portal.",
        "parameters": [
          {
            "name": "value",
            "in": "body",
            "description": "Module name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created module",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleClass"
                }
              }
            }
          }
        }
      }
    },
    "/api/2.0/SampleApi/read/{id:[0-9]+}": {
      "get": {
        "tags": [
          "SampleApi"
        ],
        "summary": "Get a module",
        "description": "Returns a module with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Module ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Module",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleClass"
                }
              }
            }
          }
        }
      }
    },
    "/api/2.0/SampleApi/read": {
      "get": {
        "tags": [
          "SampleApi"
        ],
        "summary": "Get modules",
        "description": "Returns all the portal modules.",
        "responses": {
          "200": {
            "description": "List of portal modules",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SampleClass"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/2.0/SampleApi/update": {
      "put": {
        "tags": [
          "SampleApi"
        ],
        "summary": "Update a module",
        "description": "Updates the selected module with a name specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Module ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "value",
            "in": "body",
            "description": "New module name",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/2.0/SampleApi/delete/{id:[0-9]+}": {
      "delete": {
        "tags": [
          "SampleApi"
        ],
        "summary": "Delete a module",
        "description": "Deletes a module with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Module ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ]
      }
    },
    "/api/2.0/security//audit/login/last": {
      "get": {
        "tags": [
          "security/Login history"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get login history",
        "description": "Returns all the latest user login activity including successful logins and failed attempts with an indication of reasons.",
        "responses": {
          "200": {
            "description": "List of login events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LoginEventWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/security//audit/events/last": {
      "get": {
        "tags": [
          "security/Audit trail data"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get audit trail data",
        "description": "Returns a list of the latest changes (creation, modification, deletion, etc.) made by users to the entities (tasks, opportunities, files, etc.) on the portal.",
        "responses": {
          "200": {
            "description": "List of audit trail data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditEventWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/security//audit/login/filter": {
      "get": {
        "tags": [
          "security/Login history"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get filtered login events",
        "description": "Returns a list of the login events by the parameters specified in the request.",
        "parameters": [
          {
            "name": "userId",
            "in": "body",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "action",
            "in": "body",
            "description": "Action",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "LoginSuccess",
                "LoginSuccessViaSocialAccount",
                "LoginFailInvalidCombination",
                "LoginFailSocialAccountNotFound",
                "LoginFailDisabledProfile",
                "LoginFail",
                "Logout",
                "LoginSuccessViaSms",
                "LoginFailViaSms",
                "LoginFailIpSecurity",
                "LoginSuccessViaApi",
                "LoginSuccessViaSocialApp",
                "LoginSuccessViaApiSms",
                "LoginFailViaApi",
                "LoginFailViaApiSms",
                "LoginSuccessViaSSO",
                "SessionStarted",
                "SessionCompleted",
                "LoginFailViaSSO",
                "LoginSuccessViaApiSocialAccount",
                "LoginFailViaApiSocialAccount",
                "LoginSuccesViaTfaApp",
                "LoginFailViaTfaApp",
                "LoginFailBruteForce",
                "LoginSuccessViaApiTfa",
                "LoginFailViaApiTfa",
                "LoginFailRecaptcha",
                "ProjectCreated",
                "ProjectCreatedFromTemplate",
                "ProjectUpdated",
                "ProjectUpdatedStatus",
                "ProjectFollowed",
                "ProjectUnfollowed",
                "ProjectDeleted",
                "ProjectDeletedMember",
                "ProjectUpdatedTeam",
                "ProjectUpdatedMemberRights",
                "ProjectLinkedCompany",
                "ProjectUnlinkedCompany",
                "ProjectLinkedPerson",
                "ProjectUnlinkedPerson",
                "ProjectLinkedContacts",
                "MilestoneCreated",
                "MilestoneUpdated",
                "MilestoneUpdatedStatus",
                "MilestoneDeleted",
                "TaskCreated",
                "TaskCreatedFromDiscussion",
                "TaskUpdated",
                "TaskUpdatedStatus",
                "TaskMovedToMilestone",
                "TaskUnlinkedMilestone",
                "TaskUpdatedFollowing",
                "TaskAttachedFiles",
                "TaskDetachedFile",
                "TasksLinked",
                "TasksUnlinked",
                "TaskDeleted",
                "TaskCommentCreated",
                "TaskCommentUpdated",
                "TaskCommentDeleted",
                "SubtaskCreated",
                "SubtaskUpdated",
                "SubtaskUpdatedStatus",
                "SubtaskDeleted",
                "DiscussionCreated",
                "DiscussionUpdated",
                "DiscussionUpdatedFollowing",
                "DiscussionAttachedFiles",
                "DiscussionDetachedFile",
                "DiscussionDeleted",
                "DiscussionCommentCreated",
                "DiscussionCommentUpdated",
                "DiscussionCommentDeleted",
                "TaskTimeCreated",
                "TaskTimeUpdated",
                "TaskTimesUpdatedStatus",
                "TaskTimesDeleted",
                "ReportTemplateCreated",
                "ReportTemplateUpdated",
                "ReportTemplateDeleted",
                "ProjectTemplateCreated",
                "ProjectTemplateUpdated",
                "ProjectTemplateDeleted",
                "ProjectsImportedFromBasecamp",
                "SubtaskMoved",
                "CompanyCreated",
                "CompanyUpdated",
                "CompanyUpdatedPrincipalInfo",
                "CompanyUpdatedPhoto",
                "CompanyUpdatedTemperatureLevel",
                "CompanyUpdatedPersonsTemperatureLevel",
                "CompanyCreatedTag",
                "CompanyCreatedPersonsTag",
                "CompanyDeletedTag",
                "CompanyCreatedHistoryEvent",
                "CompanyDeletedHistoryEvent",
                "CompanyLinkedPerson",
                "CompanyUnlinkedPerson",
                "CompanyLinkedProject",
                "CompanyUnlinkedProject",
                "CompanyAttachedFiles",
                "CompaniesMerged",
                "CompanyDeleted",
                "PersonCreated",
                "PersonsCreated",
                "PersonUpdated",
                "PersonUpdatedPrincipalInfo",
                "PersonUpdatedPhoto",
                "PersonUpdatedTemperatureLevel",
                "PersonUpdatedCompanyTemperatureLevel",
                "PersonCreatedTag",
                "PersonCreatedCompanyTag",
                "PersonDeletedTag",
                "PersonCreatedHistoryEvent",
                "PersonDeletedHistoryEvent",
                "PersonLinkedProject",
                "PersonUnlinkedProject",
                "PersonAttachedFiles",
                "PersonsMerged",
                "PersonDeleted",
                "ContactsDeleted",
                "CrmTaskCreated",
                "ContactsCreatedCrmTasks",
                "CrmTaskUpdated",
                "CrmTaskOpened",
                "CrmTaskClosed",
                "CrmTaskDeleted",
                "OpportunityCreated",
                "OpportunityUpdated",
                "OpportunityUpdatedStage",
                "OpportunityCreatedTag",
                "OpportunityDeletedTag",
                "OpportunityCreatedHistoryEvent",
                "OpportunityDeletedHistoryEvent",
                "OpportunityLinkedCompany",
                "OpportunityUnlinkedCompany",
                "OpportunityLinkedPerson",
                "OpportunityUnlinkedPerson",
                "OpportunityAttachedFiles",
                "OpportunityOpenedAccess",
                "OpportunityRestrictedAccess",
                "OpportunityDeleted",
                "OpportunitiesDeleted",
                "InvoiceCreated",
                "InvoiceUpdated",
                "InvoicesUpdatedStatus",
                "InvoiceDeleted",
                "InvoicesDeleted",
                "CaseCreated",
                "CaseUpdated",
                "CaseOpened",
                "CaseClosed",
                "CaseCreatedTag",
                "CaseDeletedTag",
                "CaseCreatedHistoryEvent",
                "CaseDeletedHistoryEvent",
                "CaseLinkedCompany",
                "CaseUnlinkedCompany",
                "CaseLinkedPerson",
                "CaseUnlinkedPerson",
                "CaseAttachedFiles",
                "CaseOpenedAccess",
                "CaseRestrictedAccess",
                "CaseDeleted",
                "CasesDeleted",
                "CrmSmtpSettingsUpdated",
                "CrmTestMailSent",
                "CrmDefaultCurrencyUpdated",
                "CrmAllDataExported",
                "ContactTemperatureLevelCreated",
                "ContactTemperatureLevelUpdated",
                "ContactTemperatureLevelUpdatedColor",
                "ContactTemperatureLevelsUpdatedOrder",
                "ContactTemperatureLevelDeleted",
                "ContactTemperatureLevelSettingsUpdated",
                "ContactTypeCreated",
                "ContactTypeUpdated",
                "ContactTypesUpdatedOrder",
                "ContactTypeDeleted",
                "InvoiceItemCreated",
                "InvoiceItemUpdated",
                "InvoiceItemDeleted",
                "InvoiceItemsDeleted",
                "InvoiceTaxCreated",
                "InvoiceTaxUpdated",
                "InvoiceTaxDeleted",
                "OrganizationProfileUpdatedCompanyName",
                "OrganizationProfileUpdatedInvoiceLogo",
                "OrganizationProfileUpdatedAddress",
                "InvoiceNumberFormatUpdated",
                "ContactUserFieldCreated",
                "ContactUserFieldUpdated",
                "ContactUserFieldsUpdatedOrder",
                "ContactUserFieldDeleted",
                "CompanyUserFieldCreated",
                "CompanyUserFieldUpdated",
                "CompanyUserFieldsUpdatedOrder",
                "CompanyUserFieldDeleted",
                "PersonUserFieldCreated",
                "PersonUserFieldUpdated",
                "PersonUserFieldsUpdatedOrder",
                "PersonUserFieldDeleted",
                "OpportunityUserFieldCreated",
                "OpportunityUserFieldUpdated",
                "OpportunityUserFieldsUpdatedOrder",
                "OpportunityUserFieldDeleted",
                "CaseUserFieldCreated",
                "CaseUserFieldUpdated",
                "CaseUserFieldsUpdatedOrder",
                "CaseUserFieldDeleted",
                "HistoryEventCategoryCreated",
                "HistoryEventCategoryUpdated",
                "HistoryEventCategoryUpdatedIcon",
                "HistoryEventCategoriesUpdatedOrder",
                "HistoryEventCategoryDeleted",
                "CrmTaskCategoryCreated",
                "CrmTaskCategoryUpdated",
                "CrmTaskCategoryUpdatedIcon",
                "CrmTaskCategoriesUpdatedOrder",
                "CrmTaskCategoryDeleted",
                "OpportunityStageCreated",
                "OpportunityStageUpdated",
                "OpportunityStageUpdatedColor",
                "OpportunityStagesUpdatedOrder",
                "OpportunityStageDeleted",
                "ContactsCreatedTag",
                "ContactsDeletedTag",
                "OpportunitiesCreatedTag",
                "OpportunitiesDeletedTag",
                "CasesCreatedTag",
                "CasesDeletedTag",
                "ContactsTagSettingsUpdated",
                "WebsiteContactFormUpdatedKey",
                "ContactsImportedFromCSV",
                "CrmTasksImportedFromCSV",
                "OpportunitiesImportedFromCSV",
                "CasesImportedFromCSV",
                "ContactsExportedToCsv",
                "CrmTasksExportedToCsv",
                "OpportunitiesExportedToCsv",
                "CasesExportedToCsv",
                "CompanyCreatedWithWebForm",
                "PersonCreatedWithWebForm",
                "CompanyDetachedFile",
                "PersonDetachedFile",
                "OpportunityDetachedFile",
                "CaseDetachedFile",
                "CurrencyRateUpdated",
                "InvoiceDefaultTermsUpdated",
                "InvoiceDownloaded",
                "CrmSmtpMailSent",
                "UserCreated",
                "GuestCreated",
                "UserCreatedViaInvite",
                "GuestCreatedViaInvite",
                "UserActivated",
                "GuestActivated",
                "UserUpdated",
                "UserUpdatedLanguage",
                "UserAddedAvatar",
                "UserDeletedAvatar",
                "UserUpdatedAvatarThumbnails",
                "UserLinkedSocialAccount",
                "UserUnlinkedSocialAccount",
                "UserSentActivationInstructions",
                "UserSentEmailChangeInstructions",
                "UserSentPasswordChangeInstructions",
                "UserSentDeleteInstructions",
                "UserUpdatedPassword",
                "UserDeleted",
                "UsersUpdatedType",
                "UsersUpdatedStatus",
                "UsersSentActivationInstructions",
                "UsersDeleted",
                "SentInviteInstructions",
                "UserImported",
                "GuestImported",
                "GroupCreated",
                "GroupUpdated",
                "GroupDeleted",
                "UserUpdatedMobileNumber",
                "UserDataReassigns",
                "UserDataRemoving",
                "UserConnectedTfaApp",
                "UserDisconnectedTfaApp",
                "UserLogoutActiveConnections",
                "UserLogoutActiveConnection",
                "UserLogoutActiveConnectionsForUser",
                "FileCreated",
                "FileRenamed",
                "FileUpdated",
                "FileCreatedVersion",
                "FileDeletedVersion",
                "FileUpdatedRevisionComment",
                "FileLocked",
                "FileUnlocked",
                "FileUpdatedAccess",
                "FileDownloaded",
                "FileDownloadedAs",
                "FileUploaded",
                "FileImported",
                "FileCopied",
                "FileCopiedWithOverwriting",
                "FileMoved",
                "FileMovedWithOverwriting",
                "FileMovedToTrash",
                "FileDeleted",
                "FolderCreated",
                "FolderRenamed",
                "FolderUpdatedAccess",
                "FolderCopied",
                "FolderCopiedWithOverwriting",
                "FolderMoved",
                "FolderMovedWithOverwriting",
                "FolderMovedToTrash",
                "FolderDeleted",
                "ThirdPartyCreated",
                "ThirdPartyUpdated",
                "ThirdPartyDeleted",
                "DocumentsThirdPartySettingsUpdated",
                "DocumentsOverwritingSettingsUpdated",
                "DocumentsUploadingFormatsSettingsUpdated",
                "UserFileUpdated",
                "FileConverted",
                "FileSendAccessLink",
                "DocumentServiceLocationSetting",
                "AuthorizationKeysSetting",
                "FullTextSearchSetting",
                "StartTransferSetting",
                "StartBackupSetting",
                "LicenseKeyUploaded",
                "FileChangeOwner",
                "FileRestoreVersion",
                "DocumentSendToSign",
                "DocumentSignComplete",
                "UserUpdatedEmail",
                "DocumentsStoreForcesave",
                "DocumentsForcesave",
                "StartStorageEncryption",
                "PrivacyRoomEnable",
                "PrivacyRoomDisable",
                "StartStorageDecryption",
                "FileOpenedForChange",
                "FileMarkedAsFavorite",
                "FileRemovedFromFavorite",
                "FolderDownloaded",
                "FileRemovedFromList",
                "FolderRemovedFromList",
                "FileExternalLinkAccessUpdated",
                "TrashEmptied",
                "FileRevisionDownloaded",
                "FileMarkedAsRead",
                "FileReaded",
                "FolderMarkedAsRead",
                "FolderUpdatedAccessFor",
                "FolderMovedFrom",
                "FileUpdatedAccessFor",
                "DocumentsExternalShareSettingsUpdated",
                "LanguageSettingsUpdated",
                "TimeZoneSettingsUpdated",
                "DnsSettingsUpdated",
                "TrustedMailDomainSettingsUpdated",
                "PasswordStrengthSettingsUpdated",
                "TwoFactorAuthenticationSettingsUpdated",
                "AdministratorMessageSettingsUpdated",
                "DefaultStartPageSettingsUpdated",
                "ProductsListUpdated",
                "AdministratorAdded",
                "AdministratorOpenedFullAccess",
                "AdministratorDeleted",
                "UsersOpenedProductAccess",
                "GroupsOpenedProductAccess",
                "ProductAccessOpened",
                "ProductAccessRestricted",
                "ProductAddedAdministrator",
                "ProductDeletedAdministrator",
                "GreetingSettingsUpdated",
                "TeamTemplateChanged",
                "ColorThemeChanged",
                "OwnerSentChangeOwnerInstructions",
                "OwnerUpdated",
                "OwnerSentPortalDeactivationInstructions",
                "OwnerSentPortalDeleteInstructions",
                "PortalDeactivated",
                "PortalDeleted",
                "LoginHistoryReportDownloaded",
                "AuditTrailReportDownloaded",
                "SSOEnabled",
                "SSODisabled",
                "PortalAccessSettingsUpdated",
                "CookieSettingsUpdated",
                "MailServiceSettingsUpdated",
                "CustomNavigationSettingsUpdated",
                "AuditSettingsUpdated",
                "TwoFactorAuthenticationDisabled",
                "TwoFactorAuthenticationEnabledBySms",
                "TwoFactorAuthenticationEnabledByTfaApp",
                "ContactAdminMailSent",
                "ImpersonateUserLogin",
                "ImpersonateUserLogout",
                "AcceptRequest",
                "RejectRequest",
                "BlockPartner",
                "UnblockPartner",
                "DeletePartner",
                "ChangePartner",
                "ConfirmPortal",
                "MarkInvoicePaid",
                "MarkInvoiceUnpaid",
                "AddHostedPartner",
                "RemoveHostedPartner",
                "MarkPartnerAuthorized",
                "MarkPartnerNotAuthorized",
                "ChangePartnerLevel",
                "ChangeHostedPartnerQuotas",
                "ChangeHostedPartner",
                "BillLumpSumInvoice",
                "None"
              ],
              "description": "[1000 - LoginSuccess, 1001 - LoginSuccessViaSocialAccount, 1002 - LoginFailInvalidCombination, 1003 - LoginFailSocialAccountNotFound, 1004 - LoginFailDisabledProfile, 1005 - LoginFail, 1006 - Logout, 1007 - LoginSuccessViaSms, 1008 - LoginFailViaSms, 1009 - LoginFailIpSecurity, 1010 - LoginSuccessViaApi, 1011 - LoginSuccessViaSocialApp, 1012 - LoginSuccessViaApiSms, 1013 - LoginFailViaApi, 1014 - LoginFailViaApiSms, 1015 - LoginSuccessViaSSO, 1016 - SessionStarted, 1017 - SessionCompleted, 1018 - LoginFailViaSSO, 1019 - LoginSuccessViaApiSocialAccount, 1020 - LoginFailViaApiSocialAccount, 1021 - LoginSuccesViaTfaApp, 1022 - LoginFailViaTfaApp, 1023 - LoginFailBruteForce, 1024 - LoginSuccessViaApiTfa, 1025 - LoginFailViaApiTfa, 1026 - LoginFailRecaptcha, 2000 - ProjectCreated, 2001 - ProjectCreatedFromTemplate, 2002 - ProjectUpdated, 2003 - ProjectUpdatedStatus, 2004 - ProjectFollowed, 2005 - ProjectUnfollowed, 2006 - ProjectDeleted, 2007 - ProjectDeletedMember, 2008 - ProjectUpdatedTeam, 2009 - ProjectUpdatedMemberRights, 2010 - ProjectLinkedCompany, 2011 - ProjectUnlinkedCompany, 2012 - ProjectLinkedPerson, 2013 - ProjectUnlinkedPerson, 2014 - ProjectLinkedContacts, 2015 - MilestoneCreated, 2016 - MilestoneUpdated, 2017 - MilestoneUpdatedStatus, 2018 - MilestoneDeleted, 2019 - TaskCreated, 2020 - TaskCreatedFromDiscussion, 2021 - TaskUpdated, 2022 - TaskUpdatedStatus, 2023 - TaskMovedToMilestone, 2024 - TaskUnlinkedMilestone, 2025 - TaskUpdatedFollowing, 2026 - TaskAttachedFiles, 2027 - TaskDetachedFile, 2028 - TasksLinked, 2029 - TasksUnlinked, 2030 - TaskDeleted, 2031 - TaskCommentCreated, 2032 - TaskCommentUpdated, 2033 - TaskCommentDeleted, 2034 - SubtaskCreated, 2035 - SubtaskUpdated, 2036 - SubtaskUpdatedStatus, 2037 - SubtaskDeleted, 2038 - DiscussionCreated, 2039 - DiscussionUpdated, 2040 - DiscussionUpdatedFollowing, 2041 - DiscussionAttachedFiles, 2042 - DiscussionDetachedFile, 2043 - DiscussionDeleted, 2044 - DiscussionCommentCreated, 2045 - DiscussionCommentUpdated, 2046 - DiscussionCommentDeleted, 2047 - TaskTimeCreated, 2048 - TaskTimeUpdated, 2049 - TaskTimesUpdatedStatus, 2050 - TaskTimesDeleted, 2051 - ReportTemplateCreated, 2052 - ReportTemplateUpdated, 2053 - ReportTemplateDeleted, 2054 - ProjectTemplateCreated, 2055 - ProjectTemplateUpdated, 2056 - ProjectTemplateDeleted, 2057 - ProjectsImportedFromBasecamp, 2058 - SubtaskMoved, 3000 - CompanyCreated, 3001 - CompanyUpdated, 3002 - CompanyUpdatedPrincipalInfo, 3003 - CompanyUpdatedPhoto, 3004 - CompanyUpdatedTemperatureLevel, 3005 - CompanyUpdatedPersonsTemperatureLevel, 3006 - CompanyCreatedTag, 3007 - CompanyCreatedPersonsTag, 3008 - CompanyDeletedTag, 3009 - CompanyCreatedHistoryEvent, 3010 - CompanyDeletedHistoryEvent, 3011 - CompanyLinkedPerson, 3012 - CompanyUnlinkedPerson, 3013 - CompanyLinkedProject, 3014 - CompanyUnlinkedProject, 3015 - CompanyAttachedFiles, 3016 - CompaniesMerged, 3017 - CompanyDeleted, 3018 - PersonCreated, 3019 - PersonsCreated, 3020 - PersonUpdated, 3021 - PersonUpdatedPrincipalInfo, 3022 - PersonUpdatedPhoto, 3023 - PersonUpdatedTemperatureLevel, 3024 - PersonUpdatedCompanyTemperatureLevel, 3025 - PersonCreatedTag, 3026 - PersonCreatedCompanyTag, 3027 - PersonDeletedTag, 3028 - PersonCreatedHistoryEvent, 3029 - PersonDeletedHistoryEvent, 3030 - PersonLinkedProject, 3031 - PersonUnlinkedProject, 3032 - PersonAttachedFiles, 3033 - PersonsMerged, 3034 - PersonDeleted, 3035 - ContactsDeleted, 3036 - CrmTaskCreated, 3037 - ContactsCreatedCrmTasks, 3038 - CrmTaskUpdated, 3039 - CrmTaskOpened, 3040 - CrmTaskClosed, 3041 - CrmTaskDeleted, 3042 - OpportunityCreated, 3043 - OpportunityUpdated, 3044 - OpportunityUpdatedStage, 3045 - OpportunityCreatedTag, 3046 - OpportunityDeletedTag, 3047 - OpportunityCreatedHistoryEvent, 3048 - OpportunityDeletedHistoryEvent, 3049 - OpportunityLinkedCompany, 3050 - OpportunityUnlinkedCompany, 3051 - OpportunityLinkedPerson, 3052 - OpportunityUnlinkedPerson, 3053 - OpportunityAttachedFiles, 3054 - OpportunityOpenedAccess, 3055 - OpportunityRestrictedAccess, 3056 - OpportunityDeleted, 3057 - OpportunitiesDeleted, 3058 - InvoiceCreated, 3059 - InvoiceUpdated, 3060 - InvoicesUpdatedStatus, 3061 - InvoiceDeleted, 3062 - InvoicesDeleted, 3063 - CaseCreated, 3064 - CaseUpdated, 3065 - CaseOpened, 3066 - CaseClosed, 3067 - CaseCreatedTag, 3068 - CaseDeletedTag, 3069 - CaseCreatedHistoryEvent, 3070 - CaseDeletedHistoryEvent, 3071 - CaseLinkedCompany, 3072 - CaseUnlinkedCompany, 3073 - CaseLinkedPerson, 3074 - CaseUnlinkedPerson, 3075 - CaseAttachedFiles, 3076 - CaseOpenedAccess, 3077 - CaseRestrictedAccess, 3078 - CaseDeleted, 3079 - CasesDeleted, 3080 - CrmSmtpSettingsUpdated, 3081 - CrmTestMailSent, 3082 - CrmDefaultCurrencyUpdated, 3083 - CrmAllDataExported, 3084 - ContactTemperatureLevelCreated, 3085 - ContactTemperatureLevelUpdated, 3086 - ContactTemperatureLevelUpdatedColor, 3087 - ContactTemperatureLevelsUpdatedOrder, 3088 - ContactTemperatureLevelDeleted, 3089 - ContactTemperatureLevelSettingsUpdated, 3090 - ContactTypeCreated, 3091 - ContactTypeUpdated, 3092 - ContactTypesUpdatedOrder, 3093 - ContactTypeDeleted, 3094 - InvoiceItemCreated, 3095 - InvoiceItemUpdated, 3096 - InvoiceItemDeleted, 3097 - InvoiceItemsDeleted, 3098 - InvoiceTaxCreated, 3099 - InvoiceTaxUpdated, 3100 - InvoiceTaxDeleted, 3101 - OrganizationProfileUpdatedCompanyName, 3102 - OrganizationProfileUpdatedInvoiceLogo, 3103 - OrganizationProfileUpdatedAddress, 3104 - InvoiceNumberFormatUpdated, 3105 - ContactUserFieldCreated, 3106 - ContactUserFieldUpdated, 3107 - ContactUserFieldsUpdatedOrder, 3108 - ContactUserFieldDeleted, 3109 - CompanyUserFieldCreated, 3110 - CompanyUserFieldUpdated, 3111 - CompanyUserFieldsUpdatedOrder, 3112 - CompanyUserFieldDeleted, 3113 - PersonUserFieldCreated, 3114 - PersonUserFieldUpdated, 3115 - PersonUserFieldsUpdatedOrder, 3116 - PersonUserFieldDeleted, 3117 - OpportunityUserFieldCreated, 3118 - OpportunityUserFieldUpdated, 3119 - OpportunityUserFieldsUpdatedOrder, 3120 - OpportunityUserFieldDeleted, 3121 - CaseUserFieldCreated, 3122 - CaseUserFieldUpdated, 3123 - CaseUserFieldsUpdatedOrder, 3124 - CaseUserFieldDeleted, 3125 - HistoryEventCategoryCreated, 3126 - HistoryEventCategoryUpdated, 3127 - HistoryEventCategoryUpdatedIcon, 3128 - HistoryEventCategoriesUpdatedOrder, 3129 - HistoryEventCategoryDeleted, 3130 - CrmTaskCategoryCreated, 3131 - CrmTaskCategoryUpdated, 3132 - CrmTaskCategoryUpdatedIcon, 3133 - CrmTaskCategoriesUpdatedOrder, 3134 - CrmTaskCategoryDeleted, 3135 - OpportunityStageCreated, 3136 - OpportunityStageUpdated, 3137 - OpportunityStageUpdatedColor, 3138 - OpportunityStagesUpdatedOrder, 3139 - OpportunityStageDeleted, 3140 - ContactsCreatedTag, 3141 - ContactsDeletedTag, 3142 - OpportunitiesCreatedTag, 3143 - OpportunitiesDeletedTag, 3144 - CasesCreatedTag, 3145 - CasesDeletedTag, 3146 - ContactsTagSettingsUpdated, 3147 - WebsiteContactFormUpdatedKey, 3148 - ContactsImportedFromCSV, 3149 - CrmTasksImportedFromCSV, 3150 - OpportunitiesImportedFromCSV, 3151 - CasesImportedFromCSV, 3152 - ContactsExportedToCsv, 3153 - CrmTasksExportedToCsv, 3154 - OpportunitiesExportedToCsv, 3155 - CasesExportedToCsv, 3157 - CompanyCreatedWithWebForm, 3158 - PersonCreatedWithWebForm, 3159 - CompanyDetachedFile, 3160 - PersonDetachedFile, 3161 - OpportunityDetachedFile, 3162 - CaseDetachedFile, 3163 - CurrencyRateUpdated, 3164 - InvoiceDefaultTermsUpdated, 3165 - InvoiceDownloaded, 3166 - CrmSmtpMailSent, 4000 - UserCreated, 4001 - GuestCreated, 4002 - UserCreatedViaInvite, 4003 - GuestCreatedViaInvite, 4004 - UserActivated, 4005 - GuestActivated, 4006 - UserUpdated, 4007 - UserUpdatedLanguage, 4008 - UserAddedAvatar, 4009 - UserDeletedAvatar, 4010 - UserUpdatedAvatarThumbnails, 4011 - UserLinkedSocialAccount, 4012 - UserUnlinkedSocialAccount, 4013 - UserSentActivationInstructions, 4014 - UserSentEmailChangeInstructions, 4015 - UserSentPasswordChangeInstructions, 4016 - UserSentDeleteInstructions, 4017 - UserUpdatedPassword, 4018 - UserDeleted, 4019 - UsersUpdatedType, 4020 - UsersUpdatedStatus, 4021 - UsersSentActivationInstructions, 4022 - UsersDeleted, 4023 - SentInviteInstructions, 4024 - UserImported, 4025 - GuestImported, 4026 - GroupCreated, 4027 - GroupUpdated, 4028 - GroupDeleted, 4029 - UserUpdatedMobileNumber, 4030 - UserDataReassigns, 4031 - UserDataRemoving, 4032 - UserConnectedTfaApp, 4033 - UserDisconnectedTfaApp, 4034 - UserLogoutActiveConnections, 4035 - UserLogoutActiveConnection, 4036 - UserLogoutActiveConnectionsForUser, 5000 - FileCreated, 5001 - FileRenamed, 5002 - FileUpdated, 5003 - FileCreatedVersion, 5004 - FileDeletedVersion, 5005 - FileUpdatedRevisionComment, 5006 - FileLocked, 5007 - FileUnlocked, 5008 - FileUpdatedAccess, 5009 - FileDownloaded, 5010 - FileDownloadedAs, 5011 - FileUploaded, 5012 - FileImported, 5013 - FileCopied, 5014 - FileCopiedWithOverwriting, 5015 - FileMoved, 5016 - FileMovedWithOverwriting, 5017 - FileMovedToTrash, 5018 - FileDeleted, 5019 - FolderCreated, 5020 - FolderRenamed, 5021 - FolderUpdatedAccess, 5022 - FolderCopied, 5023 - FolderCopiedWithOverwriting, 5024 - FolderMoved, 5025 - FolderMovedWithOverwriting, 5026 - FolderMovedToTrash, 5027 - FolderDeleted, 5028 - ThirdPartyCreated, 5029 - ThirdPartyUpdated, 5030 - ThirdPartyDeleted, 5031 - DocumentsThirdPartySettingsUpdated, 5032 - DocumentsOverwritingSettingsUpdated, 5033 - DocumentsUploadingFormatsSettingsUpdated, 5034 - UserFileUpdated, 5035 - FileConverted, 5036 - FileSendAccessLink, 5037 - DocumentServiceLocationSetting, 5038 - AuthorizationKeysSetting, 5039 - FullTextSearchSetting, 5040 - StartTransferSetting, 5041 - StartBackupSetting, 5042 - LicenseKeyUploaded, 5043 - FileChangeOwner, 5044 - FileRestoreVersion, 5045 - DocumentSendToSign, 5046 - DocumentSignComplete, 5047 - UserUpdatedEmail, 5048 - DocumentsStoreForcesave, 5049 - DocumentsForcesave, 5050 - StartStorageEncryption, 5051 - PrivacyRoomEnable, 5052 - PrivacyRoomDisable, 5053 - StartStorageDecryption, 5054 - FileOpenedForChange, 5055 - FileMarkedAsFavorite, 5056 - FileRemovedFromFavorite, 5057 - FolderDownloaded, 5058 - FileRemovedFromList, 5059 - FolderRemovedFromList, 5060 - FileExternalLinkAccessUpdated, 5061 - TrashEmptied, 5062 - FileRevisionDownloaded, 5063 - FileMarkedAsRead, 5064 - FileReaded, 5065 - FolderMarkedAsRead, 5066 - FolderUpdatedAccessFor, 5067 - FolderMovedFrom, 5068 - FileUpdatedAccessFor, 5069 - DocumentsExternalShareSettingsUpdated, 6000 - LanguageSettingsUpdated, 6001 - TimeZoneSettingsUpdated, 6002 - DnsSettingsUpdated, 6003 - TrustedMailDomainSettingsUpdated, 6004 - PasswordStrengthSettingsUpdated, 6005 - TwoFactorAuthenticationSettingsUpdated, 6006 - AdministratorMessageSettingsUpdated, 6007 - DefaultStartPageSettingsUpdated, 6008 - ProductsListUpdated, 6009 - AdministratorAdded, 6010 - AdministratorOpenedFullAccess, 6011 - AdministratorDeleted, 6012 - UsersOpenedProductAccess, 6013 - GroupsOpenedProductAccess, 6014 - ProductAccessOpened, 6015 - ProductAccessRestricted, 6016 - ProductAddedAdministrator, 6017 - ProductDeletedAdministrator, 6018 - GreetingSettingsUpdated, 6019 - TeamTemplateChanged, 6020 - ColorThemeChanged, 6021 - OwnerSentChangeOwnerInstructions, 6022 - OwnerUpdated, 6023 - OwnerSentPortalDeactivationInstructions, 6024 - OwnerSentPortalDeleteInstructions, 6025 - PortalDeactivated, 6026 - PortalDeleted, 6027 - LoginHistoryReportDownloaded, 6028 - AuditTrailReportDownloaded, 6029 - SSOEnabled, 6030 - SSODisabled, 6031 - PortalAccessSettingsUpdated, 6032 - CookieSettingsUpdated, 6033 - MailServiceSettingsUpdated, 6034 - CustomNavigationSettingsUpdated, 6035 - AuditSettingsUpdated, 6036 - TwoFactorAuthenticationDisabled, 6037 - TwoFactorAuthenticationEnabledBySms, 6038 - TwoFactorAuthenticationEnabledByTfaApp, 7000 - ContactAdminMailSent, 7001 - ImpersonateUserLogin, 7002 - ImpersonateUserLogout, 8000 - AcceptRequest, 8001 - RejectRequest, 8002 - BlockPartner, 8003 - UnblockPartner, 8004 - DeletePartner, 8005 - ChangePartner, 8006 - ConfirmPortal, 8007 - MarkInvoicePaid, 8008 - MarkInvoiceUnpaid, 8009 - AddHostedPartner, 8010 - RemoveHostedPartner, 8011 - MarkPartnerAuthorized, 8012 - MarkPartnerNotAuthorized, 8013 - ChangePartnerLevel, 8014 - ChangeHostedPartnerQuotas, 8015 - ChangeHostedPartner, 8016 - BillLumpSumInvoice, -1 - None]"
            }
          },
          {
            "name": "from",
            "in": "body",
            "description": "Start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "body",
            "description": "End date",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of filtered login events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LoginEventWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/security//audit/events/filter": {
      "get": {
        "tags": [
          "security/Audit trail data"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get filtered audit trail data",
        "description": "Returns a list of the audit events by the parameters specified in the request.",
        "parameters": [
          {
            "name": "userId",
            "in": "body",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "productType",
            "in": "body",
            "description": "Product",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "CRM",
                "Documents",
                "Login",
                "Others",
                "People",
                "Projects",
                "Settings"
              ],
              "description": "[0 - None, 1 - CRM, 2 - Documents, 3 - Login, 4 - Others, 5 - People, 6 - Projects, 7 - Settings]"
            }
          },
          {
            "name": "moduleType",
            "in": "body",
            "description": "Module",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "Files",
                "Folders",
                "DocumentsSettings",
                "Companies",
                "Persons",
                "Contacts",
                "CrmTasks",
                "Opportunities",
                "Invoices",
                "Cases",
                "CommonCrmSettings",
                "ContactsSettings",
                "ContactTypes",
                "InvoiceSettings",
                "OtherCrmSettings",
                "Users",
                "Groups",
                "Projects",
                "Milestones",
                "Tasks",
                "Discussions",
                "TimeTracking",
                "Reports",
                "ProjectsSettings",
                "General",
                "Products"
              ],
              "description": "[0 - None, 1 - Files, 2 - Folders, 3 - DocumentsSettings, 4 - Companies, 5 - Persons, 6 - Contacts, 7 - CrmTasks, 8 - Opportunities, 9 - Invoices, 10 - Cases, 11 - CommonCrmSettings, 12 - ContactsSettings, 13 - ContactTypes, 14 - InvoiceSettings, 15 - OtherCrmSettings, 16 - Users, 17 - Groups, 18 - Projects, 19 - Milestones, 20 - Tasks, 21 - Discussions, 22 - TimeTracking, 23 - Reports, 24 - ProjectsSettings, 25 - General, 26 - Products]"
            }
          },
          {
            "name": "actionType",
            "in": "body",
            "description": "Action type",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "Create",
                "Update",
                "Delete",
                "Link",
                "Unlink",
                "Attach",
                "Detach",
                "Send",
                "Import",
                "Export",
                "UpdateAccess",
                "Download",
                "Upload",
                "Copy",
                "Move",
                "Reassigns",
                "Follow",
                "Unfollow",
                "Logout"
              ],
              "description": "[0 - None, 1 - Create, 2 - Update, 3 - Delete, 4 - Link, 5 - Unlink, 6 - Attach, 7 - Detach, 8 - Send, 9 - Import, 10 - Export, 11 - UpdateAccess, 12 - Download, 13 - Upload, 14 - Copy, 15 - Move, 16 - Reassigns, 17 - Follow, 18 - Unfollow, 19 - Logout]"
            }
          },
          {
            "name": "action",
            "in": "body",
            "description": "Action",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "LoginSuccess",
                "LoginSuccessViaSocialAccount",
                "LoginFailInvalidCombination",
                "LoginFailSocialAccountNotFound",
                "LoginFailDisabledProfile",
                "LoginFail",
                "Logout",
                "LoginSuccessViaSms",
                "LoginFailViaSms",
                "LoginFailIpSecurity",
                "LoginSuccessViaApi",
                "LoginSuccessViaSocialApp",
                "LoginSuccessViaApiSms",
                "LoginFailViaApi",
                "LoginFailViaApiSms",
                "LoginSuccessViaSSO",
                "SessionStarted",
                "SessionCompleted",
                "LoginFailViaSSO",
                "LoginSuccessViaApiSocialAccount",
                "LoginFailViaApiSocialAccount",
                "LoginSuccesViaTfaApp",
                "LoginFailViaTfaApp",
                "LoginFailBruteForce",
                "LoginSuccessViaApiTfa",
                "LoginFailViaApiTfa",
                "LoginFailRecaptcha",
                "ProjectCreated",
                "ProjectCreatedFromTemplate",
                "ProjectUpdated",
                "ProjectUpdatedStatus",
                "ProjectFollowed",
                "ProjectUnfollowed",
                "ProjectDeleted",
                "ProjectDeletedMember",
                "ProjectUpdatedTeam",
                "ProjectUpdatedMemberRights",
                "ProjectLinkedCompany",
                "ProjectUnlinkedCompany",
                "ProjectLinkedPerson",
                "ProjectUnlinkedPerson",
                "ProjectLinkedContacts",
                "MilestoneCreated",
                "MilestoneUpdated",
                "MilestoneUpdatedStatus",
                "MilestoneDeleted",
                "TaskCreated",
                "TaskCreatedFromDiscussion",
                "TaskUpdated",
                "TaskUpdatedStatus",
                "TaskMovedToMilestone",
                "TaskUnlinkedMilestone",
                "TaskUpdatedFollowing",
                "TaskAttachedFiles",
                "TaskDetachedFile",
                "TasksLinked",
                "TasksUnlinked",
                "TaskDeleted",
                "TaskCommentCreated",
                "TaskCommentUpdated",
                "TaskCommentDeleted",
                "SubtaskCreated",
                "SubtaskUpdated",
                "SubtaskUpdatedStatus",
                "SubtaskDeleted",
                "DiscussionCreated",
                "DiscussionUpdated",
                "DiscussionUpdatedFollowing",
                "DiscussionAttachedFiles",
                "DiscussionDetachedFile",
                "DiscussionDeleted",
                "DiscussionCommentCreated",
                "DiscussionCommentUpdated",
                "DiscussionCommentDeleted",
                "TaskTimeCreated",
                "TaskTimeUpdated",
                "TaskTimesUpdatedStatus",
                "TaskTimesDeleted",
                "ReportTemplateCreated",
                "ReportTemplateUpdated",
                "ReportTemplateDeleted",
                "ProjectTemplateCreated",
                "ProjectTemplateUpdated",
                "ProjectTemplateDeleted",
                "ProjectsImportedFromBasecamp",
                "SubtaskMoved",
                "CompanyCreated",
                "CompanyUpdated",
                "CompanyUpdatedPrincipalInfo",
                "CompanyUpdatedPhoto",
                "CompanyUpdatedTemperatureLevel",
                "CompanyUpdatedPersonsTemperatureLevel",
                "CompanyCreatedTag",
                "CompanyCreatedPersonsTag",
                "CompanyDeletedTag",
                "CompanyCreatedHistoryEvent",
                "CompanyDeletedHistoryEvent",
                "CompanyLinkedPerson",
                "CompanyUnlinkedPerson",
                "CompanyLinkedProject",
                "CompanyUnlinkedProject",
                "CompanyAttachedFiles",
                "CompaniesMerged",
                "CompanyDeleted",
                "PersonCreated",
                "PersonsCreated",
                "PersonUpdated",
                "PersonUpdatedPrincipalInfo",
                "PersonUpdatedPhoto",
                "PersonUpdatedTemperatureLevel",
                "PersonUpdatedCompanyTemperatureLevel",
                "PersonCreatedTag",
                "PersonCreatedCompanyTag",
                "PersonDeletedTag",
                "PersonCreatedHistoryEvent",
                "PersonDeletedHistoryEvent",
                "PersonLinkedProject",
                "PersonUnlinkedProject",
                "PersonAttachedFiles",
                "PersonsMerged",
                "PersonDeleted",
                "ContactsDeleted",
                "CrmTaskCreated",
                "ContactsCreatedCrmTasks",
                "CrmTaskUpdated",
                "CrmTaskOpened",
                "CrmTaskClosed",
                "CrmTaskDeleted",
                "OpportunityCreated",
                "OpportunityUpdated",
                "OpportunityUpdatedStage",
                "OpportunityCreatedTag",
                "OpportunityDeletedTag",
                "OpportunityCreatedHistoryEvent",
                "OpportunityDeletedHistoryEvent",
                "OpportunityLinkedCompany",
                "OpportunityUnlinkedCompany",
                "OpportunityLinkedPerson",
                "OpportunityUnlinkedPerson",
                "OpportunityAttachedFiles",
                "OpportunityOpenedAccess",
                "OpportunityRestrictedAccess",
                "OpportunityDeleted",
                "OpportunitiesDeleted",
                "InvoiceCreated",
                "InvoiceUpdated",
                "InvoicesUpdatedStatus",
                "InvoiceDeleted",
                "InvoicesDeleted",
                "CaseCreated",
                "CaseUpdated",
                "CaseOpened",
                "CaseClosed",
                "CaseCreatedTag",
                "CaseDeletedTag",
                "CaseCreatedHistoryEvent",
                "CaseDeletedHistoryEvent",
                "CaseLinkedCompany",
                "CaseUnlinkedCompany",
                "CaseLinkedPerson",
                "CaseUnlinkedPerson",
                "CaseAttachedFiles",
                "CaseOpenedAccess",
                "CaseRestrictedAccess",
                "CaseDeleted",
                "CasesDeleted",
                "CrmSmtpSettingsUpdated",
                "CrmTestMailSent",
                "CrmDefaultCurrencyUpdated",
                "CrmAllDataExported",
                "ContactTemperatureLevelCreated",
                "ContactTemperatureLevelUpdated",
                "ContactTemperatureLevelUpdatedColor",
                "ContactTemperatureLevelsUpdatedOrder",
                "ContactTemperatureLevelDeleted",
                "ContactTemperatureLevelSettingsUpdated",
                "ContactTypeCreated",
                "ContactTypeUpdated",
                "ContactTypesUpdatedOrder",
                "ContactTypeDeleted",
                "InvoiceItemCreated",
                "InvoiceItemUpdated",
                "InvoiceItemDeleted",
                "InvoiceItemsDeleted",
                "InvoiceTaxCreated",
                "InvoiceTaxUpdated",
                "InvoiceTaxDeleted",
                "OrganizationProfileUpdatedCompanyName",
                "OrganizationProfileUpdatedInvoiceLogo",
                "OrganizationProfileUpdatedAddress",
                "InvoiceNumberFormatUpdated",
                "ContactUserFieldCreated",
                "ContactUserFieldUpdated",
                "ContactUserFieldsUpdatedOrder",
                "ContactUserFieldDeleted",
                "CompanyUserFieldCreated",
                "CompanyUserFieldUpdated",
                "CompanyUserFieldsUpdatedOrder",
                "CompanyUserFieldDeleted",
                "PersonUserFieldCreated",
                "PersonUserFieldUpdated",
                "PersonUserFieldsUpdatedOrder",
                "PersonUserFieldDeleted",
                "OpportunityUserFieldCreated",
                "OpportunityUserFieldUpdated",
                "OpportunityUserFieldsUpdatedOrder",
                "OpportunityUserFieldDeleted",
                "CaseUserFieldCreated",
                "CaseUserFieldUpdated",
                "CaseUserFieldsUpdatedOrder",
                "CaseUserFieldDeleted",
                "HistoryEventCategoryCreated",
                "HistoryEventCategoryUpdated",
                "HistoryEventCategoryUpdatedIcon",
                "HistoryEventCategoriesUpdatedOrder",
                "HistoryEventCategoryDeleted",
                "CrmTaskCategoryCreated",
                "CrmTaskCategoryUpdated",
                "CrmTaskCategoryUpdatedIcon",
                "CrmTaskCategoriesUpdatedOrder",
                "CrmTaskCategoryDeleted",
                "OpportunityStageCreated",
                "OpportunityStageUpdated",
                "OpportunityStageUpdatedColor",
                "OpportunityStagesUpdatedOrder",
                "OpportunityStageDeleted",
                "ContactsCreatedTag",
                "ContactsDeletedTag",
                "OpportunitiesCreatedTag",
                "OpportunitiesDeletedTag",
                "CasesCreatedTag",
                "CasesDeletedTag",
                "ContactsTagSettingsUpdated",
                "WebsiteContactFormUpdatedKey",
                "ContactsImportedFromCSV",
                "CrmTasksImportedFromCSV",
                "OpportunitiesImportedFromCSV",
                "CasesImportedFromCSV",
                "ContactsExportedToCsv",
                "CrmTasksExportedToCsv",
                "OpportunitiesExportedToCsv",
                "CasesExportedToCsv",
                "CompanyCreatedWithWebForm",
                "PersonCreatedWithWebForm",
                "CompanyDetachedFile",
                "PersonDetachedFile",
                "OpportunityDetachedFile",
                "CaseDetachedFile",
                "CurrencyRateUpdated",
                "InvoiceDefaultTermsUpdated",
                "InvoiceDownloaded",
                "CrmSmtpMailSent",
                "UserCreated",
                "GuestCreated",
                "UserCreatedViaInvite",
                "GuestCreatedViaInvite",
                "UserActivated",
                "GuestActivated",
                "UserUpdated",
                "UserUpdatedLanguage",
                "UserAddedAvatar",
                "UserDeletedAvatar",
                "UserUpdatedAvatarThumbnails",
                "UserLinkedSocialAccount",
                "UserUnlinkedSocialAccount",
                "UserSentActivationInstructions",
                "UserSentEmailChangeInstructions",
                "UserSentPasswordChangeInstructions",
                "UserSentDeleteInstructions",
                "UserUpdatedPassword",
                "UserDeleted",
                "UsersUpdatedType",
                "UsersUpdatedStatus",
                "UsersSentActivationInstructions",
                "UsersDeleted",
                "SentInviteInstructions",
                "UserImported",
                "GuestImported",
                "GroupCreated",
                "GroupUpdated",
                "GroupDeleted",
                "UserUpdatedMobileNumber",
                "UserDataReassigns",
                "UserDataRemoving",
                "UserConnectedTfaApp",
                "UserDisconnectedTfaApp",
                "UserLogoutActiveConnections",
                "UserLogoutActiveConnection",
                "UserLogoutActiveConnectionsForUser",
                "FileCreated",
                "FileRenamed",
                "FileUpdated",
                "FileCreatedVersion",
                "FileDeletedVersion",
                "FileUpdatedRevisionComment",
                "FileLocked",
                "FileUnlocked",
                "FileUpdatedAccess",
                "FileDownloaded",
                "FileDownloadedAs",
                "FileUploaded",
                "FileImported",
                "FileCopied",
                "FileCopiedWithOverwriting",
                "FileMoved",
                "FileMovedWithOverwriting",
                "FileMovedToTrash",
                "FileDeleted",
                "FolderCreated",
                "FolderRenamed",
                "FolderUpdatedAccess",
                "FolderCopied",
                "FolderCopiedWithOverwriting",
                "FolderMoved",
                "FolderMovedWithOverwriting",
                "FolderMovedToTrash",
                "FolderDeleted",
                "ThirdPartyCreated",
                "ThirdPartyUpdated",
                "ThirdPartyDeleted",
                "DocumentsThirdPartySettingsUpdated",
                "DocumentsOverwritingSettingsUpdated",
                "DocumentsUploadingFormatsSettingsUpdated",
                "UserFileUpdated",
                "FileConverted",
                "FileSendAccessLink",
                "DocumentServiceLocationSetting",
                "AuthorizationKeysSetting",
                "FullTextSearchSetting",
                "StartTransferSetting",
                "StartBackupSetting",
                "LicenseKeyUploaded",
                "FileChangeOwner",
                "FileRestoreVersion",
                "DocumentSendToSign",
                "DocumentSignComplete",
                "UserUpdatedEmail",
                "DocumentsStoreForcesave",
                "DocumentsForcesave",
                "StartStorageEncryption",
                "PrivacyRoomEnable",
                "PrivacyRoomDisable",
                "StartStorageDecryption",
                "FileOpenedForChange",
                "FileMarkedAsFavorite",
                "FileRemovedFromFavorite",
                "FolderDownloaded",
                "FileRemovedFromList",
                "FolderRemovedFromList",
                "FileExternalLinkAccessUpdated",
                "TrashEmptied",
                "FileRevisionDownloaded",
                "FileMarkedAsRead",
                "FileReaded",
                "FolderMarkedAsRead",
                "FolderUpdatedAccessFor",
                "FolderMovedFrom",
                "FileUpdatedAccessFor",
                "DocumentsExternalShareSettingsUpdated",
                "LanguageSettingsUpdated",
                "TimeZoneSettingsUpdated",
                "DnsSettingsUpdated",
                "TrustedMailDomainSettingsUpdated",
                "PasswordStrengthSettingsUpdated",
                "TwoFactorAuthenticationSettingsUpdated",
                "AdministratorMessageSettingsUpdated",
                "DefaultStartPageSettingsUpdated",
                "ProductsListUpdated",
                "AdministratorAdded",
                "AdministratorOpenedFullAccess",
                "AdministratorDeleted",
                "UsersOpenedProductAccess",
                "GroupsOpenedProductAccess",
                "ProductAccessOpened",
                "ProductAccessRestricted",
                "ProductAddedAdministrator",
                "ProductDeletedAdministrator",
                "GreetingSettingsUpdated",
                "TeamTemplateChanged",
                "ColorThemeChanged",
                "OwnerSentChangeOwnerInstructions",
                "OwnerUpdated",
                "OwnerSentPortalDeactivationInstructions",
                "OwnerSentPortalDeleteInstructions",
                "PortalDeactivated",
                "PortalDeleted",
                "LoginHistoryReportDownloaded",
                "AuditTrailReportDownloaded",
                "SSOEnabled",
                "SSODisabled",
                "PortalAccessSettingsUpdated",
                "CookieSettingsUpdated",
                "MailServiceSettingsUpdated",
                "CustomNavigationSettingsUpdated",
                "AuditSettingsUpdated",
                "TwoFactorAuthenticationDisabled",
                "TwoFactorAuthenticationEnabledBySms",
                "TwoFactorAuthenticationEnabledByTfaApp",
                "ContactAdminMailSent",
                "ImpersonateUserLogin",
                "ImpersonateUserLogout",
                "AcceptRequest",
                "RejectRequest",
                "BlockPartner",
                "UnblockPartner",
                "DeletePartner",
                "ChangePartner",
                "ConfirmPortal",
                "MarkInvoicePaid",
                "MarkInvoiceUnpaid",
                "AddHostedPartner",
                "RemoveHostedPartner",
                "MarkPartnerAuthorized",
                "MarkPartnerNotAuthorized",
                "ChangePartnerLevel",
                "ChangeHostedPartnerQuotas",
                "ChangeHostedPartner",
                "BillLumpSumInvoice",
                "None"
              ],
              "description": "[1000 - LoginSuccess, 1001 - LoginSuccessViaSocialAccount, 1002 - LoginFailInvalidCombination, 1003 - LoginFailSocialAccountNotFound, 1004 - LoginFailDisabledProfile, 1005 - LoginFail, 1006 - Logout, 1007 - LoginSuccessViaSms, 1008 - LoginFailViaSms, 1009 - LoginFailIpSecurity, 1010 - LoginSuccessViaApi, 1011 - LoginSuccessViaSocialApp, 1012 - LoginSuccessViaApiSms, 1013 - LoginFailViaApi, 1014 - LoginFailViaApiSms, 1015 - LoginSuccessViaSSO, 1016 - SessionStarted, 1017 - SessionCompleted, 1018 - LoginFailViaSSO, 1019 - LoginSuccessViaApiSocialAccount, 1020 - LoginFailViaApiSocialAccount, 1021 - LoginSuccesViaTfaApp, 1022 - LoginFailViaTfaApp, 1023 - LoginFailBruteForce, 1024 - LoginSuccessViaApiTfa, 1025 - LoginFailViaApiTfa, 1026 - LoginFailRecaptcha, 2000 - ProjectCreated, 2001 - ProjectCreatedFromTemplate, 2002 - ProjectUpdated, 2003 - ProjectUpdatedStatus, 2004 - ProjectFollowed, 2005 - ProjectUnfollowed, 2006 - ProjectDeleted, 2007 - ProjectDeletedMember, 2008 - ProjectUpdatedTeam, 2009 - ProjectUpdatedMemberRights, 2010 - ProjectLinkedCompany, 2011 - ProjectUnlinkedCompany, 2012 - ProjectLinkedPerson, 2013 - ProjectUnlinkedPerson, 2014 - ProjectLinkedContacts, 2015 - MilestoneCreated, 2016 - MilestoneUpdated, 2017 - MilestoneUpdatedStatus, 2018 - MilestoneDeleted, 2019 - TaskCreated, 2020 - TaskCreatedFromDiscussion, 2021 - TaskUpdated, 2022 - TaskUpdatedStatus, 2023 - TaskMovedToMilestone, 2024 - TaskUnlinkedMilestone, 2025 - TaskUpdatedFollowing, 2026 - TaskAttachedFiles, 2027 - TaskDetachedFile, 2028 - TasksLinked, 2029 - TasksUnlinked, 2030 - TaskDeleted, 2031 - TaskCommentCreated, 2032 - TaskCommentUpdated, 2033 - TaskCommentDeleted, 2034 - SubtaskCreated, 2035 - SubtaskUpdated, 2036 - SubtaskUpdatedStatus, 2037 - SubtaskDeleted, 2038 - DiscussionCreated, 2039 - DiscussionUpdated, 2040 - DiscussionUpdatedFollowing, 2041 - DiscussionAttachedFiles, 2042 - DiscussionDetachedFile, 2043 - DiscussionDeleted, 2044 - DiscussionCommentCreated, 2045 - DiscussionCommentUpdated, 2046 - DiscussionCommentDeleted, 2047 - TaskTimeCreated, 2048 - TaskTimeUpdated, 2049 - TaskTimesUpdatedStatus, 2050 - TaskTimesDeleted, 2051 - ReportTemplateCreated, 2052 - ReportTemplateUpdated, 2053 - ReportTemplateDeleted, 2054 - ProjectTemplateCreated, 2055 - ProjectTemplateUpdated, 2056 - ProjectTemplateDeleted, 2057 - ProjectsImportedFromBasecamp, 2058 - SubtaskMoved, 3000 - CompanyCreated, 3001 - CompanyUpdated, 3002 - CompanyUpdatedPrincipalInfo, 3003 - CompanyUpdatedPhoto, 3004 - CompanyUpdatedTemperatureLevel, 3005 - CompanyUpdatedPersonsTemperatureLevel, 3006 - CompanyCreatedTag, 3007 - CompanyCreatedPersonsTag, 3008 - CompanyDeletedTag, 3009 - CompanyCreatedHistoryEvent, 3010 - CompanyDeletedHistoryEvent, 3011 - CompanyLinkedPerson, 3012 - CompanyUnlinkedPerson, 3013 - CompanyLinkedProject, 3014 - CompanyUnlinkedProject, 3015 - CompanyAttachedFiles, 3016 - CompaniesMerged, 3017 - CompanyDeleted, 3018 - PersonCreated, 3019 - PersonsCreated, 3020 - PersonUpdated, 3021 - PersonUpdatedPrincipalInfo, 3022 - PersonUpdatedPhoto, 3023 - PersonUpdatedTemperatureLevel, 3024 - PersonUpdatedCompanyTemperatureLevel, 3025 - PersonCreatedTag, 3026 - PersonCreatedCompanyTag, 3027 - PersonDeletedTag, 3028 - PersonCreatedHistoryEvent, 3029 - PersonDeletedHistoryEvent, 3030 - PersonLinkedProject, 3031 - PersonUnlinkedProject, 3032 - PersonAttachedFiles, 3033 - PersonsMerged, 3034 - PersonDeleted, 3035 - ContactsDeleted, 3036 - CrmTaskCreated, 3037 - ContactsCreatedCrmTasks, 3038 - CrmTaskUpdated, 3039 - CrmTaskOpened, 3040 - CrmTaskClosed, 3041 - CrmTaskDeleted, 3042 - OpportunityCreated, 3043 - OpportunityUpdated, 3044 - OpportunityUpdatedStage, 3045 - OpportunityCreatedTag, 3046 - OpportunityDeletedTag, 3047 - OpportunityCreatedHistoryEvent, 3048 - OpportunityDeletedHistoryEvent, 3049 - OpportunityLinkedCompany, 3050 - OpportunityUnlinkedCompany, 3051 - OpportunityLinkedPerson, 3052 - OpportunityUnlinkedPerson, 3053 - OpportunityAttachedFiles, 3054 - OpportunityOpenedAccess, 3055 - OpportunityRestrictedAccess, 3056 - OpportunityDeleted, 3057 - OpportunitiesDeleted, 3058 - InvoiceCreated, 3059 - InvoiceUpdated, 3060 - InvoicesUpdatedStatus, 3061 - InvoiceDeleted, 3062 - InvoicesDeleted, 3063 - CaseCreated, 3064 - CaseUpdated, 3065 - CaseOpened, 3066 - CaseClosed, 3067 - CaseCreatedTag, 3068 - CaseDeletedTag, 3069 - CaseCreatedHistoryEvent, 3070 - CaseDeletedHistoryEvent, 3071 - CaseLinkedCompany, 3072 - CaseUnlinkedCompany, 3073 - CaseLinkedPerson, 3074 - CaseUnlinkedPerson, 3075 - CaseAttachedFiles, 3076 - CaseOpenedAccess, 3077 - CaseRestrictedAccess, 3078 - CaseDeleted, 3079 - CasesDeleted, 3080 - CrmSmtpSettingsUpdated, 3081 - CrmTestMailSent, 3082 - CrmDefaultCurrencyUpdated, 3083 - CrmAllDataExported, 3084 - ContactTemperatureLevelCreated, 3085 - ContactTemperatureLevelUpdated, 3086 - ContactTemperatureLevelUpdatedColor, 3087 - ContactTemperatureLevelsUpdatedOrder, 3088 - ContactTemperatureLevelDeleted, 3089 - ContactTemperatureLevelSettingsUpdated, 3090 - ContactTypeCreated, 3091 - ContactTypeUpdated, 3092 - ContactTypesUpdatedOrder, 3093 - ContactTypeDeleted, 3094 - InvoiceItemCreated, 3095 - InvoiceItemUpdated, 3096 - InvoiceItemDeleted, 3097 - InvoiceItemsDeleted, 3098 - InvoiceTaxCreated, 3099 - InvoiceTaxUpdated, 3100 - InvoiceTaxDeleted, 3101 - OrganizationProfileUpdatedCompanyName, 3102 - OrganizationProfileUpdatedInvoiceLogo, 3103 - OrganizationProfileUpdatedAddress, 3104 - InvoiceNumberFormatUpdated, 3105 - ContactUserFieldCreated, 3106 - ContactUserFieldUpdated, 3107 - ContactUserFieldsUpdatedOrder, 3108 - ContactUserFieldDeleted, 3109 - CompanyUserFieldCreated, 3110 - CompanyUserFieldUpdated, 3111 - CompanyUserFieldsUpdatedOrder, 3112 - CompanyUserFieldDeleted, 3113 - PersonUserFieldCreated, 3114 - PersonUserFieldUpdated, 3115 - PersonUserFieldsUpdatedOrder, 3116 - PersonUserFieldDeleted, 3117 - OpportunityUserFieldCreated, 3118 - OpportunityUserFieldUpdated, 3119 - OpportunityUserFieldsUpdatedOrder, 3120 - OpportunityUserFieldDeleted, 3121 - CaseUserFieldCreated, 3122 - CaseUserFieldUpdated, 3123 - CaseUserFieldsUpdatedOrder, 3124 - CaseUserFieldDeleted, 3125 - HistoryEventCategoryCreated, 3126 - HistoryEventCategoryUpdated, 3127 - HistoryEventCategoryUpdatedIcon, 3128 - HistoryEventCategoriesUpdatedOrder, 3129 - HistoryEventCategoryDeleted, 3130 - CrmTaskCategoryCreated, 3131 - CrmTaskCategoryUpdated, 3132 - CrmTaskCategoryUpdatedIcon, 3133 - CrmTaskCategoriesUpdatedOrder, 3134 - CrmTaskCategoryDeleted, 3135 - OpportunityStageCreated, 3136 - OpportunityStageUpdated, 3137 - OpportunityStageUpdatedColor, 3138 - OpportunityStagesUpdatedOrder, 3139 - OpportunityStageDeleted, 3140 - ContactsCreatedTag, 3141 - ContactsDeletedTag, 3142 - OpportunitiesCreatedTag, 3143 - OpportunitiesDeletedTag, 3144 - CasesCreatedTag, 3145 - CasesDeletedTag, 3146 - ContactsTagSettingsUpdated, 3147 - WebsiteContactFormUpdatedKey, 3148 - ContactsImportedFromCSV, 3149 - CrmTasksImportedFromCSV, 3150 - OpportunitiesImportedFromCSV, 3151 - CasesImportedFromCSV, 3152 - ContactsExportedToCsv, 3153 - CrmTasksExportedToCsv, 3154 - OpportunitiesExportedToCsv, 3155 - CasesExportedToCsv, 3157 - CompanyCreatedWithWebForm, 3158 - PersonCreatedWithWebForm, 3159 - CompanyDetachedFile, 3160 - PersonDetachedFile, 3161 - OpportunityDetachedFile, 3162 - CaseDetachedFile, 3163 - CurrencyRateUpdated, 3164 - InvoiceDefaultTermsUpdated, 3165 - InvoiceDownloaded, 3166 - CrmSmtpMailSent, 4000 - UserCreated, 4001 - GuestCreated, 4002 - UserCreatedViaInvite, 4003 - GuestCreatedViaInvite, 4004 - UserActivated, 4005 - GuestActivated, 4006 - UserUpdated, 4007 - UserUpdatedLanguage, 4008 - UserAddedAvatar, 4009 - UserDeletedAvatar, 4010 - UserUpdatedAvatarThumbnails, 4011 - UserLinkedSocialAccount, 4012 - UserUnlinkedSocialAccount, 4013 - UserSentActivationInstructions, 4014 - UserSentEmailChangeInstructions, 4015 - UserSentPasswordChangeInstructions, 4016 - UserSentDeleteInstructions, 4017 - UserUpdatedPassword, 4018 - UserDeleted, 4019 - UsersUpdatedType, 4020 - UsersUpdatedStatus, 4021 - UsersSentActivationInstructions, 4022 - UsersDeleted, 4023 - SentInviteInstructions, 4024 - UserImported, 4025 - GuestImported, 4026 - GroupCreated, 4027 - GroupUpdated, 4028 - GroupDeleted, 4029 - UserUpdatedMobileNumber, 4030 - UserDataReassigns, 4031 - UserDataRemoving, 4032 - UserConnectedTfaApp, 4033 - UserDisconnectedTfaApp, 4034 - UserLogoutActiveConnections, 4035 - UserLogoutActiveConnection, 4036 - UserLogoutActiveConnectionsForUser, 5000 - FileCreated, 5001 - FileRenamed, 5002 - FileUpdated, 5003 - FileCreatedVersion, 5004 - FileDeletedVersion, 5005 - FileUpdatedRevisionComment, 5006 - FileLocked, 5007 - FileUnlocked, 5008 - FileUpdatedAccess, 5009 - FileDownloaded, 5010 - FileDownloadedAs, 5011 - FileUploaded, 5012 - FileImported, 5013 - FileCopied, 5014 - FileCopiedWithOverwriting, 5015 - FileMoved, 5016 - FileMovedWithOverwriting, 5017 - FileMovedToTrash, 5018 - FileDeleted, 5019 - FolderCreated, 5020 - FolderRenamed, 5021 - FolderUpdatedAccess, 5022 - FolderCopied, 5023 - FolderCopiedWithOverwriting, 5024 - FolderMoved, 5025 - FolderMovedWithOverwriting, 5026 - FolderMovedToTrash, 5027 - FolderDeleted, 5028 - ThirdPartyCreated, 5029 - ThirdPartyUpdated, 5030 - ThirdPartyDeleted, 5031 - DocumentsThirdPartySettingsUpdated, 5032 - DocumentsOverwritingSettingsUpdated, 5033 - DocumentsUploadingFormatsSettingsUpdated, 5034 - UserFileUpdated, 5035 - FileConverted, 5036 - FileSendAccessLink, 5037 - DocumentServiceLocationSetting, 5038 - AuthorizationKeysSetting, 5039 - FullTextSearchSetting, 5040 - StartTransferSetting, 5041 - StartBackupSetting, 5042 - LicenseKeyUploaded, 5043 - FileChangeOwner, 5044 - FileRestoreVersion, 5045 - DocumentSendToSign, 5046 - DocumentSignComplete, 5047 - UserUpdatedEmail, 5048 - DocumentsStoreForcesave, 5049 - DocumentsForcesave, 5050 - StartStorageEncryption, 5051 - PrivacyRoomEnable, 5052 - PrivacyRoomDisable, 5053 - StartStorageDecryption, 5054 - FileOpenedForChange, 5055 - FileMarkedAsFavorite, 5056 - FileRemovedFromFavorite, 5057 - FolderDownloaded, 5058 - FileRemovedFromList, 5059 - FolderRemovedFromList, 5060 - FileExternalLinkAccessUpdated, 5061 - TrashEmptied, 5062 - FileRevisionDownloaded, 5063 - FileMarkedAsRead, 5064 - FileReaded, 5065 - FolderMarkedAsRead, 5066 - FolderUpdatedAccessFor, 5067 - FolderMovedFrom, 5068 - FileUpdatedAccessFor, 5069 - DocumentsExternalShareSettingsUpdated, 6000 - LanguageSettingsUpdated, 6001 - TimeZoneSettingsUpdated, 6002 - DnsSettingsUpdated, 6003 - TrustedMailDomainSettingsUpdated, 6004 - PasswordStrengthSettingsUpdated, 6005 - TwoFactorAuthenticationSettingsUpdated, 6006 - AdministratorMessageSettingsUpdated, 6007 - DefaultStartPageSettingsUpdated, 6008 - ProductsListUpdated, 6009 - AdministratorAdded, 6010 - AdministratorOpenedFullAccess, 6011 - AdministratorDeleted, 6012 - UsersOpenedProductAccess, 6013 - GroupsOpenedProductAccess, 6014 - ProductAccessOpened, 6015 - ProductAccessRestricted, 6016 - ProductAddedAdministrator, 6017 - ProductDeletedAdministrator, 6018 - GreetingSettingsUpdated, 6019 - TeamTemplateChanged, 6020 - ColorThemeChanged, 6021 - OwnerSentChangeOwnerInstructions, 6022 - OwnerUpdated, 6023 - OwnerSentPortalDeactivationInstructions, 6024 - OwnerSentPortalDeleteInstructions, 6025 - PortalDeactivated, 6026 - PortalDeleted, 6027 - LoginHistoryReportDownloaded, 6028 - AuditTrailReportDownloaded, 6029 - SSOEnabled, 6030 - SSODisabled, 6031 - PortalAccessSettingsUpdated, 6032 - CookieSettingsUpdated, 6033 - MailServiceSettingsUpdated, 6034 - CustomNavigationSettingsUpdated, 6035 - AuditSettingsUpdated, 6036 - TwoFactorAuthenticationDisabled, 6037 - TwoFactorAuthenticationEnabledBySms, 6038 - TwoFactorAuthenticationEnabledByTfaApp, 7000 - ContactAdminMailSent, 7001 - ImpersonateUserLogin, 7002 - ImpersonateUserLogout, 8000 - AcceptRequest, 8001 - RejectRequest, 8002 - BlockPartner, 8003 - UnblockPartner, 8004 - DeletePartner, 8005 - ChangePartner, 8006 - ConfirmPortal, 8007 - MarkInvoicePaid, 8008 - MarkInvoiceUnpaid, 8009 - AddHostedPartner, 8010 - RemoveHostedPartner, 8011 - MarkPartnerAuthorized, 8012 - MarkPartnerNotAuthorized, 8013 - ChangePartnerLevel, 8014 - ChangeHostedPartnerQuotas, 8015 - ChangeHostedPartner, 8016 - BillLumpSumInvoice, -1 - None]"
            }
          },
          {
            "name": "entryType",
            "in": "body",
            "description": "Entry",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "File",
                "Folder",
                "Project",
                "Contact",
                "Milestone",
                "Task",
                "Comment",
                "SubTask",
                "Message",
                "TimeSpend",
                "ReportTemplate",
                "Template",
                "Relationship",
                "CRMTask",
                "Opportunity",
                "Invoice",
                "Case",
                "ListItem",
                "InvoiceItem",
                "InvoiceTax",
                "FieldDescription",
                "OpportunityMilestone",
                "User",
                "Group"
              ],
              "description": "[0 - None, 1 - File, 2 - Folder, 3 - Project, 4 - Contact, 5 - Milestone, 6 - Task, 7 - Comment, 8 - SubTask, 9 - Message, 10 - TimeSpend, 11 - ReportTemplate, 12 - Template, 13 - Relationship, 14 - CRMTask, 15 - Opportunity, 16 - Invoice, 17 - Case, 18 - ListItem, 19 - InvoiceItem, 20 - InvoiceTax, 21 - FieldDescription, 22 - OpportunityMilestone, 23 - User, 24 - Group]"
            }
          },
          {
            "name": "target",
            "in": "body",
            "description": "Target",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "body",
            "description": "Start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "body",
            "description": "End date",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of filtered audit trail data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditEventWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/security//audit/types": {
      "get": {
        "tags": [
          "security/Audit trail data"
        ],
        "summary": "Get audit trail types",
        "description": "Returns all the available audit trail types.",
        "responses": {
          "200": {
            "description": "Audit trail types",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelTypes"
                }
              }
            }
          }
        }
      }
    },
    "/api/2.0/security//audit/mappers": {
      "get": {
        "tags": [
          "security/Audit trail data"
        ],
        "summary": "Get audit trail mappers",
        "description": "Returns the mappers for the audit trail types.",
        "parameters": [
          {
            "name": "productType",
            "in": "body",
            "description": "Product",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "moduleType",
            "in": "body",
            "description": "Module",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit trail mappers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/2.0/security//audit/login/report": {
      "post": {
        "tags": [
          "security/Login history"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Generate the login history report",
        "description": "Generates the login history report.",
        "responses": {
          "200": {
            "description": "URL to the xlsx report file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/security//audit/events/report": {
      "post": {
        "tags": [
          "security/Audit trail data"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Generate the audit trail report",
        "description": "Generates the audit trail report.",
        "responses": {
          "200": {
            "description": "URL to the xlsx report file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/security//audit/settings/lifetime": {
      "get": {
        "tags": [
          "security/Audit trail data"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the audit trail settings",
        "description": "Returns the audit trail settings.",
        "responses": {
          "200": {
            "description": "Audit settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantAuditSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "security/Audit trail data"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set the audit trail settings",
        "description": "Sets the audit trail settings for the current portal.",
        "parameters": [
          {
            "name": "settings",
            "in": "body",
            "description": "Audit trail settings",
            "schema": {
              "$ref": "#/components/schemas/TenantAuditSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit trail settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantAuditSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/security//activeconnections": {
      "get": {
        "tags": [
          "security/Active connections"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get active connections",
        "description": "Returns all the active connections to the portal.",
        "responses": {
          "200": {
            "description": "Active portal connections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/security//activeconnections/logoutallchangepassword": {
      "put": {
        "tags": [
          "security/Active connections"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Log out and change password",
        "description": "Logs out from all the active connections for the current user and changes their password.",
        "responses": {
          "200": {
            "description": "URL to the confirmation message for changing a password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/security//activeconnections/logoutall/{userId}": {
      "put": {
        "tags": [
          "security/Active connections"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Log out for the user by ID",
        "description": "Logs out from all the active connections for the user with the ID specified in the request.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ]
      }
    },
    "/api/2.0/security//activeconnections/logoutallexceptthis": {
      "put": {
        "tags": [
          "security/Active connections"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Log out from all connections",
        "description": "Logs out from all the active connections except the current connection.",
        "responses": {
          "200": {
            "description": "Current user name",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/security//activeconnections/logout/{loginEventId}": {
      "put": {
        "tags": [
          "security/Active connections"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Log out from the connection",
        "description": "Logs out from the connection with the ID specified in the request.",
        "parameters": [
          {
            "name": "loginEventId",
            "in": "path",
            "description": "Login event ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean value: true if the operation is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/security//loginsettings": {
      "put": {
        "tags": [
          "security/Login history"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update login settings",
        "description": "Updates the login settings with the parameters specified in the request.",
        "parameters": [
          {
            "name": "attemptsCount",
            "in": "body",
            "description": "Maximum number of the user attempts to log in",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "blockTime",
            "in": "body",
            "description": "The time for which the user will be blocked after unsuccessful login attempts",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "checkPeriod",
            "in": "body",
            "description": "The time to wait for a response from the server",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated login settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/security//impersonate/settings": {
      "get": {
        "tags": [
          "security/Impersonation"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get impersonation settings",
        "description": "Returns the impersonation settings for the current portal.",
        "responses": {
          "200": {
            "description": "Impersonation settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImpersonationSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "security/Impersonation"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update impersonation settings",
        "description": "Uppdates the impersonation settings with the parameters specified in the request.",
        "parameters": [
          {
            "name": "enable",
            "in": "body",
            "description": "Specifies whether impersonation is enabled or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "enableType",
            "in": "body",
            "description": "Specifies for whom impersonation is enabled (DisableForAdmins, EnableForAllFullAdmins, or EnableWithLimits)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "DisableForAdmins",
                "EnableForAllFullAdmins",
                "EnableWithLimits"
              ],
              "description": "[0 - DisableForAdmins, 1 - EnableForAllFullAdmins, 2 - EnableWithLimits]"
            }
          },
          {
            "name": "onlyForOwnGroups",
            "in": "body",
            "description": "Specifies if impersonation is enabled only for the current user groups or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "allowedAdmins",
            "in": "body",
            "description": "List of admins who can be impersonated",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "restrictionUsers",
            "in": "body",
            "description": "List of users who cannot be impersonated",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "restrictionGroups",
            "in": "body",
            "description": "List of groups who cannot be impersonated",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated impersonation settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImpersonationSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/security//impersonate/{userId}": {
      "get": {
        "tags": [
          "security/Impersonation"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Check user impersonation",
        "description": "Checks if a user with the ID specified in the request can be impersonated or not.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean value: true - the user can be impersonated, false - the user cannot be impersonated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "security/Impersonation"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Impersonate a user",
        "description": "Impersonates a user with the ID specified in the request.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cookies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/security//impersonate/logout": {
      "put": {
        "tags": [
          "security/Impersonation"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Log out impersonated user",
        "description": "Log out from the account of the impersonated user."
      }
    },
    "/api/2.0/settings/iprestrictions/settings": {
      "put": {
        "tags": [
          "settings/IP restrictions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the IP restrictions",
        "description": "Updates the IP restriction settings with a parameter specified in the request.",
        "parameters": [
          {
            "name": "enable",
            "in": "body",
            "description": "Specifies whether to enable IP restrictions or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated IP restriction settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPRestrictionsSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/tips": {
      "put": {
        "tags": [
          "settings/Tips"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the tip settings",
        "description": "Updates the tip settings with a parameter specified in the request.",
        "parameters": [
          {
            "name": "show",
            "in": "body",
            "description": "Specifies whether to show tips for the user or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated tip settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TipsSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/tips/change/subscription": {
      "put": {
        "tags": [
          "settings/Tips"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the tip subscription",
        "description": "Updates the tip subscription.",
        "responses": {
          "200": {
            "description": "Boolean value: true if the user is subscribed to the tips",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/tfaapp": {
      "put": {
        "tags": [
          "settings/TFA settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the TFA settings",
        "description": "Updates the two-factor authentication settings with the type specified in the request.",
        "parameters": [
          {
            "name": "type",
            "in": "body",
            "description": "TFA type (None, Sms, or App)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [
                "None",
                "Sms",
                "App"
              ],
              "description": "[0 - None, 1 - Sms, 2 - App]"
            }
          },
          {
            "name": "trustedIps",
            "in": "body",
            "description": "List of trusted IP addresses",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "mandatoryUsers",
            "in": "body",
            "description": "List of users required for the TFA verification",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "mandatoryGroups",
            "in": "body",
            "description": "List of groups required for the TFA verification",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if an operation is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "settings/TFA settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get TFA settings",
        "description": "Returns the current two-factor authentication settings.",
        "responses": {
          "200": {
            "description": "TFA settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TfaSettingsWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/tfaappnewcodes": {
      "put": {
        "tags": [
          "settings/TFA settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Request the TFA codes",
        "description": "Requests the new backup codes for the two-factor authentication application.",
        "responses": {
          "200": {
            "description": "New backup codes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/tfaappnewapp": {
      "put": {
        "tags": [
          "settings/TFA settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Unlink the TFA application",
        "description": "Unlinks the current two-factor authentication application from the user account specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/push/docregisterdevice": {
      "post": {
        "tags": [
          "settings/Firebase"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Saves the Documents Firebase device token",
        "description": "Saves the Firebase device token specified in the request for the Documents application.",
        "parameters": [
          {
            "name": "firebaseDeviceToken",
            "in": "body",
            "description": "Firebase device token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "FireBase user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FireBaseUser"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/push/projregisterdevice": {
      "post": {
        "tags": [
          "settings/Firebase"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Saves the Projects Firebase device token",
        "description": "Saves the Firebase device token specified in the request for the Projects application.",
        "parameters": [
          {
            "name": "firebaseDeviceToken",
            "in": "body",
            "description": "Firebase device token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Firebase user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FireBaseUser"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/telegramisconnected": {
      "get": {
        "tags": [
          "settings/Telegram"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Check the Telegram connection",
        "description": "Checks if the current user is connected to the Telegram Bot or not.",
        "responses": {
          "200": {
            "description": "Integer value: 0 - not connected, 1 - connected, 2 - awaiting confirmation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/telegramdisconnect": {
      "delete": {
        "tags": [
          "settings/Telegram"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Unlink Telegram",
        "description": "Unlinks the Telegram Bot from your account."
      }
    },
    "/api/2.0/settings/welcome/close": {
      "put": {
        "tags": [
          "settings/Common settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Close the welcome pop-up notification",
        "description": "Closes the welcome pop-up notification."
      }
    },
    "/api/2.0/settings/closeadminhelper": {
      "put": {
        "tags": [
          "settings/Common settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Close the admin helper notification",
        "description": "Closes the admin helper notification."
      }
    },
    "/api/2.0/settings/customnavigation/getall": {
      "get": {
        "tags": [
          "settings/Custom navigation"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the custom navigation items",
        "description": "Returns a list of the custom navigation items.",
        "responses": {
          "200": {
            "description": "List of the custom navigation items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomNavigationItem"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/customnavigation/getsample": {
      "get": {
        "tags": [
          "settings/Custom navigation"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a custom navigation item sample",
        "description": "Returns a custom navigation item sample.",
        "responses": {
          "200": {
            "description": "Custom navigation item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomNavigationItem"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/customnavigation/get/{id}": {
      "get": {
        "tags": [
          "settings/Custom navigation"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a custom navigation item by ID",
        "description": "Returns a custom navigation item by the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Custom navigation item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomNavigationItem"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/customnavigation/create": {
      "post": {
        "tags": [
          "settings/Custom navigation"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Add a custom navigation item",
        "description": "Adds a custom navigation item with the parameters specified in the request.",
        "parameters": [
          {
            "name": "item",
            "in": "body",
            "description": "Item parameters",
            "schema": {
              "$ref": "#/components/schemas/CustomNavigationItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Custom navigation item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomNavigationItem"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/customnavigation/delete/{id}": {
      "delete": {
        "tags": [
          "settings/Custom navigation"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Delete a custom navigation item",
        "description": "Deletes a custom navigation item with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ]
      }
    },
    "/api/2.0/settings/emailactivation": {
      "put": {
        "tags": [
          "settings/Common settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the email activation settings",
        "description": "Updates the email activation settings.",
        "parameters": [
          {
            "name": "show",
            "in": "body",
            "description": "Specifies whether to show the email activation panel to the user or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated email activation settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailActivationSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/statistics/spaceusage/{id}": {
      "get": {
        "tags": [
          "settings/Statistics"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the space usage statistics",
        "description": "Returns the space usage statistics of the module with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Module ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Module space usage statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsageSpaceStatItemWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/statistics/visit": {
      "get": {
        "tags": [
          "settings/Statistics"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the visit statistics",
        "description": "Returns the user visit statistics for the period specified in the request.",
        "parameters": [
          {
            "name": "fromDate",
            "in": "body",
            "description": "Start period date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "in": "body",
            "description": "End period date",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of point charts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChartPointWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/storage": {
      "get": {
        "tags": [
          "settings/Storage"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get storages",
        "description": "Returns a list of all the portal storages.",
        "responses": {
          "200": {
            "description": "List of storages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StorageWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "settings/Storage"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update a storage",
        "description": "Updates a storage with the parameters specified in the request.",
        "parameters": [
          {
            "name": "module",
            "in": "body",
            "description": "Storage name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "props",
            "in": "body",
            "description": "New storage properties",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated storage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "settings/Storage"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Reset the storage settings",
        "description": "Resets the storage settings to the default parameters."
      }
    },
    "/api/2.0/settings/storage/progress": {
      "get": {
        "tags": [
          "settings/Storage"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the storage progress",
        "description": "Returns the storage progress.",
        "responses": {
          "200": {
            "description": "Storage progress",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/storage/cdn": {
      "get": {
        "tags": [
          "settings/Storage"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the CDN storages",
        "description": "Returns a list of all the CDN storages.",
        "responses": {
          "200": {
            "description": "List of the CDN storages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StorageWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "settings/Storage"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Update the CDN storage",
        "description": "Updates the CDN storage with the parameters specified in the request.",
        "parameters": [
          {
            "name": "module",
            "in": "body",
            "description": "CDN storage name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "props",
            "in": "body",
            "description": "New CDN storage properties",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated CDN storage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CdnStorageSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "settings/Storage"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Reset the CDN storage settings",
        "description": "Resets the CDN storage settings to the default parameters."
      }
    },
    "/api/2.0/settings/storage/backup": {
      "get": {
        "tags": [
          "settings/Storage"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the backup storages",
        "description": "Returns a list of all the backup storages.",
        "responses": {
          "200": {
            "description": "List of the backup storages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StorageWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/storage/s3/regions": {
      "get": {
        "tags": [
          "settings/Storage"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get Amazon regions",
        "description": "Returns a list of all Amazon regions.",
        "responses": {
          "200": {
            "description": "List of the Amazon regions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/socket": {
      "get": {
        "tags": [
          "settings/Common settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the socket settings",
        "description": "Returns the socket settings.",
        "responses": {
          "200": {
            "description": "Socket settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/smtp": {
      "get": {
        "tags": [
          "settings/SMTP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the SMTP settings",
        "description": "Returns the current portal SMTP settings.",
        "responses": {
          "200": {
            "description": "SMTP settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmtpSettingsWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "settings/SMTP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Save the SMTP settings",
        "description": "Saves the SMTP settings for the current portal.",
        "parameters": [
          {
            "name": "smtpSettings",
            "in": "body",
            "description": "SMTP settings",
            "schema": {
              "$ref": "#/components/schemas/SmtpSettingsWrapper"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SMTP settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmtpSettingsWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "settings/SMTP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Reset the SMTP settings",
        "description": "Resets SMTP settings of the current portal.",
        "responses": {
          "200": {
            "description": "Default SMTP settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmtpSettingsWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/smtp/test": {
      "get": {
        "tags": [
          "settings/SMTP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Test the SMTP settings",
        "description": "Tests the SMTP settings for the current portal (send test message to the user email).",
        "responses": {
          "200": {
            "description": "SMTP operation status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmtpOperationStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/smtp/test/status": {
      "get": {
        "tags": [
          "settings/SMTP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the SMTP test process status",
        "description": "Returns the SMTP test process status.",
        "responses": {
          "200": {
            "description": "SMTP operation status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmtpOperationStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/ssov2": {
      "get": {
        "tags": [
          "settings/SSO"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the SSO settings",
        "description": "Returns the current portal SSO settings.",
        "responses": {
          "200": {
            "description": "SSO settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SsoSettingsV2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "settings/SSO"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Save the SSO settings",
        "description": "Saves the SSO settings for the current portal.",
        "parameters": [
          {
            "name": "serializeSettings",
            "in": "body",
            "description": "Serialized SSO settings",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SSO settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SsoSettingsV2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "settings/SSO"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Reset the SSO settings",
        "description": "Resets the SSO settings of the current portal.",
        "responses": {
          "200": {
            "description": "Default SSO settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SsoSettingsV2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/ssov2/default": {
      "get": {
        "tags": [
          "settings/SSO"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the default SSO settings",
        "description": "Returns the default portal SSO settings.",
        "responses": {
          "200": {
            "description": "Default SSO settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SsoSettingsV2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/ssov2/constants": {
      "get": {
        "tags": [
          "settings/SSO"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the SSO settings constants",
        "description": "Returns the SSO settings constants.",
        "responses": {
          "200": {
            "description": "The SSO settings constants",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/ldap": {
      "get": {
        "tags": [
          "settings/LDAP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the LDAP settings",
        "description": "Returns the current portal LDAP settings.",
        "responses": {
          "200": {
            "description": "LDAP settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LdapSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "settings/LDAP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Save the LDAP settings",
        "description": "Saves the LDAP settings specified in the request and starts importing/synchronizing users and groups by LDAP.",
        "parameters": [
          {
            "name": "settings",
            "in": "body",
            "description": "LDAP settings in the serialized string format",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "acceptCertificate",
            "in": "body",
            "description": "Specifies if a certificate will be accepted (true) or not (false)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LdapOperationStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/ldap/cron": {
      "get": {
        "tags": [
          "settings/LDAP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the LDAP cron expression",
        "description": "Returns the LDAP autosynchronous cron expression for the current portal if it exists.",
        "responses": {
          "200": {
            "description": "Cron expression or null",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "settings/LDAP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set the LDAP cron expression",
        "description": "Sets the LDAP autosynchronous cron expression to the current portal.",
        "parameters": [
          {
            "name": "cron",
            "in": "body",
            "description": "Cron expression",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/api/2.0/settings/ldap/sync": {
      "get": {
        "tags": [
          "settings/LDAP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Synchronize with LDAP server",
        "description": "Synchronizes the portal data with the new information from the LDAP server.",
        "responses": {
          "200": {
            "description": "Operation status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LdapOperationStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/ldap/sync/test": {
      "get": {
        "tags": [
          "settings/LDAP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Test the LDAP synchronization",
        "description": "Starts the process of collecting preliminary changes on the portal during the synchronization process according to the selected LDAP settings.",
        "responses": {
          "200": {
            "description": "Operation status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LdapOperationStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/ldap/save/test": {
      "post": {
        "tags": [
          "settings/LDAP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Test the LDAP saving process",
        "description": "Starts the process of saving LDAP settings and collecting preliminary changes on the portal according to them.",
        "parameters": [
          {
            "name": "settings",
            "in": "body",
            "description": "LDAP settings in the serialized string format",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "acceptCertificate",
            "in": "body",
            "description": "Specifies if a certificate will be accepted (true) or not (false)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LdapOperationStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/ldap/status": {
      "get": {
        "tags": [
          "settings/LDAP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the LDAP synchronization process status",
        "description": "Returns the LDAP synchronization process status.",
        "responses": {
          "200": {
            "description": "Operation status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LdapOperationStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/ldap/default": {
      "get": {
        "tags": [
          "settings/LDAP"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the LDAP default settings",
        "description": "Returns the LDAP default settings.",
        "responses": {
          "200": {
            "description": "LDAP default settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LdapSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/": {
      "get": {
        "tags": [
          "settings/Common settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the portal settings",
        "description": "Returns a list of all the available portal settings with the current values for each parameter.",
        "responses": {
          "200": {
            "description": "Settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/quota": {
      "get": {
        "tags": [
          "settings/Quota"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the space usage",
        "description": "Returns the space usage quota for the portal with the specified space usage for each module.",
        "responses": {
          "200": {
            "description": "Space usage and limits for upload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuotaWrapper"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/userquotasettings": {
      "post": {
        "tags": [
          "settings/User quota"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Save user quota limit",
        "description": "Save user quota limit",
        "responses": {
          "200": {
            "description": "Operation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantUserQuotaSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/tenantquotasettings": {
      "put": {
        "tags": [
          "settings/Tenant quota"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set tenant quota settings",
        "description": "Set tenant quota settings",
        "responses": {
          "200": {
            "description": "Operation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantQuotaSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/recalculatequota": {
      "get": {
        "tags": [
          "settings/Quota"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Recalculate quota",
        "description": "Starts the process of recalculating quota."
      }
    },
    "/api/2.0/settings/checkrecalculatequota": {
      "get": {
        "tags": [
          "settings/Quota"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Check quota recalculation",
        "description": "Checks the process of recalculating quota.",
        "responses": {
          "200": {
            "description": "Boolean value: true - quota recalculation process is enabled, false - quota recalculation process is disabled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/userquota": {
      "put": {
        "tags": [
          "settings/User quota"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Change a user quota limit",
        "description": "Changes a quota limit for the users with the IDs specified in the request.",
        "parameters": [
          {
            "name": "userIds",
            "in": "body",
            "description": "List of user IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "quota",
            "in": "body",
            "description": "User quota",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeWraperFull"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/recalculateuserquota": {
      "get": {
        "tags": [
          "settings/Quota"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Recalculates quota",
        "description": "Starts the process of recalculating users quota."
      }
    },
    "/api/2.0/settings/checkrecalculateuserquota": {
      "get": {
        "tags": [
          "settings/Quota"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Check users quota recalculating",
        "description": "Checks the process of recalculating users quota.",
        "responses": {
          "200": {
            "description": "Boolean value: True - quota recalculating process is running, False - quota recalculating process is stopped",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/security": {
      "get": {
        "tags": [
          "settings/Security"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the security settings",
        "description": "Returns the security settings for the modules specified in the request.",
        "parameters": [
          {
            "name": "ids",
            "in": "body",
            "description": "List of module IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Security settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SecurityWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "settings/Security"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set the module security settings",
        "description": "Sets the security settings to the module with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Module ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enabled",
            "in": "body",
            "description": "Specifies if the selected module is enabled or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "subjects",
            "in": "body",
            "description": "List of user/group IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Security settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SecurityWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/security/{id}": {
      "get": {
        "tags": [
          "settings/Security"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the module availability",
        "description": "Returns the availability of the module with the ID specified in the request.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Module ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean value: true - module is enabled, false - module is disabled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/security/password": {
      "get": {
        "tags": [
          "settings/Security"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the password settings",
        "description": "Returns the portal password settings.",
        "responses": {
          "200": {
            "description": "Password settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "settings/Security"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set the password settings",
        "description": "Sets the portal password settings.",
        "parameters": [
          {
            "name": "maxLength",
            "in": "body",
            "description": "Maximum length",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "minLength",
            "in": "body",
            "description": "Minimum length",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "upperCase",
            "in": "body",
            "description": "Specifies whether to include uppercase letters or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "digits",
            "in": "body",
            "description": "Specifies whether to include digits or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "specSymbols",
            "in": "body",
            "description": "Specifies whether to include special symbols or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/security/access": {
      "put": {
        "tags": [
          "settings/Security"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set the security settings to modules",
        "description": "Sets the security settings to the modules with the IDs specified in the request.",
        "parameters": [
          {
            "name": "items",
            "in": "body",
            "description": "Modules with security information",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Security settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SecurityWrapper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/security/administrator/{productid}": {
      "get": {
        "tags": [
          "settings/Security"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the product administrators",
        "description": "Returns a list of all the administrators of the product with the ID specified in the request.",
        "parameters": [
          {
            "name": "productid",
            "in": "path",
            "description": "Product ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of product administrators",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeWraper"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/security/administrator": {
      "get": {
        "tags": [
          "settings/Security"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Check the product administrator",
        "description": "Checks if the selected user is an administrator of a product with the ID specified in the request.",
        "parameters": [
          {
            "name": "productid",
            "in": "body",
            "description": "Product ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userid",
            "in": "body",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object with the user security information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "settings/Security"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Set the product administrator",
        "description": "Sets the selected user as an administrator of a product with the ID specified in the request.",
        "parameters": [
          {
            "name": "productid",
            "in": "body",
            "description": "Product ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userid",
            "in": "body",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "administrator",
            "in": "body",
            "description": "Specifies if a user will be a product administrator or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object with the user security information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/logo": {
      "get": {
        "tags": [
          "settings/Common settings"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get a portal logo",
        "description": "Returns the portal logo image URL.",
        "parameters": [
          {
            "name": "dark",
            "in": "body",
            "description": "Specifies if the portal logo will be used for the dark theme or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Portal logo image URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings//iprestrictions": {
      "get": {
        "tags": [
          "settings/IP restrictions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Get the IP portal restrictions",
        "description": "Returns the IP portal restrictions.",
        "responses": {
          "200": {
            "description": "IP restrictions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IPRestriction"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/settings/iprestrictions": {
      "put": {
        "tags": [
          "settings/IP restrictions"
        ],
        "security": [
          {
            "AuthorizationHeader": [
              "read",
              "write"
            ]
          }
        ],
        "summary": "Save the IP restrictions",
        "description": "Saves the new portal IP restrictions specified in the request.",
        "parameters": [
          {
            "name": "ips",
            "in": "body",
            "description": "New IP restrictions",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IPRestrictionBase"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New IP restrictions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IPRestrictionBase"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/2.0/capabilities/": {
      "get": {
        "tags": [
          "capabilities"
        ],
        "summary": "Get portal capabilities",
        "description": "Returns the information about portal capabilities.",
        "responses": {
          "200": {
            "description": "Portal capabilities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CapabilitiesData"
                }
              }
            }
          }
        }
      }
    },
    "/api/2.0/authentication/": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Authenticate a user",
        "description": "Authenticates the current user by SMS, authenticator app, or without two-factor authentication.",
        "parameters": [
          {
            "name": "userName",
            "in": "body",
            "description": "User name or email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "body",
            "description": "Password",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "provider",
            "in": "body",
            "description": "Social media provider type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accessToken",
            "in": "body",
            "description": "Provider token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "codeOAuth",
            "in": "body",
            "description": "Code for getting a token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication token to use in the 'Authorization' header when calling API methods",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationTokenData"
                }
              }
            }
          }
        }
      }
    },
    "/api/2.0/authentication/setphone": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Set a mobile phone",
        "description": "Sets a mobile phone for the user with the name specified in the request.",
        "parameters": [
          {
            "name": "userName",
            "in": "body",
            "description": "User name or email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "body",
            "description": "Password",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "provider",
            "in": "body",
            "description": "Social media provider type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accessToken",
            "in": "body",
            "description": "Provider token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mobilePhone",
            "in": "body",
            "description": "New mobile phone",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication data: authentication by SMS or not, phone number, SMS expiration time",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationTokenData"
                }
              }
            }
          }
        }
      }
    },
    "/api/2.0/authentication/sendsms": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Send SMS code",
        "description": "Sends SMS with an authentication code.",
        "parameters": [
          {
            "name": "userName",
            "in": "body",
            "description": "User name or email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "body",
            "description": "Password",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "provider",
            "in": "body",
            "description": "Social media provider type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accessToken",
            "in": "body",
            "description": "Provider token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication data: authentication by SMS or not, phone number, SMS expiration time",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationTokenData"
                }
              }
            }
          }
        }
      }
    },
    "/api/2.0/authentication/{code}": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Authenticate a user by code",
        "description": "Authenticates the current user by SMS or two-factor authentication code.",
        "parameters": [
          {
            "name": "userName",
            "in": "body",
            "description": "User name or email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "body",
            "description": "Password",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "provider",
            "in": "body",
            "description": "Social media provider type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accessToken",
            "in": "body",
            "description": "Provider token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Two-factor authentication code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "codeOAuth",
            "in": "body",
            "description": "Code for getting a token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Two-factor authentication token to use in the 'Authorization' header when calling API methods",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationTokenData"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "AuthorizationHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    },
    "schemas": {
      "PublicItem": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "IsGroup": {
            "type": "boolean"
          }
        }
      },
      "SharingOptions": {
        "type": "object",
        "properties": {
          "SharedForAll": {
            "type": "boolean"
          },
          "PublicItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicItem"
            }
          }
        }
      },
      "GetString": {
        "type": "object",
        "properties": {
          "Method": {
            "type": "object"
          },
          "Target": {
            "type": "object"
          }
        }
      },
      "CalendarContext": {
        "type": "object",
        "properties": {
          "GetGroupMethod": {
            "$ref": "#/components/schemas/GetString"
          },
          "Group": {
            "type": "string"
          },
          "HtmlTextColor": {
            "type": "string"
          },
          "HtmlBackgroundColor": {
            "type": "string"
          },
          "CanChangeTimeZone": {
            "type": "boolean"
          },
          "CanChangeAlertType": {
            "type": "boolean"
          }
        }
      },
      "BaseCalendar": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "OwnerId": {
            "type": "string",
            "format": "uuid"
          },
          "EventAlertType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Never",
              "FiveMinutes",
              "FifteenMinutes",
              "HalfHour",
              "Hour",
              "TwoHours",
              "Day",
              "Default"
            ],
            "description": "[0 - Never, 1 - FiveMinutes, 2 - FifteenMinutes, 3 - HalfHour, 4 - Hour, 5 - TwoHours, 6 - Day, -1 - Default]"
          },
          "SharingOptions": {
            "$ref": "#/components/schemas/SharingOptions"
          },
          "TimeZone": {
            "type": "object"
          },
          "Context": {
            "$ref": "#/components/schemas/CalendarContext"
          }
        }
      },
      "AccessOption": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "example": "read"
          },
          "Name": {
            "type": "string",
            "example": "Read only"
          },
          "Default": {
            "type": "boolean",
            "example": "true"
          },
          "DefaultStyle": {
            "type": "string",
            "example": "read"
          },
          "ReadOption": {
            "type": "object"
          },
          "FullAccessOption": {
            "type": "object"
          },
          "OwnerOption": {
            "type": "object"
          },
          "CalendarStandartOptions": {
            "type": "object"
          }
        }
      },
      "PublicItemWrapper": {
        "type": "object",
        "properties": {
          "ItemId": {
            "type": "string",
            "example": "2fdfe577-3c26-4736-9df9-b5a683bb8520"
          },
          "ItemName": {
            "type": "string",
            "example": "Everyone"
          },
          "IsGroup": {
            "type": "boolean",
            "example": "true"
          },
          "CanEdit": {
            "type": "boolean",
            "example": "true"
          },
          "SharingOption": {
            "$ref": "#/components/schemas/AccessOption"
          },
          "Id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "PublicItemCollection": {
        "type": "object",
        "properties": {
          "AvailableOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessOption"
            }
          },
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicItemWrapper"
            }
          }
        }
      },
      "UserParams": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid",
            "example": "2fdfe577-3c26-4736-9df9-b5a683bb8520"
          },
          "Name": {
            "type": "string",
            "example": "Valery Zykov"
          }
        }
      },
      "CalendarPermissions": {
        "type": "object",
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/PublicItemCollection"
          },
          "UserParams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserParams"
            }
          }
        }
      },
      "EventAlertWrapper": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "integer",
            "format": "int32",
            "example": "-1"
          }
        }
      },
      "Permissions": {
        "type": "object",
        "properties": {
          "UserParams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserParams"
            }
          }
        }
      },
      "EventWrapper": {
        "type": "object",
        "properties": {
          "UserId": {
            "type": "string",
            "format": "uuid"
          },
          "Id": {
            "type": "string",
            "example": "1"
          },
          "Uid": {
            "type": "string",
            "example": "1234wda"
          },
          "TenantId": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "Todo": {
            "type": "boolean",
            "example": "true"
          },
          "CalendarId": {
            "type": "string",
            "example": "calendarID"
          },
          "Name": {
            "type": "string",
            "example": "Event Name"
          },
          "Description": {
            "type": "string",
            "example": "Event Description"
          },
          "AllDayLong": {
            "type": "boolean",
            "example": "false"
          },
          "Start": {
            "type": "string",
            "example": "2020-12-01T06:36:10.8645482Z"
          },
          "End": {
            "type": "string",
            "example": "2020-12-01T06:36:10.8645482Z"
          },
          "RepeatRule": {
            "type": "string",
            "example": ""
          },
          "Alert": {
            "$ref": "#/components/schemas/EventAlertWrapper"
          },
          "IsShared": {
            "type": "boolean",
            "example": "true"
          },
          "CanUnsubscribe": {
            "type": "boolean",
            "example": "true"
          },
          "IsEditable": {
            "type": "boolean",
            "example": "false"
          },
          "Permissions": {
            "$ref": "#/components/schemas/Permissions"
          },
          "Owner": {
            "$ref": "#/components/schemas/UserParams"
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Tentative",
              "Confirmed",
              "Cancelled"
            ],
            "description": "[0 - Tentative, 1 - Confirmed, 2 - Cancelled]",
            "example": "0"
          },
          "HasAttachments": {
            "type": "boolean"
          }
        }
      },
      "TodoWrapper": {
        "type": "object",
        "properties": {
          "UserId": {
            "type": "string",
            "format": "uuid"
          },
          "Id": {
            "type": "string",
            "example": "1"
          },
          "Uid": {
            "type": "string",
            "example": "123wda"
          },
          "TenantId": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "CalendarId": {
            "type": "string",
            "example": "calendarID"
          },
          "Name": {
            "type": "string",
            "example": "Todo Name"
          },
          "Description": {
            "type": "string",
            "example": "Todo Description"
          },
          "Start": {
            "type": "string",
            "example": "2020-12-01T06:36:10.8645482Z"
          },
          "Completed": {
            "type": "string",
            "example": "2020-12-01T06:36:10.8645482Z"
          },
          "Owner": {
            "$ref": "#/components/schemas/UserParams"
          }
        }
      },
      "TimeZoneWrapper": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "example": "UTC"
          },
          "Id": {
            "type": "string",
            "example": "UTC"
          },
          "Offset": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          }
        }
      },
      "CalendarWrapper": {
        "type": "object",
        "properties": {
          "UserCalendar": {
            "$ref": "#/components/schemas/BaseCalendar"
          },
          "IsSubscription": {
            "type": "boolean",
            "example": "false"
          },
          "iCalUrl": {
            "type": "string",
            "example": ""
          },
          "IsiCalStream": {
            "type": "boolean",
            "example": "false"
          },
          "IsHidden": {
            "type": "boolean",
            "example": "false"
          },
          "CanAlertModify": {
            "type": "boolean",
            "example": "true"
          },
          "IsShared": {
            "type": "boolean",
            "example": "true"
          },
          "Permissions": {
            "$ref": "#/components/schemas/CalendarPermissions"
          },
          "IsEditable": {
            "type": "boolean",
            "example": "true"
          },
          "TextColor": {
            "type": "string",
            "example": "#ffffff"
          },
          "BackgroundColor": {
            "type": "string",
            "example": "#000000"
          },
          "Description": {
            "type": "string",
            "example": "Calendar Description"
          },
          "Title": {
            "type": "string",
            "example": "Calendar Name"
          },
          "Id": {
            "type": "string",
            "example": "1"
          },
          "IsTodo": {
            "type": "integer",
            "format": "int32",
            "example": "false"
          },
          "Owner": {
            "$ref": "#/components/schemas/UserParams"
          },
          "IsAcceptedSubscription": {
            "type": "boolean",
            "example": "false"
          },
          "Events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventWrapper"
            }
          },
          "Todos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TodoWrapper"
            }
          },
          "DefaultAlertType": {
            "$ref": "#/components/schemas/EventAlertWrapper"
          },
          "TimeZoneInfo": {
            "$ref": "#/components/schemas/TimeZoneWrapper"
          },
          "CanEditTimeZone": {
            "type": "boolean",
            "example": "false"
          }
        }
      },
      "SubscriptionWrapper": {
        "type": "object",
        "properties": {
          "IsAccepted": {
            "type": "boolean",
            "example": "false"
          },
          "IsNew": {
            "type": "boolean",
            "example": "true"
          },
          "Group": {
            "type": "string",
            "example": "Personal Calendars"
          },
          "Permissions": {
            "$ref": "#/components/schemas/CalendarPermissions"
          },
          "UserCalendar": {
            "$ref": "#/components/schemas/BaseCalendar"
          },
          "IsSubscription": {
            "type": "boolean",
            "example": "false"
          },
          "iCalUrl": {
            "type": "string",
            "example": ""
          },
          "IsiCalStream": {
            "type": "boolean",
            "example": "false"
          },
          "IsHidden": {
            "type": "boolean",
            "example": "false"
          },
          "CanAlertModify": {
            "type": "boolean",
            "example": "true"
          },
          "IsShared": {
            "type": "boolean",
            "example": "true"
          },
          "IsEditable": {
            "type": "boolean",
            "example": "true"
          },
          "TextColor": {
            "type": "string",
            "example": "#ffffff"
          },
          "BackgroundColor": {
            "type": "string",
            "example": "#000000"
          },
          "Description": {
            "type": "string",
            "example": "Calendar Description"
          },
          "Title": {
            "type": "string",
            "example": "Calendar Name"
          },
          "Id": {
            "type": "string",
            "example": "1"
          },
          "IsTodo": {
            "type": "integer",
            "format": "int32",
            "example": "false"
          },
          "Owner": {
            "$ref": "#/components/schemas/UserParams"
          },
          "IsAcceptedSubscription": {
            "type": "boolean",
            "example": "false"
          },
          "Events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventWrapper"
            }
          },
          "Todos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TodoWrapper"
            }
          },
          "DefaultAlertType": {
            "$ref": "#/components/schemas/EventAlertWrapper"
          },
          "TimeZoneInfo": {
            "$ref": "#/components/schemas/TimeZoneWrapper"
          },
          "CanEditTimeZone": {
            "type": "boolean",
            "example": "false"
          }
        }
      },
      "SharingParam": {
        "type": "object",
        "properties": {
          "actionId": {
            "type": "string"
          },
          "itemId": {
            "type": "string",
            "format": "uuid"
          },
          "isGroup": {
            "type": "boolean"
          },
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "IsGroup": {
            "type": "boolean"
          }
        }
      },
      "DavResponse": {
        "type": "object",
        "properties": {
          "Completed": {
            "type": "boolean"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "Data": {
            "type": "string"
          },
          "Error": {
            "type": "string"
          }
        }
      },
      "calendar": {
        "type": "object",
        "properties": {
          "ContentEncoding": {
            "type": "object"
          },
          "ContentStream": {
            "type": "object"
          },
          "ContentType": {
            "type": "object"
          },
          "ContentDisposition": {
            "type": "object"
          }
        }
      },
      "EventHistoryWrapper": {
        "type": "object",
        "properties": {
          "CalendarId": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "EventUid": {
            "type": "string",
            "example": "uid1@onlyoffice.com"
          },
          "EventId": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "MergedIcs": {
            "type": "string",
            "example": "BEGIN:VCALENDAR\n            VERSION:2.0\n            PRODID:onlyoffice.com\n            BEGIN:VEVENT\n            UID:uid1@onlyoffice.com\n            DTSTAMP:19970714T170000Z\n            ORGANIZER;CN=John Doe:MAILTO:john.doe@example.com\n            DTSTART:19970714T170000Z\n            DTEND:19970715T035959Z\n            SUMMARY:Bastille Day Party\n            END:VEVENT\n            END:VCALENDAR"
          },
          "CanEdit": {
            "type": "boolean",
            "example": "true"
          },
          "CanNotify": {
            "type": "boolean",
            "example": "true"
          },
          "Ics": {
            "type": "string",
            "example": "some text"
          },
          "TimeZoneInfo": {
            "$ref": "#/components/schemas/TimeZoneWrapper"
          },
          "CalendarName": {
            "type": "string",
            "example": "Calendar name"
          }
        }
      },
      "EmployeeWraper": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "DisplayName": {
            "type": "string",
            "example": "Mike Zanyatski"
          },
          "Title": {
            "type": "string",
            "example": "Manager"
          },
          "AvatarSmall": {
            "type": "string",
            "example": "url to small avatar"
          },
          "ProfileUrl": {
            "type": "string",
            "example": "\\/Products\\/People\\/Profile.aspx?user=administrator"
          }
        }
      },
      "PageWrapper": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "example": "Page name"
          },
          "Content": {
            "type": "string",
            "example": "Page content"
          },
          "UpdatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-08T17:37:03.3164965Z"
          }
        }
      },
      "CommentWrapper": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "ParentId": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "Page": {
            "type": "string",
            "example": "Some page"
          },
          "Content": {
            "type": "string",
            "example": "Comment content"
          },
          "Author": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "LastModified": {
            "type": "string",
            "example": "2020-12-08T17:37:03.3304954Z"
          },
          "Inactive": {
            "type": "boolean",
            "example": "false"
          }
        }
      },
      "FileWrapper": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "example": "File name"
          },
          "UpdatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-08T17:37:03.3424957Z"
          },
          "Location": {
            "type": "string",
            "example": "4\\\\46\\\\File name"
          }
        }
      },
      "Attachment": {
        "type": "object",
        "properties": {
          "FileName": {
            "type": "string"
          },
          "FilePath": {
            "type": "string"
          }
        },
        "example": "null"
      },
      "CommentInfo": {
        "type": "object",
        "properties": {
          "CommentID": {
            "type": "string",
            "example": "12261949-db62-43c2-b956-91e12c412d5a"
          },
          "UserID": {
            "type": "string",
            "format": "uuid",
            "example": "15985c13-ad91-4f2c-9286-cf991448e796"
          },
          "UserPost": {
            "type": "string",
            "example": "null"
          },
          "UserFullName": {
            "type": "string",
            "example": "Administrator"
          },
          "UserProfileLink": {
            "type": "string",
            "example": "\\/Products\\/People\\/Profile.aspx?user=administrator"
          },
          "UserAvatarPath": {
            "type": "string",
            "example": "\\/skins\\/default\\/images\\/default_user_photo_size_82-82.png"
          },
          "CommentBody": {
            "type": "string",
            "example": "das\\u000a"
          },
          "Inactive": {
            "type": "boolean",
            "example": "false"
          },
          "IsRead": {
            "type": "boolean",
            "example": "true"
          },
          "IsEditPermissions": {
            "type": "boolean",
            "example": "true"
          },
          "IsResponsePermissions": {
            "type": "boolean",
            "example": "true"
          },
          "TimeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "TimeStampStr": {
            "type": "string",
            "example": "15:39 Today"
          },
          "CommentList": {
            "type": "object",
            "example": "null"
          },
          "Attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          }
        }
      },
      "BlogPostWrapperSummary": {
        "type": "object",
        "properties": {
          "Preview": {
            "type": "string",
            "example": "Preview post"
          },
          "Title": {
            "type": "string",
            "example": "Example post"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-03T21:36:12.0774137Z"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-03T21:36:12.0774137Z"
          },
          "Id": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "Tags": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Tag1,Tag1"
            }
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "BlogTitle": {
            "type": "string",
            "example": "Blog Title"
          }
        }
      },
      "BlogPostWrapperFull": {
        "type": "object",
        "properties": {
          "Text": {
            "type": "string",
            "example": "Post text"
          },
          "Title": {
            "type": "string",
            "example": "Example post"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-06T07:36:14.7981820Z"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-06T07:36:14.7981820Z"
          },
          "Id": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          }
        }
      },
      "BlogTagWrapper": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "example": "Sample tag"
          },
          "Count": {
            "type": "integer",
            "format": "int32",
            "example": "10"
          }
        }
      },
      "BlogPostCommentWrapper": {
        "type": "object",
        "properties": {
          "Text": {
            "type": "string",
            "example": "comment text"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-03T21:36:13.0325127Z"
          },
          "Updated": {
            "type": "string",
            "example": "c2020-12-03T21:36:13.0325127Z"
          },
          "Id": {
            "type": "string",
            "format": "uuid",
            "example": "c2020-12-03T21:36:13.0325127Z"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          }
        }
      },
      "BookmarkWrapper": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64",
            "example": "11"
          },
          "Title": {
            "type": "string",
            "example": "Google inc."
          },
          "Url": {
            "type": "string",
            "example": "http:\\/\\/www.google.com"
          },
          "Thumbnail": {
            "type": "string",
            "example": "Url to thumbnail"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-06T07:36:14.8181893Z"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-06T07:36:14.8181893Z"
          },
          "Description": {
            "type": "string",
            "example": "Google"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          }
        }
      },
      "TagWrapper": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "example": "Sample tag"
          },
          "Count": {
            "type": "integer",
            "format": "int64",
            "example": "10"
          }
        }
      },
      "BookmarkCommentWrapper": {
        "type": "object",
        "properties": {
          "Text": {
            "type": "string",
            "example": "comment text"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-06T07:36:14.8151911Z"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-06T07:36:14.8151911Z"
          },
          "Id": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "ParentId": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          }
        }
      },
      "VoteWrapper": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64",
            "example": "133"
          },
          "Name": {
            "type": "string",
            "example": "Variant 1"
          },
          "Votes": {
            "type": "integer",
            "format": "int32",
            "example": "100"
          }
        }
      },
      "PollWrapper": {
        "type": "object",
        "properties": {
          "PollType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "SimpleAnswer",
              "MultipleAnswer"
            ],
            "description": "[0 - SimpleAnswer, 1 - MultipleAnswer]",
            "example": "0"
          },
          "EndDate": {
            "type": "string",
            "example": "2020-12-07T13:56:02.2859248Z"
          },
          "StartDate": {
            "type": "string",
            "example": "2020-12-07T13:56:02.2859248Z"
          },
          "Voted": {
            "type": "boolean",
            "example": "false"
          },
          "Votes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VoteWrapper"
            }
          }
        }
      },
      "EventWrapperFull": {
        "type": "object",
        "properties": {
          "Text": {
            "type": "string",
            "example": "Text of feed"
          },
          "Poll": {
            "$ref": "#/components/schemas/PollWrapper"
          },
          "Id": {
            "type": "integer",
            "format": "int64",
            "example": "10"
          },
          "Title": {
            "type": "string",
            "example": "Manager"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-07T13:56:02.2729203Z"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-07T13:56:02.2729203Z"
          },
          "Type": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "News",
              "Order",
              "Advert",
              "AllNews",
              "Poll",
              "All"
            ],
            "description": "[0 - None, 1 - News, 2 - Order, 4 - Advert, 7 - AllNews, 8 - Poll, 15 - All]",
            "example": "1"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          }
        }
      },
      "EventCommentWrapper": {
        "type": "object",
        "properties": {
          "Text": {
            "type": "string",
            "example": "comment text"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-07T13:56:02.2899133Z"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-07T13:56:02.2899133Z"
          },
          "Id": {
            "type": "integer",
            "format": "int64",
            "example": "10"
          },
          "ParentId": {
            "type": "integer",
            "format": "int64",
            "example": "123"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          }
        }
      },
      "ForumThreadWrapper": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "10"
          },
          "Title": {
            "type": "string",
            "example": "The Thread"
          },
          "Description": {
            "type": "string",
            "example": "Sample thread"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-07T13:56:02.3249197Z"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-07T13:56:02.3249197Z"
          },
          "RecentTopicId": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          },
          "RecentTopicTitle": {
            "type": "string",
            "example": "Sample topic"
          },
          "UpdatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          }
        }
      },
      "ForumCategoryWrapper": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "Title": {
            "type": "string",
            "example": "Sample title"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-07T13:56:02.3459179Z"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-07T13:56:02.3459179Z"
          },
          "Description": {
            "type": "string",
            "example": "Sample category"
          },
          "Threads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ForumThreadWrapper"
            }
          }
        }
      },
      "ForumWrapper": {
        "type": "object",
        "properties": {
          "Categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ForumCategoryWrapper"
            }
          }
        }
      },
      "ForumTopicWrapper": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "10"
          },
          "Title": {
            "type": "string",
            "example": "Sample topic"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-07T13:56:02.3259212Z"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-07T13:56:02.3259212Z"
          },
          "Text": {
            "type": "string",
            "example": "This is sample post"
          },
          "UpdatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "ThreadTitile": {
            "type": "string",
            "example": "null"
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Normal",
              "Closed",
              "Sticky"
            ],
            "description": "[0 - Normal, 1 - Closed, 2 - Sticky]",
            "example": "0"
          },
          "Type": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Informational",
              "Poll"
            ],
            "description": "[0 - Informational, 1 - Poll]",
            "example": "0"
          },
          "Tags": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Tag1,Tag2"
            }
          }
        }
      },
      "ForumThreadWrapperFull": {
        "type": "object",
        "properties": {
          "Topics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ForumTopicWrapper"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "10"
          },
          "Title": {
            "type": "string",
            "example": "The Thread"
          },
          "Description": {
            "type": "string",
            "example": "Sample thread"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-07T13:56:02.3249197Z"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-07T13:56:02.3249197Z"
          },
          "RecentTopicId": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          },
          "RecentTopicTitle": {
            "type": "string",
            "example": "Sample topic"
          },
          "UpdatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          }
        }
      },
      "ForumTopicPostAttachmentWrapper": {
        "type": "object",
        "properties": {
          "Created": {
            "type": "string",
            "example": "2020-12-07T13:56:02.3269198Z"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-07T13:56:02.3269198Z"
          },
          "Name": {
            "type": "string",
            "example": "picture.jpg"
          },
          "ContentType": {
            "type": "string",
            "example": "image/jpeg"
          },
          "Size": {
            "type": "integer",
            "format": "int32",
            "example": "122345"
          },
          "Path": {
            "type": "string",
            "example": "url to file"
          }
        }
      },
      "ForumTopicPostWrapper": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "123"
          },
          "Subject": {
            "type": "string",
            "example": "Sample subject"
          },
          "Text": {
            "type": "string",
            "example": "Post text"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-07T13:56:02.3269198Z"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-07T13:56:02.3269198Z"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "ThreadTitle": {
            "type": "string",
            "example": "Title"
          },
          "Attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ForumTopicPostAttachmentWrapper"
            }
          }
        }
      },
      "ForumTopicWrapperFull": {
        "type": "object",
        "properties": {
          "Posts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ForumTopicPostWrapper"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "10"
          },
          "Title": {
            "type": "string",
            "example": "Sample topic"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-07T13:56:02.3259212Z"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-07T13:56:02.3259212Z"
          },
          "Text": {
            "type": "string",
            "example": "This is sample post"
          },
          "UpdatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "ThreadTitile": {
            "type": "string",
            "example": "null"
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Normal",
              "Closed",
              "Sticky"
            ],
            "description": "[0 - Normal, 1 - Closed, 2 - Sticky]",
            "example": "0"
          },
          "Type": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Informational",
              "Poll"
            ],
            "description": "[0 - Informational, 1 - Poll]",
            "example": "0"
          },
          "Tags": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Tag1,Tag2"
            }
          }
        }
      },
      "ContactInfoWrapper": {
        "type": "object",
        "properties": {
          "InfoType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Phone",
              "Email",
              "Website",
              "Skype",
              "Twitter",
              "LinkedIn",
              "Facebook",
              "Address",
              "LiveJournal",
              "MySpace",
              "GMail",
              "Blogger",
              "Yahoo",
              "MSN",
              "ICQ",
              "Jabber",
              "AIM",
              "VK"
            ],
            "description": "[0 - Phone, 1 - Email, 2 - Website, 3 - Skype, 4 - Twitter, 5 - LinkedIn, 6 - Facebook, 7 - Address, 8 - LiveJournal, 9 - MySpace, 10 - GMail, 11 - Blogger, 12 - Yahoo, 13 - MSN, 14 - ICQ, 15 - Jabber, 16 - AIM, 17 - VK]",
            "example": "1"
          },
          "Category": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "Data": {
            "type": "string",
            "example": "support@onlyoffice.com"
          },
          "CategoryName": {
            "type": "string",
            "example": "Home"
          },
          "IsPrimary": {
            "type": "boolean",
            "example": "true"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "CurrencyInfoWrapper": {
        "type": "object",
        "properties": {
          "Title": {
            "type": "string",
            "example": "Chinese Yuan"
          },
          "Symbol": {
            "type": "string",
            "example": "¥"
          },
          "Abbreviation": {
            "type": "string",
            "example": "CNY"
          },
          "CultureName": {
            "type": "string",
            "example": "CN"
          },
          "IsConvertable": {
            "type": "boolean",
            "example": "true"
          },
          "IsBasic": {
            "type": "boolean",
            "example": "false"
          }
        }
      },
      "ContactBaseWithEmailWrapper": {
        "type": "object",
        "properties": {
          "Email": {
            "$ref": "#/components/schemas/ContactInfoWrapper"
          },
          "SmallFotoUrl": {
            "type": "string",
            "example": "url to foto"
          },
          "MediumFotoUrl": {
            "type": "string",
            "example": "url to foto"
          },
          "DisplayName": {
            "type": "string",
            "example": "Tadjeddine Bachir"
          },
          "IsCompany": {
            "type": "boolean",
            "example": "false"
          },
          "AccessList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeWraper"
            }
          },
          "IsPrivate": {
            "type": "boolean",
            "example": "true"
          },
          "IsShared": {
            "type": "boolean",
            "example": "false"
          },
          "ShareType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "ReadWrite",
              "Read"
            ],
            "description": "[0 - None, 1 - ReadWrite, 2 - Read]",
            "example": "0"
          },
          "Currency": {
            "$ref": "#/components/schemas/CurrencyInfoWrapper"
          },
          "CanEdit": {
            "type": "boolean",
            "example": "true"
          },
          "CanDelete": {
            "type": "boolean",
            "example": "true"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "TaskCategoryBaseWrapper": {
        "type": "object",
        "properties": {
          "ImagePath": {
            "type": "string",
            "example": "path to image"
          },
          "Title": {
            "type": "string",
            "example": "Title"
          },
          "Description": {
            "type": "string",
            "example": "Description"
          },
          "Color": {
            "type": "string",
            "example": "#a7fc00"
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "EntityWrapper": {
        "type": "object",
        "properties": {
          "EntityType": {
            "type": "string",
            "example": "opportunity"
          },
          "EntityId": {
            "type": "integer",
            "format": "int32",
            "example": "123445"
          },
          "EntityTitle": {
            "type": "string",
            "example": "Household appliances internet shop"
          }
        }
      },
      "TaskWrapper": {
        "type": "object",
        "properties": {
          "CreateBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-16T03:11:54.3573531Z"
          },
          "Contact": {
            "$ref": "#/components/schemas/ContactBaseWithEmailWrapper"
          },
          "Title": {
            "type": "string",
            "example": "Send a commercial offer"
          },
          "Description": {
            "type": "string",
            "example": "Description"
          },
          "DeadLine": {
            "type": "string",
            "example": "2020-12-16T03:11:54.3573531Z"
          },
          "AlertValue": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "Responsible": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "IsClosed": {
            "type": "boolean",
            "example": "true"
          },
          "Category": {
            "$ref": "#/components/schemas/TaskCategoryBaseWrapper"
          },
          "Entity": {
            "$ref": "#/components/schemas/EntityWrapper"
          },
          "CanEdit": {
            "type": "boolean",
            "example": "true"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "CurrencyRateInfoWrapper": {
        "type": "object",
        "properties": {
          "Rate": {
            "type": "number",
            "format": "double",
            "example": "1,1"
          },
          "Title": {
            "type": "string",
            "example": "Chinese Yuan"
          },
          "Symbol": {
            "type": "string",
            "example": "¥"
          },
          "Abbreviation": {
            "type": "string",
            "example": "CNY"
          },
          "CultureName": {
            "type": "string",
            "example": "CN"
          },
          "IsConvertable": {
            "type": "boolean",
            "example": "true"
          },
          "IsBasic": {
            "type": "boolean",
            "example": "false"
          }
        }
      },
      "Agent": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid",
            "example": "92eb52c8-bb93-4caf-87fb-46ea11530899"
          },
          "Answer": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Number",
              "Sip",
              "Client"
            ],
            "description": "[0 - Number, 1 - Sip, 2 - Client]",
            "example": "1"
          },
          "ClientID": {
            "type": "string",
            "example": "ClientID"
          },
          "Record": {
            "type": "boolean",
            "example": "true"
          },
          "TimeOut": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Online",
              "Paused",
              "Offline"
            ],
            "description": "[0 - Online, 1 - Paused, 2 - Offline]",
            "example": "1"
          },
          "AllowOutgoingCalls": {
            "type": "boolean",
            "example": "true"
          },
          "PostFix": {
            "type": "string",
            "example": "PostFix"
          },
          "PhoneNumber": {
            "type": "string",
            "example": "PhoneNumber"
          },
          "RedirectToNumber": {
            "type": "string",
            "example": "RedirectToNumber"
          }
        }
      },
      "Queue": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "example": "id"
          },
          "Name": {
            "type": "string",
            "example": "Name"
          },
          "Size": {
            "type": "integer",
            "format": "int32",
            "example": "123"
          },
          "WaitUrl": {
            "type": "string",
            "example": "WaitUrl"
          },
          "WaitTime": {
            "type": "integer",
            "format": "int32",
            "example": "4"
          }
        }
      },
      "WorkingHours": {
        "type": "object",
        "properties": {
          "Enabled": {
            "type": "boolean",
            "example": "true"
          },
          "From": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "timespan",
              "example": "2020-12-22T04:11:57.0469085+00:00"
            }
          },
          "To": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "timespan",
              "example": "2020-12-22T04:11:57.0469085+00:00"
            }
          }
        }
      },
      "VoipSettings": {
        "type": "object",
        "properties": {
          "VoiceUrl": {
            "type": "string",
            "example": "VoiceUrl"
          },
          "Name": {
            "type": "string",
            "example": "Name"
          },
          "Operators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Agent"
            }
          },
          "Queue": {
            "$ref": "#/components/schemas/Queue"
          },
          "Caller": {
            "$ref": "#/components/schemas/Agent"
          },
          "WorkingHours": {
            "$ref": "#/components/schemas/WorkingHours"
          },
          "VoiceMail": {
            "type": "string",
            "example": "VoiceMail"
          },
          "GreetingAudio": {
            "type": "string",
            "example": "GreetingAudio"
          },
          "HoldAudio": {
            "type": "string",
            "example": "HoldAudio"
          },
          "AllowOutgoingCalls": {
            "type": "boolean",
            "example": "true"
          },
          "Pause": {
            "type": "boolean",
            "example": "true"
          },
          "Record": {
            "type": "boolean",
            "example": "true"
          }
        }
      },
      "VoipPhone": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "example": "id"
          },
          "Number": {
            "type": "string",
            "example": "Number"
          },
          "Alias": {
            "type": "string",
            "example": "Alias"
          },
          "Settings": {
            "$ref": "#/components/schemas/VoipSettings"
          },
          "Caller": {
            "$ref": "#/components/schemas/Agent"
          }
        }
      },
      "VoipUpload": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "example": "Name"
          },
          "Path": {
            "type": "string",
            "example": "Path"
          },
          "AudioType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Greeting",
              "HoldUp",
              "VoiceMail",
              "Queue"
            ],
            "description": "[0 - Greeting, 1 - HoldUp, 2 - VoiceMail, 3 - Queue]",
            "example": "1"
          },
          "IsDefault": {
            "type": "boolean",
            "example": "true"
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "Street": {
            "type": "string",
            "example": "Lubanas st. 125a-25"
          },
          "City": {
            "type": "string",
            "example": ""
          },
          "State": {
            "type": "string",
            "example": ""
          },
          "Zip": {
            "type": "string",
            "example": "LV-1021"
          },
          "Country": {
            "type": "string",
            "example": "Latvia"
          },
          "Category": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "CategoryName": {
            "type": "string",
            "example": "Home"
          },
          "IsPrimary": {
            "type": "boolean",
            "example": "true"
          }
        }
      },
      "ContactStatusBaseWrapper": {
        "type": "object",
        "properties": {
          "Title": {
            "type": "string",
            "example": "Title"
          },
          "Description": {
            "type": "string",
            "example": "Description"
          },
          "Color": {
            "type": "string",
            "example": "#a7fc00"
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "ContactTypeBaseWrapper": {
        "type": "object",
        "properties": {
          "Title": {
            "type": "string",
            "example": "Title"
          },
          "Description": {
            "type": "string",
            "example": "Description"
          },
          "Color": {
            "type": "string",
            "example": "#a7fc00"
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "CustomFieldBaseWrapper": {
        "type": "object",
        "properties": {
          "EntityId": {
            "type": "integer",
            "format": "int32",
            "example": "14523423"
          },
          "Label": {
            "type": "string",
            "example": "Birthdate"
          },
          "FieldValue": {
            "type": "string",
            "example": "2020-12-08T17:37:04.5916406Z"
          },
          "FieldType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "TextField",
              "TextArea",
              "SelectBox",
              "CheckBox",
              "Heading",
              "Date"
            ],
            "description": "[0 - TextField, 1 - TextArea, 2 - SelectBox, 3 - CheckBox, 4 - Heading, 5 - Date]",
            "example": "5"
          },
          "Position": {
            "type": "integer",
            "format": "int32",
            "example": "10"
          },
          "Mask": {
            "type": "string",
            "example": ""
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "ContactWrapper": {
        "type": "object",
        "properties": {
          "Addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "CreateBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-08T17:37:04.5916406Z"
          },
          "About": {
            "type": "string",
            "example": "About"
          },
          "Industry": {
            "type": "string",
            "example": "Industry"
          },
          "ContactStatus": {
            "$ref": "#/components/schemas/ContactStatusBaseWrapper"
          },
          "ContactType": {
            "$ref": "#/components/schemas/ContactTypeBaseWrapper"
          },
          "CommonData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactInfoWrapper"
            }
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldBaseWrapper"
            }
          },
          "Tags": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Tag1,Tag2"
            }
          },
          "TaskCount": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "HaveLateTasks": {
            "type": "boolean",
            "example": "true"
          },
          "SmallFotoUrl": {
            "type": "string",
            "example": "url to foto"
          },
          "MediumFotoUrl": {
            "type": "string",
            "example": "url to foto"
          },
          "DisplayName": {
            "type": "string",
            "example": "Tadjeddine Bachir"
          },
          "IsCompany": {
            "type": "boolean",
            "example": "false"
          },
          "AccessList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeWraper"
            }
          },
          "IsPrivate": {
            "type": "boolean",
            "example": "true"
          },
          "IsShared": {
            "type": "boolean",
            "example": "false"
          },
          "ShareType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "ReadWrite",
              "Read"
            ],
            "description": "[0 - None, 1 - ReadWrite, 2 - Read]",
            "example": "0"
          },
          "Currency": {
            "$ref": "#/components/schemas/CurrencyInfoWrapper"
          },
          "CanEdit": {
            "type": "boolean",
            "example": "true"
          },
          "CanDelete": {
            "type": "boolean",
            "example": "true"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "VoipCallWrapper": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "example": "Id"
          },
          "From": {
            "type": "string",
            "example": "From"
          },
          "To": {
            "type": "string",
            "example": "To"
          },
          "Status": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "example": "1"
            }
          },
          "AnsweredBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "DialDate": {
            "type": "string",
            "example": "2020-12-23T04:11:57.1649297Z"
          },
          "DialDuration": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "Cost": {
            "type": "number",
            "format": "double",
            "example": "5.3"
          },
          "Contact": {
            "$ref": "#/components/schemas/ContactWrapper"
          },
          "Calls": {
            "type": "object",
            "example": "null"
          },
          "RecordUrl": {
            "type": "string",
            "example": "RecordUrl"
          },
          "RecordDuration": {
            "type": "integer",
            "format": "int32",
            "example": "2"
          }
        }
      },
      "ContactBaseWrapper": {
        "type": "object",
        "properties": {
          "SmallFotoUrl": {
            "type": "string",
            "example": "url to foto"
          },
          "MediumFotoUrl": {
            "type": "string",
            "example": "url to foto"
          },
          "DisplayName": {
            "type": "string",
            "example": "Tadjeddine Bachir"
          },
          "IsCompany": {
            "type": "boolean",
            "example": "false"
          },
          "AccessList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeWraper"
            }
          },
          "IsPrivate": {
            "type": "boolean",
            "example": "true"
          },
          "IsShared": {
            "type": "boolean",
            "example": "false"
          },
          "ShareType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "ReadWrite",
              "Read"
            ],
            "description": "[0 - None, 1 - ReadWrite, 2 - Read]",
            "example": "0"
          },
          "Currency": {
            "$ref": "#/components/schemas/CurrencyInfoWrapper"
          },
          "CanEdit": {
            "type": "boolean",
            "example": "true"
          },
          "CanDelete": {
            "type": "boolean",
            "example": "true"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "DealMilestoneBaseWrapper": {
        "type": "object",
        "properties": {
          "SuccessProbability": {
            "type": "integer",
            "format": "int32",
            "example": "20"
          },
          "StageType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Open",
              "ClosedAndWon",
              "ClosedAndLost"
            ],
            "description": "[0 - Open, 1 - ClosedAndWon, 2 - ClosedAndLost]",
            "example": "0"
          },
          "Title": {
            "type": "string",
            "example": "Title"
          },
          "Description": {
            "type": "string",
            "example": "Description"
          },
          "Color": {
            "type": "string",
            "example": "#a7fc00"
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "OpportunityWrapper": {
        "type": "object",
        "properties": {
          "CreateBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-11T03:36:09.7011881Z"
          },
          "Members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactBaseWrapper"
            }
          },
          "Contact": {
            "$ref": "#/components/schemas/ContactBaseWrapper"
          },
          "Title": {
            "type": "string",
            "example": "Hotel catalogue"
          },
          "Description": {
            "type": "string",
            "example": "description"
          },
          "Responsible": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "BidType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "FixedBid",
              "PerHour",
              "PerDay",
              "PerWeek",
              "PerMonth",
              "PerYear"
            ],
            "description": "[0 - FixedBid, 1 - PerHour, 2 - PerDay, 3 - PerWeek, 4 - PerMonth, 5 - PerYear]",
            "example": "0"
          },
          "BidValue": {
            "type": "number",
            "format": "double",
            "example": "1,1"
          },
          "BidCurrency": {
            "$ref": "#/components/schemas/CurrencyInfoWrapper"
          },
          "PerPeriodValue": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "Stage": {
            "$ref": "#/components/schemas/DealMilestoneBaseWrapper"
          },
          "SuccessProbability": {
            "type": "integer",
            "format": "int32",
            "example": "65"
          },
          "ActualCloseDate": {
            "type": "string",
            "example": "2020-12-11T03:36:09.7011881Z"
          },
          "ExpectedCloseDate": {
            "type": "string",
            "example": "2020-12-11T03:36:09.7011881Z"
          },
          "IsPrivate": {
            "type": "boolean",
            "example": "false"
          },
          "AccessList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeWraper"
            }
          },
          "CanEdit": {
            "type": "boolean",
            "example": "true"
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldBaseWrapper"
            }
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "DealMilestoneWrapper": {
        "type": "object",
        "properties": {
          "RelativeItemsCount": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "SuccessProbability": {
            "type": "integer",
            "format": "int32",
            "example": "20"
          },
          "StageType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Open",
              "ClosedAndWon",
              "ClosedAndLost"
            ],
            "description": "[0 - Open, 1 - ClosedAndWon, 2 - ClosedAndLost]",
            "example": "0"
          },
          "Title": {
            "type": "string",
            "example": "Title"
          },
          "Description": {
            "type": "string",
            "example": "Description"
          },
          "Color": {
            "type": "string",
            "example": "#a7fc00"
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "HistoryCategoryWrapper": {
        "type": "object",
        "properties": {
          "RelativeItemsCount": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "ImagePath": {
            "type": "string",
            "example": "path to image"
          },
          "Title": {
            "type": "string",
            "example": "Title"
          },
          "Description": {
            "type": "string",
            "example": "Description"
          },
          "Color": {
            "type": "string",
            "example": "#a7fc00"
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "TaskCategoryWrapper": {
        "type": "object",
        "properties": {
          "RelativeItemsCount": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "ImagePath": {
            "type": "string",
            "example": "path to image"
          },
          "Title": {
            "type": "string",
            "example": "Title"
          },
          "Description": {
            "type": "string",
            "example": "Description"
          },
          "Color": {
            "type": "string",
            "example": "#a7fc00"
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "ContactStatusWrapper": {
        "type": "object",
        "properties": {
          "RelativeItemsCount": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "Title": {
            "type": "string",
            "example": "Title"
          },
          "Description": {
            "type": "string",
            "example": "Description"
          },
          "Color": {
            "type": "string",
            "example": "#a7fc00"
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "ContactTypeWrapper": {
        "type": "object",
        "properties": {
          "RelativeItemsCount": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "Title": {
            "type": "string",
            "example": "Title"
          },
          "Description": {
            "type": "string",
            "example": "Description"
          },
          "Color": {
            "type": "string",
            "example": "#a7fc00"
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "HistoryCategoryBaseWrapper": {
        "type": "object",
        "properties": {
          "ImagePath": {
            "type": "string",
            "example": "path to image"
          },
          "Title": {
            "type": "string",
            "example": "Title"
          },
          "Description": {
            "type": "string",
            "example": "Description"
          },
          "Color": {
            "type": "string",
            "example": "#a7fc00"
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "RelationshipEventWrapper": {
        "type": "object",
        "properties": {
          "CreateBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-13T17:13:31.5902727Z"
          },
          "Content": {
            "type": "string",
            "example": "Agreed to meet at lunch and discuss the client commercial offer"
          },
          "Category": {
            "$ref": "#/components/schemas/HistoryCategoryBaseWrapper"
          },
          "Contact": {
            "$ref": "#/components/schemas/ContactBaseWrapper"
          },
          "Entity": {
            "$ref": "#/components/schemas/EntityWrapper"
          },
          "CanEdit": {
            "type": "boolean",
            "example": "true"
          },
          "Files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileWrapper"
            }
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "ReportState": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "example": "wd2"
          },
          "FileName": {
            "type": "string",
            "example": "FileName"
          },
          "FileId": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "ReportType": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "Exception": {
            "type": "string",
            "example": "Exception"
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Queued",
              "Started",
              "Done",
              "Failed"
            ],
            "description": "[0 - Queued, 1 - Started, 2 - Done, 3 - Failed]",
            "example": "1"
          },
          "Origin": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "CRM",
              "Projects",
              "ProjectsAuto"
            ],
            "description": "[0 - CRM, 1 - Projects, 2 - ProjectsAuto]",
            "example": "1"
          },
          "Obj": {
            "type": "object",
            "example": "null"
          }
        }
      },
      "PersonWrapper": {
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string",
            "example": "Tadjeddine"
          },
          "LastName": {
            "type": "string",
            "example": "Bachir"
          },
          "Company": {
            "$ref": "#/components/schemas/ContactBaseWrapper"
          },
          "Title": {
            "type": "string",
            "example": "Programmer"
          },
          "Addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "CreateBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-08T17:37:04.5916406Z"
          },
          "About": {
            "type": "string",
            "example": "About"
          },
          "Industry": {
            "type": "string",
            "example": "Industry"
          },
          "ContactStatus": {
            "$ref": "#/components/schemas/ContactStatusBaseWrapper"
          },
          "ContactType": {
            "$ref": "#/components/schemas/ContactTypeBaseWrapper"
          },
          "CommonData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactInfoWrapper"
            }
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldBaseWrapper"
            }
          },
          "Tags": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Tag1,Tag2"
            }
          },
          "TaskCount": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "HaveLateTasks": {
            "type": "boolean",
            "example": "true"
          },
          "SmallFotoUrl": {
            "type": "string",
            "example": "url to foto"
          },
          "MediumFotoUrl": {
            "type": "string",
            "example": "url to foto"
          },
          "DisplayName": {
            "type": "string",
            "example": "Tadjeddine Bachir"
          },
          "IsCompany": {
            "type": "boolean",
            "example": "false"
          },
          "AccessList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeWraper"
            }
          },
          "IsPrivate": {
            "type": "boolean",
            "example": "true"
          },
          "IsShared": {
            "type": "boolean",
            "example": "false"
          },
          "ShareType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "ReadWrite",
              "Read"
            ],
            "description": "[0 - None, 1 - ReadWrite, 2 - Read]",
            "example": "0"
          },
          "Currency": {
            "$ref": "#/components/schemas/CurrencyInfoWrapper"
          },
          "CanEdit": {
            "type": "boolean",
            "example": "true"
          },
          "CanDelete": {
            "type": "boolean",
            "example": "true"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "CompanyWrapper": {
        "type": "object",
        "properties": {
          "CompanyName": {
            "type": "string",
            "example": "Food and Culture Project"
          },
          "Persons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactBaseWrapper"
            }
          },
          "PersonsCount": {
            "type": "integer",
            "format": "int32",
            "example": "33"
          },
          "Addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "CreateBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-08T17:37:04.5916406Z"
          },
          "About": {
            "type": "string",
            "example": "About"
          },
          "Industry": {
            "type": "string",
            "example": "Industry"
          },
          "ContactStatus": {
            "$ref": "#/components/schemas/ContactStatusBaseWrapper"
          },
          "ContactType": {
            "$ref": "#/components/schemas/ContactTypeBaseWrapper"
          },
          "CommonData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactInfoWrapper"
            }
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldBaseWrapper"
            }
          },
          "Tags": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Tag1,Tag2"
            }
          },
          "TaskCount": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "HaveLateTasks": {
            "type": "boolean",
            "example": "true"
          },
          "SmallFotoUrl": {
            "type": "string",
            "example": "url to foto"
          },
          "MediumFotoUrl": {
            "type": "string",
            "example": "url to foto"
          },
          "DisplayName": {
            "type": "string",
            "example": "Tadjeddine Bachir"
          },
          "IsCompany": {
            "type": "boolean",
            "example": "false"
          },
          "AccessList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeWraper"
            }
          },
          "IsPrivate": {
            "type": "boolean",
            "example": "true"
          },
          "IsShared": {
            "type": "boolean",
            "example": "false"
          },
          "ShareType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "ReadWrite",
              "Read"
            ],
            "description": "[0 - None, 1 - ReadWrite, 2 - Read]",
            "example": "0"
          },
          "Currency": {
            "$ref": "#/components/schemas/CurrencyInfoWrapper"
          },
          "CanEdit": {
            "type": "boolean",
            "example": "true"
          },
          "CanDelete": {
            "type": "boolean",
            "example": "true"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "CustomFieldWrapper": {
        "type": "object",
        "properties": {
          "RelativeItemsCount": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "EntityId": {
            "type": "integer",
            "format": "int32",
            "example": "14523423"
          },
          "Label": {
            "type": "string",
            "example": "Birthdate"
          },
          "FieldValue": {
            "type": "string",
            "example": "2020-12-08T17:37:04.5916406Z"
          },
          "FieldType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "TextField",
              "TextArea",
              "SelectBox",
              "CheckBox",
              "Heading",
              "Date"
            ],
            "description": "[0 - TextField, 1 - TextArea, 2 - SelectBox, 3 - CheckBox, 4 - Heading, 5 - Date]",
            "example": "5"
          },
          "Position": {
            "type": "integer",
            "format": "int32",
            "example": "10"
          },
          "Mask": {
            "type": "string",
            "example": ""
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "CurrencyRateWrapper": {
        "type": "object",
        "properties": {
          "FromCurrency": {
            "type": "string",
            "example": "EUR"
          },
          "ToCurrency": {
            "type": "string",
            "example": "USD"
          },
          "Rate": {
            "type": "number",
            "format": "double",
            "example": "1.1"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "CurrencyRate": {
        "type": "object",
        "properties": {
          "FromCurrency": {
            "type": "string",
            "example": "fromCurrency"
          },
          "ToCurrency": {
            "type": "string",
            "example": "toCurrency"
          },
          "Rate": {
            "type": "number",
            "format": "double",
            "example": "1.1"
          },
          "CreateBy": {
            "type": "string",
            "format": "uuid"
          },
          "CreateOn": {
            "type": "string",
            "format": "date-time"
          },
          "LastModifedBy": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "LastModifedOn": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            }
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "InvoiceLineWrapper": {
        "type": "object",
        "properties": {
          "InvoiceID": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "InvoiceItemID": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "InvoiceTax1ID": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "InvoiceTax2ID": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "Description": {
            "type": "string",
            "example": "Description"
          },
          "Quantity": {
            "type": "number",
            "format": "double",
            "example": "0,0"
          },
          "Price": {
            "type": "number",
            "format": "double",
            "example": "0,0"
          },
          "Discount": {
            "type": "number",
            "format": "double",
            "example": "0,0"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "InvoiceStatusWrapper": {
        "type": "object",
        "properties": {
          "Title": {
            "type": "string",
            "example": "Title"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "InvoiceWrapper": {
        "type": "object",
        "properties": {
          "InvoiceLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLineWrapper"
            }
          },
          "Status": {
            "$ref": "#/components/schemas/InvoiceStatusWrapper"
          },
          "Number": {
            "type": "string",
            "example": ""
          },
          "IssueDate": {
            "type": "string",
            "example": "2020-12-14T22:13:41.5378233Z"
          },
          "TemplateType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Eur",
              "Rus"
            ],
            "description": "[0 - Eur, 1 - Rus]",
            "example": "0"
          },
          "Contact": {
            "$ref": "#/components/schemas/ContactBaseWrapper"
          },
          "Consignee": {
            "$ref": "#/components/schemas/ContactBaseWrapper"
          },
          "Entity": {
            "$ref": "#/components/schemas/EntityWrapper"
          },
          "DueDate": {
            "type": "string",
            "example": "2020-12-14T22:13:41.5378233Z"
          },
          "Language": {
            "type": "string",
            "example": ""
          },
          "Currency": {
            "$ref": "#/components/schemas/CurrencyInfoWrapper"
          },
          "ExchangeRate": {
            "type": "number",
            "format": "double",
            "example": "1,0"
          },
          "PurchaseOrderNumber": {
            "type": "string",
            "example": ""
          },
          "Terms": {
            "type": "string",
            "example": ""
          },
          "Description": {
            "type": "string",
            "example": ""
          },
          "FileID": {
            "type": "integer",
            "format": "int32",
            "example": "-1"
          },
          "CreateOn": {
            "type": "string",
            "example": "2020-12-14T22:13:41.5378233Z"
          },
          "CreateBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "Cost": {
            "type": "number",
            "format": "double",
            "example": "0,0"
          },
          "CanEdit": {
            "type": "boolean",
            "example": "true"
          },
          "CanDelete": {
            "type": "boolean",
            "example": "true"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "InvoiceBaseWrapper": {
        "type": "object",
        "properties": {
          "Status": {
            "$ref": "#/components/schemas/InvoiceStatusWrapper"
          },
          "Number": {
            "type": "string",
            "example": ""
          },
          "IssueDate": {
            "type": "string",
            "example": "2020-12-14T22:13:41.5378233Z"
          },
          "TemplateType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Eur",
              "Rus"
            ],
            "description": "[0 - Eur, 1 - Rus]",
            "example": "0"
          },
          "Contact": {
            "$ref": "#/components/schemas/ContactBaseWrapper"
          },
          "Consignee": {
            "$ref": "#/components/schemas/ContactBaseWrapper"
          },
          "Entity": {
            "$ref": "#/components/schemas/EntityWrapper"
          },
          "DueDate": {
            "type": "string",
            "example": "2020-12-14T22:13:41.5378233Z"
          },
          "Language": {
            "type": "string",
            "example": ""
          },
          "Currency": {
            "$ref": "#/components/schemas/CurrencyInfoWrapper"
          },
          "ExchangeRate": {
            "type": "number",
            "format": "double",
            "example": "1,0"
          },
          "PurchaseOrderNumber": {
            "type": "string",
            "example": ""
          },
          "Terms": {
            "type": "string",
            "example": ""
          },
          "Description": {
            "type": "string",
            "example": ""
          },
          "FileID": {
            "type": "integer",
            "format": "int32",
            "example": "-1"
          },
          "CreateOn": {
            "type": "string",
            "example": "2020-12-14T22:13:41.5378233Z"
          },
          "CreateBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "Cost": {
            "type": "number",
            "format": "double",
            "example": "0,0"
          },
          "CanEdit": {
            "type": "boolean",
            "example": "true"
          },
          "CanDelete": {
            "type": "boolean",
            "example": "true"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "InvoiceLine": {
        "type": "object",
        "properties": {
          "InvoiceID": {
            "type": "integer",
            "format": "int32"
          },
          "InvoiceItemID": {
            "type": "integer",
            "format": "int32"
          },
          "InvoiceTax1ID": {
            "type": "integer",
            "format": "int32"
          },
          "InvoiceTax2ID": {
            "type": "integer",
            "format": "int32"
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "Description": {
            "type": "string"
          },
          "Quantity": {
            "type": "number",
            "format": "double"
          },
          "Price": {
            "type": "number",
            "format": "double"
          },
          "Discount": {
            "type": "number",
            "format": "double"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "ConverterData": {
        "type": "object",
        "properties": {
          "StorageUrl": {
            "type": "string",
            "example": "Storage Url"
          },
          "RevisionId": {
            "type": "string",
            "example": "123ws"
          },
          "InvoiceId": {
            "type": "integer",
            "format": "int32",
            "example": "2"
          },
          "FileId": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          }
        }
      },
      "InvoiceTaxWrapper": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "example": "Name"
          },
          "Description": {
            "type": "string",
            "example": "Description"
          },
          "Rate": {
            "type": "number",
            "format": "double",
            "example": "Rate"
          },
          "CreateOn": {
            "type": "string",
            "example": "2020-12-14T22:13:41.5378233Z"
          },
          "CreateBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "CanEdit": {
            "type": "boolean",
            "example": "true"
          },
          "CanDelete": {
            "type": "boolean",
            "example": "true"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "InvoiceItemWrapper": {
        "type": "object",
        "properties": {
          "Title": {
            "type": "string",
            "example": "Title"
          },
          "StockKeepingUnit": {
            "type": "string",
            "example": "StockKeepingUnit"
          },
          "Description": {
            "type": "string",
            "example": "Description"
          },
          "Price": {
            "type": "number",
            "format": "double",
            "example": "1.2"
          },
          "Currency": {
            "$ref": "#/components/schemas/CurrencyInfoWrapper"
          },
          "StockQuantity": {
            "type": "number",
            "format": "double",
            "example": "2.2"
          },
          "TrackInvenory": {
            "type": "boolean",
            "example": "true"
          },
          "InvoiceTax1": {
            "$ref": "#/components/schemas/InvoiceTaxWrapper"
          },
          "InvoiceTax2": {
            "$ref": "#/components/schemas/InvoiceTaxWrapper"
          },
          "CreateOn": {
            "type": "string",
            "example": "2020-12-14T22:13:41.5378233Z"
          },
          "CreateBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "CanEdit": {
            "type": "boolean",
            "example": "true"
          },
          "CanDelete": {
            "type": "boolean",
            "example": "true"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "InvoiceSetting": {
        "type": "object",
        "properties": {
          "DefaultSettings": {
            "type": "object"
          },
          "Autogenerated": {
            "type": "boolean",
            "example": "true"
          },
          "Prefix": {
            "type": "string",
            "example": "Prefix"
          },
          "Number": {
            "type": "string",
            "example": "Number"
          },
          "Terms": {
            "type": "string",
            "example": "Terms"
          },
          "CompanyName": {
            "type": "string",
            "example": "CompanyName"
          },
          "CompanyLogoID": {
            "type": "integer",
            "format": "int32",
            "example": "123"
          },
          "CompanyAddress": {
            "type": "string",
            "example": "CompanyAddress"
          }
        }
      },
      "CasesWrapper": {
        "type": "object",
        "properties": {
          "Members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactBaseWrapper"
            }
          },
          "CreateBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-08T17:37:04.5736385Z"
          },
          "Title": {
            "type": "string",
            "example": "Exhibition organization"
          },
          "IsClosed": {
            "type": "boolean",
            "example": "false"
          },
          "IsPrivate": {
            "type": "boolean",
            "example": "false"
          },
          "AccessList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeWraper"
            }
          },
          "CanEdit": {
            "type": "boolean",
            "example": "true"
          },
          "CustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldBaseWrapper"
            }
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "AutoCleanUpData": {
        "type": "object",
        "properties": {
          "IsAutoCleanUp": {
            "type": "boolean"
          },
          "Gap": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "OneWeek",
              "TwoWeeks",
              "OneMonth",
              "TwoMonths",
              "ThreeMonths"
            ],
            "description": "[1 - OneWeek, 2 - TwoWeeks, 3 - OneMonth, 4 - TwoMonths, 5 - ThreeMonths]"
          }
        }
      },
      "ICompress": {
        "type": "object",
        "properties": {
          "Title": {
            "type": "string"
          },
          "ArchiveExtension": {
            "type": "string"
          }
        }
      },
      "FolderWrapper": {
        "type": "object",
        "properties": {
          "ParentId": {
            "type": "object",
            "example": "1840746475"
          },
          "FilesCount": {
            "type": "integer",
            "format": "int32",
            "example": "1840746475"
          },
          "FoldersCount": {
            "type": "integer",
            "format": "int32",
            "example": "1840746475"
          },
          "IsShareable": {
            "type": "boolean",
            "example": "true"
          },
          "IsFavorite": {
            "type": "boolean"
          },
          "Id": {
            "type": "object",
            "example": "857864274"
          },
          "Title": {
            "type": "string",
            "example": "Some titile.txt"
          },
          "Access": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "ReadWrite",
              "Read",
              "Restrict",
              "Varies",
              "Review",
              "Comment",
              "FillForms",
              "CustomFilter"
            ],
            "description": "[0 - None, 1 - ReadWrite, 2 - Read, 3 - Restrict, 4 - Varies, 5 - Review, 6 - Comment, 7 - FillForms, 8 - CustomFilter]",
            "example": "1"
          },
          "Shared": {
            "type": "boolean",
            "example": "false"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-13T17:13:31.5902727Z"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-13T17:13:31.5902727Z"
          },
          "RootFolderType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "DEFAULT",
              "COMMON",
              "BUNCH",
              "TRASH",
              "USER",
              "SHARE",
              "Projects",
              "Favorites",
              "Recent",
              "Templates",
              "Privacy"
            ],
            "description": "[0 - DEFAULT, 1 - COMMON, 2 - BUNCH, 3 - TRASH, 5 - USER, 6 - SHARE, 8 - Projects, 10 - Favorites, 11 - Recent, 12 - Templates, 13 - Privacy]",
            "example": "2"
          },
          "UpdatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "ProviderItem": {
            "type": "boolean",
            "example": "true"
          },
          "ProviderKey": {
            "type": "string",
            "example": "1234d"
          },
          "ProviderId": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          },
          "DenyDownload": {
            "type": "boolean"
          },
          "DenySharing": {
            "type": "boolean"
          }
        }
      },
      "FolderContentWrapper": {
        "type": "object",
        "properties": {
          "Files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileWrapper"
            }
          },
          "Folders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FolderWrapper"
            }
          },
          "Current": {
            "$ref": "#/components/schemas/FolderWrapper"
          },
          "PathParts": {
            "type": "object"
          },
          "StartIndex": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "Count": {
            "type": "integer",
            "format": "int32",
            "example": "4"
          },
          "Total": {
            "type": "integer",
            "format": "int32",
            "example": "4"
          },
          "New": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Configuration": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Desktop",
              "Mobile",
              "Embedded",
              "External"
            ],
            "description": "[0 - Desktop, 1 - Mobile, 2 - Embedded, 3 - External]"
          },
          "DocumentType": {
            "type": "string",
            "example": "documentType"
          },
          "TypeString": {
            "type": "string",
            "example": "type"
          }
        }
      },
      "Folder": {
        "type": "object",
        "properties": {
          "FolderType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "DEFAULT",
              "COMMON",
              "BUNCH",
              "TRASH",
              "USER",
              "SHARE",
              "Projects",
              "Favorites",
              "Recent",
              "Templates",
              "Privacy"
            ],
            "description": "[0 - DEFAULT, 1 - COMMON, 2 - BUNCH, 3 - TRASH, 5 - USER, 6 - SHARE, 8 - Projects, 10 - Favorites, 11 - Recent, 12 - Templates, 13 - Privacy]"
          },
          "ParentFolderID": {
            "type": "object"
          },
          "TotalFiles": {
            "type": "integer",
            "format": "int32",
            "example": "5"
          },
          "TotalSubFolders": {
            "type": "integer",
            "format": "int32",
            "example": "5"
          },
          "Shareable": {
            "type": "boolean",
            "example": "true"
          },
          "NewForMe": {
            "type": "integer",
            "format": "int32",
            "example": "3"
          },
          "FolderUrl": {
            "type": "string",
            "example": "folder url"
          },
          "IsFavorite": {
            "type": "boolean"
          },
          "IsNew": {
            "type": "boolean"
          },
          "ID": {
            "type": "object",
            "example": "123wda-wdaw"
          },
          "Title": {
            "type": "string",
            "example": "title"
          },
          "CreateBy": {
            "type": "string",
            "format": "uuid",
            "example": "d40b68d0-5b86-4823-b22a-f57f429f5aff"
          },
          "CreateByString": {
            "type": "string",
            "example": "admin"
          },
          "CreateOnString": {
            "type": "string",
            "example": "create_on"
          },
          "ModifiedOnString": {
            "type": "string",
            "example": "modified_on"
          },
          "ModifiedBy": {
            "type": "string",
            "format": "uuid",
            "example": "d40b68d0-5b86-4823-b22a-f57f429f5aff"
          },
          "ModifiedByString": {
            "type": "string",
            "example": "admin"
          },
          "Error": {
            "type": "string",
            "example": ""
          },
          "Access": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "ReadWrite",
              "Read",
              "Restrict",
              "Varies",
              "Review",
              "Comment",
              "FillForms",
              "CustomFilter"
            ],
            "description": "[0 - None, 1 - ReadWrite, 2 - Read, 3 - Restrict, 4 - Varies, 5 - Review, 6 - Comment, 7 - FillForms, 8 - CustomFilter]",
            "example": "3"
          },
          "Shared": {
            "type": "boolean",
            "example": "true"
          },
          "ProviderId": {
            "type": "integer",
            "format": "int32",
            "example": "3"
          },
          "ProviderKey": {
            "type": "string",
            "example": "provider_key"
          },
          "FolderIdDisplay": {
            "type": "object",
            "example": "123wda5"
          },
          "DeletedPermanentlyOnString": {
            "type": "string"
          },
          "DenyDownload": {
            "type": "boolean"
          },
          "DenySharing": {
            "type": "boolean"
          },
          "ProviderEntry": {
            "type": "boolean"
          },
          "CreateOn": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "RootFolderType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "DEFAULT",
              "COMMON",
              "BUNCH",
              "TRASH",
              "USER",
              "SHARE",
              "Projects",
              "Favorites",
              "Recent",
              "Templates",
              "Privacy"
            ],
            "description": "[0 - DEFAULT, 1 - COMMON, 2 - BUNCH, 3 - TRASH, 5 - USER, 6 - SHARE, 8 - Projects, 10 - Favorites, 11 - Recent, 12 - Templates, 13 - Privacy]"
          },
          "RootFolderCreator": {
            "type": "string",
            "format": "uuid"
          },
          "RootFolderId": {
            "type": "object"
          },
          "UniqID": {
            "type": "string"
          }
        }
      },
      "FileOperationWraper": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "example": "d5490cba-a5e6-40db-acb2-94203dba12d6"
          },
          "OperationType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Move",
              "Copy",
              "Delete",
              "Download",
              "MarkAsRead",
              "Import",
              "Convert"
            ],
            "description": "[0 - Move, 1 - Copy, 2 - Delete, 3 - Download, 4 - MarkAsRead, 5 - Import, 6 - Convert]",
            "example": "1"
          },
          "Progress": {
            "type": "integer",
            "format": "int32",
            "example": "100"
          },
          "Error": {
            "type": "string",
            "example": ""
          },
          "Processed": {
            "type": "string",
            "example": "1"
          },
          "Finished": {
            "type": "boolean",
            "example": "false"
          },
          "Url": {
            "type": "string",
            "example": "null"
          },
          "Files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileWrapper"
            }
          },
          "Folders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FolderWrapper"
            }
          }
        }
      },
      "ConversationResult": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "example": "d5490cba-a5e6-40db-acb2-94203dba12d6"
          },
          "OperationType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Move",
              "Copy",
              "Delete",
              "Download",
              "MarkAsRead",
              "Import",
              "Convert"
            ],
            "description": "[0 - Move, 1 - Copy, 2 - Delete, 3 - Download, 4 - MarkAsRead, 5 - Import, 6 - Convert]",
            "example": "6"
          },
          "Progress": {
            "type": "integer",
            "format": "int32",
            "example": "30"
          },
          "Source": {
            "type": "string",
            "example": "source"
          },
          "File": {
            "$ref": "#/components/schemas/FileWrapper"
          },
          "Error": {
            "type": "string",
            "example": ""
          },
          "Processed": {
            "type": "string",
            "example": "1"
          }
        }
      },
      "FileShareWrapper": {
        "type": "object",
        "properties": {
          "Access": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "ReadWrite",
              "Read",
              "Restrict",
              "Varies",
              "Review",
              "Comment",
              "FillForms",
              "CustomFilter"
            ],
            "description": "[0 - None, 1 - ReadWrite, 2 - Read, 3 - Restrict, 4 - Varies, 5 - Review, 6 - Comment, 7 - FillForms, 8 - CustomFilter]",
            "example": "1"
          },
          "SharedTo": {
            "type": "object"
          },
          "IsLocked": {
            "type": "boolean",
            "example": "false"
          },
          "IsOwner": {
            "type": "boolean",
            "example": "true"
          }
        }
      },
      "FileShareParams": {
        "type": "object",
        "properties": {
          "ShareTo": {
            "type": "string",
            "format": "uuid",
            "example": "2fdfe577-3c26-4736-9df9-b5a683bb8520"
          },
          "Access": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "ReadWrite",
              "Read",
              "Restrict",
              "Varies",
              "Review",
              "Comment",
              "FillForms",
              "CustomFilter"
            ],
            "description": "[0 - None, 1 - ReadWrite, 2 - Read, 3 - Restrict, 4 - Varies, 5 - Review, 6 - Comment, 7 - FillForms, 8 - CustomFilter]",
            "example": "0"
          }
        }
      },
      "AceAdvancedSettingsWrapper": {
        "type": "object",
        "properties": {
          "DenyDownload": {
            "type": "boolean"
          },
          "DenySharing": {
            "type": "boolean"
          }
        }
      },
      "AuthenticationTokenData": {
        "type": "object",
        "properties": {
          "Token": {
            "type": "string",
            "example": "abcde12345"
          },
          "Expires": {
            "type": "string",
            "example": "2020-11-24T05:36:20.4206897Z"
          },
          "Sms": {
            "type": "boolean",
            "example": "true"
          },
          "PhoneNoise": {
            "type": "string",
            "example": "8(999)999-99-99"
          },
          "Tfa": {
            "type": "boolean",
            "example": "true"
          },
          "TfaKey": {
            "type": "string",
            "example": "123dwa"
          }
        }
      },
      "LinkSettingsWrapper": {
        "type": "object",
        "properties": {
          "AutoDelete": {
            "type": "boolean"
          },
          "ExpirationDate": {
            "type": "string"
          },
          "Expired": {
            "type": "boolean"
          },
          "Password": {
            "type": "string"
          }
        }
      },
      "AceWrapper": {
        "type": "object",
        "properties": {
          "SubjectId": {
            "type": "string",
            "format": "uuid"
          },
          "SubjectName": {
            "type": "string"
          },
          "Link": {
            "type": "string"
          },
          "SubjectGroup": {
            "type": "boolean"
          },
          "Owner": {
            "type": "boolean"
          },
          "Share": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "ReadWrite",
              "Read",
              "Restrict",
              "Varies",
              "Review",
              "Comment",
              "FillForms",
              "CustomFilter"
            ],
            "description": "[0 - None, 1 - ReadWrite, 2 - Read, 3 - Restrict, 4 - Varies, 5 - Review, 6 - Comment, 7 - FillForms, 8 - CustomFilter]"
          },
          "LockedRights": {
            "type": "boolean"
          },
          "DisableRemove": {
            "type": "boolean"
          },
          "LinkSettings": {
            "$ref": "#/components/schemas/LinkSettingsWrapper"
          },
          "EntryType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Folder",
              "File"
            ],
            "description": "[1 - Folder, 2 - File]"
          },
          "Inherited": {
            "type": "boolean"
          },
          "IsLink": {
            "type": "boolean"
          }
        }
      },
      "FormFillingProperties": {
        "type": "object",
        "properties": {
          "CollectFillForm": {
            "type": "boolean"
          },
          "ToFolderId": {
            "type": "string"
          },
          "ToFolderPath": {
            "type": "string"
          },
          "CreateFolderTitle": {
            "type": "string"
          },
          "CreateFileMask": {
            "type": "string"
          }
        }
      },
      "EntryProperties": {
        "type": "object",
        "properties": {
          "FormFilling": {
            "$ref": "#/components/schemas/FormFillingProperties"
          }
        }
      },
      "AuthData": {
        "type": "object",
        "properties": {
          "Login": {
            "type": "string",
            "example": "login"
          },
          "Password": {
            "type": "string",
            "example": "password"
          },
          "Token": {
            "type": "string",
            "example": "token"
          },
          "Url": {
            "type": "string",
            "example": "url"
          }
        }
      },
      "ThirdPartyParams": {
        "type": "object",
        "properties": {
          "AuthData": {
            "$ref": "#/components/schemas/AuthData"
          },
          "Corporate": {
            "type": "boolean",
            "example": "false"
          },
          "CustomerTitle": {
            "type": "string",
            "example": "customer_title"
          },
          "ProviderId": {
            "type": "string",
            "example": "provider_id"
          },
          "ProviderKey": {
            "type": "string",
            "example": "provider_key"
          }
        }
      },
      "FileEntryWrapper": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "object",
            "example": "857864274"
          },
          "Title": {
            "type": "string",
            "example": "Some titile.txt"
          },
          "Access": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "ReadWrite",
              "Read",
              "Restrict",
              "Varies",
              "Review",
              "Comment",
              "FillForms",
              "CustomFilter"
            ],
            "description": "[0 - None, 1 - ReadWrite, 2 - Read, 3 - Restrict, 4 - Varies, 5 - Review, 6 - Comment, 7 - FillForms, 8 - CustomFilter]",
            "example": "1"
          },
          "Shared": {
            "type": "boolean",
            "example": "false"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-13T17:13:31.5902727Z"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-13T17:13:31.5902727Z"
          },
          "RootFolderType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "DEFAULT",
              "COMMON",
              "BUNCH",
              "TRASH",
              "USER",
              "SHARE",
              "Projects",
              "Favorites",
              "Recent",
              "Templates",
              "Privacy"
            ],
            "description": "[0 - DEFAULT, 1 - COMMON, 2 - BUNCH, 3 - TRASH, 5 - USER, 6 - SHARE, 8 - Projects, 10 - Favorites, 11 - Recent, 12 - Templates, 13 - Privacy]",
            "example": "2"
          },
          "UpdatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "ProviderItem": {
            "type": "boolean",
            "example": "true"
          },
          "ProviderKey": {
            "type": "string",
            "example": "1234d"
          },
          "ProviderId": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          },
          "DenyDownload": {
            "type": "boolean"
          },
          "DenySharing": {
            "type": "boolean"
          }
        }
      },
      "GroupWrapperSummary": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "example": "Group Name"
          },
          "Id": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "Manager": {
            "type": "string",
            "example": "Jake.Zazhitski"
          }
        }
      },
      "EmployeeWraperFull": {
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string",
            "example": "Mike"
          },
          "LastName": {
            "type": "string",
            "example": "Zanyatski"
          },
          "UserName": {
            "type": "string",
            "example": "Mike.Zanyatski"
          },
          "Email": {
            "type": "string",
            "example": "my@domain.com"
          },
          "Birthday": {
            "type": "string",
            "example": "2008-04-10T06-30-00.000Z"
          },
          "Sex": {
            "type": "string",
            "example": "male"
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Active",
              "Terminated",
              "LeaveOfAbsence",
              "Default",
              "All"
            ],
            "description": "[1 - Active, 2 - Terminated, 4 - LeaveOfAbsence, 5 - Default, 7 - All]",
            "example": "1"
          },
          "ActivationStatus": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "NotActivated",
              "Activated",
              "Pending",
              "AutoGenerated"
            ],
            "description": "[0 - NotActivated, 1 - Activated, 2 - Pending, 4 - AutoGenerated]",
            "example": "0"
          },
          "Terminated": {
            "type": "string",
            "example": "2008-04-10T06-30-00.000Z"
          },
          "Department": {
            "type": "string",
            "example": "Marketing"
          },
          "WorkFrom": {
            "type": "string",
            "example": "2008-04-10T06-30-00.000Z"
          },
          "Groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupWrapperSummary"
            }
          },
          "Location": {
            "type": "string",
            "example": "Palo Alto"
          },
          "Notes": {
            "type": "string",
            "example": "Notes to worker"
          },
          "Lead": {
            "type": "string",
            "format": "uuid",
            "example": "055312F1-1D71-4786-BB5B-D5910316E53C"
          },
          "AvatarMedium": {
            "type": "string",
            "example": "url to medium avatar"
          },
          "Avatar": {
            "type": "string",
            "example": "url to big avatar"
          },
          "IsAdmin": {
            "type": "boolean",
            "example": "false"
          },
          "IsLDAP": {
            "type": "boolean",
            "example": "false"
          },
          "ListAdminModules": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "projects,crm"
            }
          },
          "IsOwner": {
            "type": "boolean",
            "example": "false"
          },
          "IsVisitor": {
            "type": "boolean",
            "example": "false"
          },
          "CultureName": {
            "type": "string",
            "example": "en-EN"
          },
          "IsSSO": {
            "type": "boolean",
            "example": "false"
          },
          "QuotaLimit": {
            "type": "integer",
            "format": "int64"
          },
          "UsedSpace": {
            "type": "integer",
            "format": "int64"
          },
          "DocsSpace": {
            "type": "integer",
            "format": "int64"
          },
          "MailSpace": {
            "type": "integer",
            "format": "int64"
          },
          "TalkSpace": {
            "type": "integer",
            "format": "int64"
          },
          "Id": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "DisplayName": {
            "type": "string",
            "example": "Mike Zanyatski"
          },
          "Title": {
            "type": "string",
            "example": "Manager"
          },
          "AvatarSmall": {
            "type": "string",
            "example": "url to small avatar"
          },
          "ProfileUrl": {
            "type": "string",
            "example": "\\/Products\\/People\\/Profile.aspx?user=administrator"
          }
        }
      },
      "Contact": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string",
            "example": "GTalk"
          },
          "Value": {
            "type": "string",
            "example": "my@gmail.com"
          }
        }
      },
      "ThumbnailsDataWrapper": {
        "type": "object",
        "properties": {
          "Original": {
            "type": "string",
            "example": "default_user_photo_size_1280-1280.png"
          },
          "Retina": {
            "type": "string",
            "example": "default_user_photo_size_360-360.png"
          },
          "Max": {
            "type": "string",
            "example": "default_user_photo_size_200-200.png"
          },
          "Big": {
            "type": "string",
            "example": "default_user_photo_size_82-82.png"
          },
          "Medium": {
            "type": "string",
            "example": "\"default_user_photo_size_48-48.png"
          },
          "Small": {
            "type": "string",
            "example": "default_user_photo_size_32-32.png"
          }
        }
      },
      "ReassignProgressItem": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "object",
            "example": "123124"
          },
          "Status": {
            "type": "object",
            "example": "1"
          },
          "Error": {
            "type": "object",
            "example": "error"
          },
          "Percentage": {
            "type": "number",
            "format": "double",
            "example": "55.5"
          },
          "IsCompleted": {
            "type": "boolean",
            "example": "false"
          },
          "FromUser": {
            "type": "string",
            "format": "uuid",
            "example": "f528a377-b268-4cdb-8209-91d0fa1417c2"
          },
          "ToUser": {
            "type": "string",
            "format": "uuid",
            "example": "f528a377-b268-4cdb-8209-91d0fa1417ca"
          }
        }
      },
      "RemoveProgressItem": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "object",
            "example": "123124"
          },
          "Status": {
            "type": "object",
            "example": "1"
          },
          "Error": {
            "type": "object",
            "example": "error"
          },
          "Percentage": {
            "type": "number",
            "format": "double",
            "example": "55.5"
          },
          "IsCompleted": {
            "type": "boolean",
            "example": "false"
          },
          "FromUser": {
            "type": "string",
            "format": "uuid",
            "example": "f528a377-b268-4cdb-8209-91d0fa1417c2"
          }
        }
      },
      "GroupWrapperFull": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "example": "Description"
          },
          "Name": {
            "type": "string",
            "example": "Sample group"
          },
          "Parent": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "852d4b63-997a-4bae-aa7b-89bb87d85dbf"
            }
          },
          "Category": {
            "type": "string",
            "format": "uuid",
            "example": "74f31a85-991b-4e9b-b9e8-ae8e80d468f5"
          },
          "Id": {
            "type": "string",
            "format": "uuid",
            "example": "fadd9f49-2431-4610-a518-3ca9b3843c88"
          },
          "Manager": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "Members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeWraper"
            }
          }
        }
      },
      "CrmContactData": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          },
          "Type": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Contact",
              "Case",
              "Opportunity"
            ],
            "description": "[1 - Contact, 2 - Case, 3 - Opportunity]",
            "example": "1"
          },
          "EntityTypeName": {
            "type": "string",
            "example": "contact"
          }
        }
      },
      "MailCrmStatus": {
        "type": "object",
        "properties": {
          "MessageId": {
            "type": "integer",
            "format": "int32",
            "example": "12354"
          },
          "IsLinked": {
            "type": "boolean",
            "example": "true"
          }
        }
      },
      "MailFolderData": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Sending",
              "Inbox",
              "Sent",
              "Draft",
              "Trash",
              "Spam",
              "UserFolder",
              "Templates"
            ],
            "description": "[0 - Sending, 1 - Inbox, 2 - Sent, 3 - Draft, 4 - Trash, 5 - Spam, 6 - UserFolder, 7 - Templates]",
            "example": "1"
          },
          "UnreadCount": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "UnreadMessagesCount": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "TotalCount": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "TotalMessgesCount": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "TimeModified": {
            "type": "string",
            "format": "date-time",
            "example": "2020-10-01T17:04:32.0000000"
          }
        }
      },
      "MailUserFolderData": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "uint32",
            "example": "1234"
          },
          "ParentId": {
            "type": "integer",
            "format": "uint32",
            "example": "1234"
          },
          "Name": {
            "type": "string",
            "example": "name"
          },
          "UnreadCount": {
            "type": "integer",
            "format": "int32",
            "example": "123"
          },
          "TotalCount": {
            "type": "integer",
            "format": "int32",
            "example": "123"
          },
          "UnreadChainCount": {
            "type": "integer",
            "format": "int32",
            "example": "123"
          },
          "TotalChainCount": {
            "type": "integer",
            "format": "int32",
            "example": "123"
          },
          "FolderCount": {
            "type": "integer",
            "format": "int32",
            "example": "123"
          }
        }
      },
      "MailOperationStatus": {
        "type": "object",
        "properties": {
          "Completed": {
            "type": "boolean",
            "example": "true"
          },
          "Id": {
            "type": "string",
            "example": "Id"
          },
          "Status": {
            "type": "string",
            "example": "Status"
          },
          "Error": {
            "type": "string",
            "example": "Error"
          },
          "Percents": {
            "type": "integer",
            "format": "int32",
            "example": "100"
          },
          "Source": {
            "type": "string",
            "example": "Source"
          },
          "OperationType": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "Operation": {
            "type": "string",
            "example": "Operation"
          }
        }
      },
      "MailAttachmentData": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          },
          "fileName": {
            "type": "string",
            "example": "fileName"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "example": "1234"
          },
          "contentType": {
            "type": "string",
            "example": "contentType"
          },
          "needSaveToTemp": {
            "type": "boolean",
            "example": "true"
          },
          "contentId": {
            "type": "string",
            "example": "contentId"
          },
          "fileNumber": {
            "type": "integer",
            "format": "int32",
            "example": "333"
          },
          "storedName": {
            "type": "string",
            "example": "storedName"
          },
          "streamId": {
            "type": "string",
            "example": "streamId"
          },
          "attachedAsLink": {
            "type": "boolean",
            "example": "true"
          },
          "tempStoredUrl": {
            "type": "string",
            "example": "tempStoredUrl"
          },
          "isTemp": {
            "type": "boolean"
          },
          "storedFileUrl": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "dataStream": {
            "type": "object"
          },
          "user": {
            "type": "string"
          },
          "tenant": {
            "type": "integer",
            "format": "int32"
          },
          "isEmbedded": {
            "type": "boolean"
          },
          "contentLocation": {
            "type": "string"
          },
          "mailboxId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MailMessageData": {
        "type": "object",
        "properties": {
          "Attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MailAttachmentData"
            }
          },
          "Introduction": {
            "type": "string",
            "example": "Introduction"
          },
          "HtmlBody": {
            "type": "string",
            "example": "HtmlBody"
          },
          "ContentIsBlocked": {
            "type": "boolean",
            "example": "true"
          },
          "Important": {
            "type": "boolean",
            "example": "true"
          },
          "Subject": {
            "type": "string",
            "example": "Subject"
          },
          "HasAttachments": {
            "type": "boolean",
            "example": "true"
          },
          "Bcc": {
            "type": "string",
            "example": "Bcc"
          },
          "Cc": {
            "type": "string",
            "example": "Cc"
          },
          "To": {
            "type": "string",
            "example": "To"
          },
          "Address": {
            "type": "string",
            "example": "Address"
          },
          "From": {
            "type": "string",
            "example": "From"
          },
          "FromEmail": {
            "type": "string"
          },
          "ReplyTo": {
            "type": "string",
            "example": "ReplyTo"
          },
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "555"
          },
          "ChainId": {
            "type": "string",
            "example": "ChainId"
          },
          "ChainDate": {
            "type": "string",
            "format": "date-time"
          },
          "ChainDateString": {
            "type": "string",
            "example": "ChainDate"
          },
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "DateString": {
            "type": "string",
            "example": "Date"
          },
          "DateDisplay": {
            "type": "string",
            "example": "DateDisplay"
          },
          "TagIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "example": "1234"
            }
          },
          "LabelsString": {
            "type": "string"
          },
          "LabelsInString": {
            "type": "string",
            "example": "LabelsInString"
          },
          "IsNew": {
            "type": "boolean",
            "example": "true"
          },
          "IsAnswered": {
            "type": "boolean",
            "example": "true"
          },
          "IsForwarded": {
            "type": "boolean",
            "example": "true"
          },
          "TextBodyOnly": {
            "type": "boolean",
            "example": "true"
          },
          "Size": {
            "type": "integer",
            "format": "int64",
            "example": "555555"
          },
          "EMLLink": {
            "type": "string",
            "example": "EMLLink"
          },
          "StreamId": {
            "type": "string",
            "example": "StreamId"
          },
          "RestoreFolderId": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Sending",
              "Inbox",
              "Sent",
              "Draft",
              "Trash",
              "Spam",
              "UserFolder",
              "Templates"
            ],
            "description": "[0 - Sending, 1 - Inbox, 2 - Sent, 3 - Draft, 4 - Trash, 5 - Spam, 6 - UserFolder, 7 - Templates]",
            "example": "1"
          },
          "Folder": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Sending",
              "Inbox",
              "Sent",
              "Draft",
              "Trash",
              "Spam",
              "UserFolder",
              "Templates"
            ],
            "description": "[0 - Sending, 1 - Inbox, 2 - Sent, 3 - Draft, 4 - Trash, 5 - Spam, 6 - UserFolder, 7 - Templates]",
            "example": "1"
          },
          "UserFolderId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint32",
              "example": "144"
            }
          },
          "ChainLength": {
            "type": "integer",
            "format": "int32",
            "example": "144"
          },
          "WasNew": {
            "type": "boolean",
            "example": "false"
          },
          "IsToday": {
            "type": "boolean",
            "example": "false"
          },
          "IsYesterday": {
            "type": "boolean",
            "example": "false"
          },
          "ReceivedDate": {
            "type": "string",
            "example": "2020-12-18T08:12:09.1209967Z"
          },
          "MailboxId": {
            "type": "integer",
            "format": "int32"
          },
          "LinkedCrmEntityIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CrmContactData"
            }
          },
          "IsBodyCorrupted": {
            "type": "boolean",
            "example": "false"
          },
          "HasParseError": {
            "type": "boolean",
            "example": "false"
          },
          "MimeMessageId": {
            "type": "string",
            "example": "MimeMessageId"
          },
          "MimeReplyToId": {
            "type": "string",
            "example": "MimeReplyToId"
          },
          "CalendarUid": {
            "type": "string",
            "example": "CalendarUid"
          },
          "ReadRequestStatus": {
            "type": "boolean"
          },
          "CalendarId": {
            "type": "integer",
            "format": "int32"
          },
          "CalendarEventCharset": {
            "type": "string"
          },
          "CalendarEventMimeType": {
            "type": "string"
          },
          "CalendarEventIcs": {
            "type": "string"
          },
          "ToList": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "CcList": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "BccList": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "HeaderFieldNames": {
            "type": "object"
          },
          "HtmlBodyStream": {
            "type": "object"
          },
          "Uidl": {
            "type": "string"
          }
        }
      },
      "MailTagData": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          },
          "Name": {
            "type": "string",
            "example": "name"
          },
          "Style": {
            "type": "string",
            "example": "style"
          },
          "Addresses": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "addresses"
            }
          },
          "LettersCount": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          }
        }
      },
      "MailSieveFilterConditionData": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "From",
              "ToOrCc",
              "To",
              "Cc",
              "Subject"
            ],
            "description": "[0 - From, 1 - ToOrCc, 2 - To, 3 - Cc, 4 - Subject]",
            "example": "1"
          },
          "Operation": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Matches",
              "NotMatches",
              "Contains",
              "NotContains"
            ],
            "description": "[0 - Matches, 1 - NotMatches, 2 - Contains, 3 - NotContains]",
            "example": "1"
          },
          "Value": {
            "type": "string",
            "example": "value"
          }
        }
      },
      "MailSieveFilterActionData": {
        "type": "object",
        "properties": {
          "Action": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "DeleteForever",
              "MoveTo",
              "MarkTag",
              "MarkAsImportant",
              "MarkAsRead"
            ],
            "description": "[0 - DeleteForever, 1 - MoveTo, 2 - MarkTag, 3 - MarkAsImportant, 4 - MarkAsRead]",
            "example": "1"
          },
          "Data": {
            "type": "string",
            "example": "data"
          }
        }
      },
      "MailSieveFilterOptionsApplyToData": {
        "type": "object",
        "properties": {
          "Folders": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "example": "1"
            }
          },
          "Mailboxes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "example": "1"
            }
          },
          "WithAttachments": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "WithAndWithoutAttachments",
              "WithAttachments",
              "WithoutAttachments"
            ],
            "description": "[0 - WithAndWithoutAttachments, 1 - WithAttachments, 2 - WithoutAttachments]",
            "example": "1"
          }
        }
      },
      "MailSieveFilterOptionsData": {
        "type": "object",
        "properties": {
          "MatchMultiConditions": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "MatchAll",
              "MatchAtLeastOne"
            ],
            "description": "[0 - None, 1 - MatchAll, 2 - MatchAtLeastOne]",
            "example": "1"
          },
          "ApplyTo": {
            "$ref": "#/components/schemas/MailSieveFilterOptionsApplyToData"
          },
          "IgnoreOther": {
            "type": "boolean",
            "example": "true"
          }
        }
      },
      "MailSieveFilterData": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "Name": {
            "type": "string",
            "example": "name"
          },
          "Position": {
            "type": "integer",
            "format": "int32",
            "example": "2"
          },
          "Enabled": {
            "type": "boolean",
            "example": "true"
          },
          "Conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MailSieveFilterConditionData"
            }
          },
          "Actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MailSieveFilterActionData"
            }
          },
          "Options": {
            "$ref": "#/components/schemas/MailSieveFilterOptionsData"
          }
        }
      },
      "MailCommonSettings": {
        "type": "object",
        "properties": {
          "EnableConversationsSetting": {
            "type": "boolean",
            "example": "true"
          },
          "AlwaysDisplayImagesSetting": {
            "type": "boolean",
            "example": "true"
          },
          "CacheUnreadMessagesSetting": {
            "type": "boolean",
            "example": "true"
          },
          "EnableGoNextAfterMoveSetting": {
            "type": "boolean",
            "example": "true"
          },
          "ReplaceMessageBodySetting": {
            "type": "boolean",
            "example": "true"
          },
          "ID": {
            "type": "string",
            "format": "uuid"
          },
          "EnableConversations": {
            "type": "boolean"
          },
          "AlwaysDisplayImages": {
            "type": "boolean"
          },
          "CacheUnreadMessages": {
            "type": "boolean"
          },
          "GoNextAfterMove": {
            "type": "boolean"
          },
          "ReplaceMessageBody": {
            "type": "boolean"
          }
        }
      },
      "MailAutoreplyData": {
        "type": "object",
        "properties": {
          "Tenant": {
            "type": "integer",
            "format": "int32"
          },
          "MailboxId": {
            "type": "integer",
            "format": "int32",
            "example": "33"
          },
          "TurnOn": {
            "type": "boolean",
            "example": "true"
          },
          "OnlyContacts": {
            "type": "boolean",
            "example": "false"
          },
          "TurnOnToDate": {
            "type": "boolean",
            "example": "true"
          },
          "FromDate": {
            "type": "string",
            "format": "date-time",
            "example": "2020-10-01T17:04:32.0000000"
          },
          "ToDate": {
            "type": "string",
            "format": "date-time",
            "example": "2020-10-01T17:04:32.0000000"
          },
          "Subject": {
            "type": "string",
            "example": "subject"
          },
          "Html": {
            "type": "string",
            "example": "html"
          }
        }
      },
      "MailSignatureData": {
        "type": "object",
        "properties": {
          "Tenant": {
            "type": "integer",
            "format": "int32"
          },
          "MailboxId": {
            "type": "integer",
            "format": "int32",
            "example": "132"
          },
          "Html": {
            "type": "string",
            "example": "html"
          },
          "IsActive": {
            "type": "boolean",
            "example": "true"
          }
        }
      },
      "MailAccountData": {
        "type": "object",
        "properties": {
          "MailboxId": {
            "type": "integer",
            "format": "int32",
            "example": "12"
          },
          "Email": {
            "type": "string",
            "example": "email@only.com"
          },
          "Enabled": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "name"
          },
          "OAuthConnection": {
            "type": "boolean",
            "example": "true"
          },
          "Signature": {
            "$ref": "#/components/schemas/MailSignatureData"
          },
          "Autoreply": {
            "$ref": "#/components/schemas/MailAutoreplyData"
          },
          "EMailInFolder": {
            "type": "string",
            "example": "eMailInFolder"
          },
          "QuotaError": {
            "type": "boolean",
            "example": "false"
          },
          "AuthError": {
            "type": "boolean",
            "example": "false"
          },
          "IsGroup": {
            "type": "boolean",
            "example": "true"
          },
          "IsAlias": {
            "type": "boolean",
            "example": "true"
          },
          "IsTeamlabMailbox": {
            "type": "boolean",
            "example": "true"
          },
          "IsDefault": {
            "type": "boolean",
            "example": "true"
          },
          "IsSharedDomainMailbox": {
            "type": "boolean",
            "example": "true"
          },
          "DateCreated": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "MailAddressInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Email": {
            "type": "string"
          },
          "DomainId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MailBoxData": {
        "type": "object",
        "properties": {
          "TenantId": {
            "type": "integer",
            "format": "int32"
          },
          "MailBoxId": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "UserId": {
            "type": "string"
          },
          "EMail": {
            "type": "object"
          },
          "EMailView": {
            "type": "string",
            "example": "email.only.com"
          },
          "Name": {
            "type": "string",
            "example": "name"
          },
          "Account": {
            "type": "string",
            "example": "account"
          },
          "Password": {
            "type": "string",
            "example": "password"
          },
          "Server": {
            "type": "string",
            "example": "server"
          },
          "SmtpServer": {
            "type": "string",
            "example": "smtp_server"
          },
          "SmtpPort": {
            "type": "integer",
            "format": "int32"
          },
          "SmtpPortStr": {
            "type": "string",
            "example": "smtp_port"
          },
          "SmtpAccount": {
            "type": "string",
            "example": "smtp_account"
          },
          "SmtpPassword": {
            "type": "string",
            "example": "smtp_password"
          },
          "SmtpAuth": {
            "type": "boolean",
            "example": "smtp_auth"
          },
          "Port": {
            "type": "integer",
            "format": "int32"
          },
          "PortStr": {
            "type": "string",
            "example": "port"
          },
          "Encryption": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "SSL",
              "StartTLS"
            ],
            "description": "[0 - None, 1 - SSL, 2 - StartTLS]",
            "example": "1"
          },
          "SmtpEncryption": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "SSL",
              "StartTLS"
            ],
            "description": "[0 - None, 1 - SSL, 2 - StartTLS]",
            "example": "2"
          },
          "Authentication": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "Login",
              "CramMd5",
              "OAuth2",
              "Ntlm"
            ],
            "description": "[0 - None, 1 - Login, 4 - CramMd5, 5 - OAuth2, 7 - Ntlm]",
            "example": "2"
          },
          "SmtpAuthentication": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "Login",
              "CramMd5",
              "OAuth2",
              "Ntlm"
            ],
            "description": "[0 - None, 1 - Login, 4 - CramMd5, 5 - OAuth2, 7 - Ntlm]",
            "example": "2"
          },
          "Size": {
            "type": "integer",
            "format": "int64"
          },
          "MessagesCount": {
            "type": "integer",
            "format": "int32"
          },
          "Enabled": {
            "type": "boolean"
          },
          "Active": {
            "type": "boolean"
          },
          "QuotaError": {
            "type": "boolean"
          },
          "QuotaErrorChanged": {
            "type": "boolean"
          },
          "AuthErrorDate": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            }
          },
          "ServerLoginDelay": {
            "type": "integer",
            "format": "int32"
          },
          "MailLimitedTimeDelta": {
            "type": "integer",
            "format": "int64"
          },
          "MailBeginTimestamp": {
            "type": "string",
            "format": "date-time"
          },
          "AuthorizeTimeoutInMilliseconds": {
            "type": "integer",
            "format": "int32"
          },
          "Imap": {
            "type": "boolean",
            "example": "true"
          },
          "BeginDate": {
            "type": "string",
            "format": "date-time",
            "example": "2020-10-01T17:04:32.0000000"
          },
          "IsOAuth": {
            "type": "boolean",
            "example": "true"
          },
          "OAuthType": {
            "type": "object"
          },
          "OAuthToken": {
            "type": "string"
          },
          "AccessToken": {
            "type": "string"
          },
          "AccessTokenRefreshed": {
            "type": "boolean"
          },
          "Restrict": {
            "type": "boolean",
            "example": "true"
          },
          "ImapFolderChanged": {
            "type": "boolean"
          },
          "BeginDateChanged": {
            "type": "boolean"
          },
          "ImapIntervals": {
            "type": "object"
          },
          "SmtpServerId": {
            "type": "integer",
            "format": "int32"
          },
          "InServerId": {
            "type": "integer",
            "format": "int32"
          },
          "ImapIntervalsJson": {
            "type": "string"
          },
          "EMailInFolder": {
            "type": "string",
            "example": "email_in_folder"
          },
          "IsTeamlab": {
            "type": "boolean",
            "example": "is_teamlab"
          },
          "IsRemoved": {
            "type": "boolean"
          },
          "MailSignature": {
            "$ref": "#/components/schemas/MailSignatureData"
          },
          "MailAutoreply": {
            "$ref": "#/components/schemas/MailAutoreplyData"
          },
          "MailAutoreplyHistory": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MailAddressInfo"
            }
          },
          "Groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MailAddressInfo"
            }
          },
          "LastSignalrNotify": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            }
          },
          "LastSignalrNotifySkipped": {
            "type": "boolean"
          }
        }
      },
      "MailAlertData": {
        "type": "object"
      },
      "ContactInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          },
          "Value": {
            "type": "string",
            "example": "value"
          },
          "IsPrimary": {
            "type": "boolean",
            "example": "true"
          }
        }
      },
      "MailContactData": {
        "type": "object",
        "properties": {
          "ContactId": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          },
          "Name": {
            "type": "string",
            "example": "name"
          },
          "Description": {
            "type": "string",
            "example": "description"
          },
          "Emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactInfo"
            }
          },
          "PhoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactInfo"
            }
          },
          "Type": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          },
          "SmallFotoUrl": {
            "type": "string",
            "example": "smallFotoUrl"
          },
          "MediumFotoUrl": {
            "type": "string",
            "example": "mediumFotoUrl"
          }
        }
      },
      "ServerDomainAddressData": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          },
          "DomainId": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          },
          "Email": {
            "type": "string",
            "example": "Email@only.com"
          }
        }
      },
      "ServerMailboxData": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          },
          "UserId": {
            "type": "string",
            "example": "UserId"
          },
          "UserDisplayName": {
            "type": "string",
            "example": "UserDisplayName"
          },
          "Address": {
            "$ref": "#/components/schemas/ServerDomainAddressData"
          },
          "Name": {
            "type": "string",
            "example": "Name"
          },
          "Aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServerDomainAddressData"
            }
          }
        }
      },
      "ServerDomainGroupData": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          },
          "Address": {
            "$ref": "#/components/schemas/ServerDomainAddressData"
          },
          "Addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServerDomainAddressData"
            }
          }
        }
      },
      "ServerNotificationAddressData": {
        "type": "object",
        "properties": {
          "Email": {
            "type": "string",
            "example": "Email"
          },
          "SmtpServer": {
            "type": "string",
            "example": "smtp_server"
          },
          "SmtpPort": {
            "type": "integer",
            "format": "int32",
            "example": "33"
          },
          "SmtpAccount": {
            "type": "string",
            "example": "smtp_account"
          },
          "SmtpAuth": {
            "type": "boolean",
            "example": "true"
          },
          "SmptEncryptionType": {
            "type": "string",
            "example": "smtp_encryption_type"
          },
          "SmtpAuthenticationType": {
            "type": "string",
            "example": "smtp_auth_type"
          }
        }
      },
      "ServerDomainMxRecordData": {
        "type": "object",
        "properties": {
          "Host": {
            "type": "string",
            "example": "Host"
          },
          "Priority": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          },
          "IsVerified": {
            "type": "boolean",
            "example": "true"
          }
        }
      },
      "ServerDomainDnsRecordData": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "example": "name"
          },
          "Value": {
            "type": "string",
            "example": "value"
          },
          "IsVerified": {
            "type": "boolean",
            "example": "true"
          }
        }
      },
      "ServerDomainDkimRecordData": {
        "type": "object",
        "properties": {
          "Selector": {
            "type": "string",
            "example": "Selector"
          },
          "PublicKey": {
            "type": "string",
            "example": "PublicKey"
          },
          "IsVerified": {
            "type": "boolean",
            "example": "true"
          }
        }
      },
      "ServerDomainDnsData": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          },
          "MxRecord": {
            "$ref": "#/components/schemas/ServerDomainMxRecordData"
          },
          "SpfRecord": {
            "$ref": "#/components/schemas/ServerDomainDnsRecordData"
          },
          "DkimRecord": {
            "$ref": "#/components/schemas/ServerDomainDkimRecordData"
          },
          "DomainCheckRecord": {
            "$ref": "#/components/schemas/ServerDomainDnsRecordData"
          },
          "IsVerified": {
            "type": "boolean"
          }
        }
      },
      "ServerLimitData": {
        "type": "object",
        "properties": {
          "MailboxMaxCountPerUser": {
            "type": "integer",
            "format": "int32",
            "example": "5"
          }
        }
      },
      "MailboxServer": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          },
          "ProviderId": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          },
          "Type": {
            "type": "string",
            "example": "Type"
          },
          "Hostname": {
            "type": "string",
            "example": "Hostname"
          },
          "Port": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          },
          "SocketType": {
            "type": "string",
            "example": "SocketType"
          },
          "Username": {
            "type": "string",
            "example": "Username"
          },
          "Authentication": {
            "type": "string",
            "example": "Authentication"
          },
          "IsUserData": {
            "type": "boolean",
            "example": "true"
          }
        }
      },
      "ServerData": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          },
          "Dns": {
            "$ref": "#/components/schemas/ServerDomainDnsData"
          },
          "ServerLimits": {
            "$ref": "#/components/schemas/ServerLimitData"
          },
          "InServer": {
            "$ref": "#/components/schemas/MailboxServer"
          },
          "OutServer": {
            "$ref": "#/components/schemas/MailboxServer"
          }
        }
      },
      "ServerDomainData": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "id"
          },
          "IsSharedDomain": {
            "type": "boolean",
            "example": "true"
          },
          "Name": {
            "type": "string",
            "example": "Name"
          },
          "Dns": {
            "$ref": "#/components/schemas/ServerDomainDnsData"
          }
        }
      },
      "ServerFullData": {
        "type": "object",
        "properties": {
          "Server": {
            "$ref": "#/components/schemas/ServerData"
          },
          "Domains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServerDomainData"
            }
          },
          "Mailboxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServerMailboxData"
            }
          },
          "Mailgroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServerDomainGroupData"
            }
          }
        }
      },
      "MigratorInfo": {
        "type": "object",
        "properties": {
          "MigratorName": {
            "type": "string"
          },
          "NumberOfSteps": {
            "type": "integer",
            "format": "int32"
          },
          "ArchivesIsMultiple": {
            "type": "boolean"
          }
        }
      },
      "MigratingApiContacts": {
        "type": "object",
        "properties": {
          "ContactsCount": {
            "type": "integer",
            "format": "int32"
          },
          "ModuleName": {
            "type": "string"
          },
          "ShouldImport": {
            "type": "boolean"
          }
        }
      },
      "MigratingApiCalendar": {
        "type": "object",
        "properties": {
          "CalendarsCount": {
            "type": "integer",
            "format": "int32"
          },
          "EventsCount": {
            "type": "integer",
            "format": "int32"
          },
          "ModuleName": {
            "type": "string"
          },
          "ShouldImport": {
            "type": "boolean"
          }
        }
      },
      "MigratingApiFiles": {
        "type": "object",
        "properties": {
          "FoldersCount": {
            "type": "integer",
            "format": "int32"
          },
          "FilesCount": {
            "type": "integer",
            "format": "int32"
          },
          "BytesTotal": {
            "type": "integer",
            "format": "int64"
          },
          "ModuleName": {
            "type": "string"
          },
          "ShouldImport": {
            "type": "boolean"
          }
        }
      },
      "MigratingApiMail": {
        "type": "object",
        "properties": {
          "MessagesCount": {
            "type": "integer",
            "format": "int32"
          },
          "ModuleName": {
            "type": "string"
          },
          "ShouldImport": {
            "type": "boolean"
          }
        }
      },
      "MigratingApiUser": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "ModuleName": {
            "type": "string"
          },
          "MigratingContacts": {
            "$ref": "#/components/schemas/MigratingApiContacts"
          },
          "MigratingCalendar": {
            "$ref": "#/components/schemas/MigratingApiCalendar"
          },
          "MigratingFiles": {
            "$ref": "#/components/schemas/MigratingApiFiles"
          },
          "MigratingMail": {
            "$ref": "#/components/schemas/MigratingApiMail"
          },
          "ShouldImport": {
            "type": "boolean"
          }
        }
      },
      "MigrationModules": {
        "type": "object",
        "properties": {
          "MigrationModule": {
            "type": "string"
          },
          "Module": {
            "type": "string"
          }
        }
      },
      "MigratingApiGroup": {
        "type": "object",
        "properties": {
          "GroupName": {
            "type": "string"
          },
          "ModuleName": {
            "type": "string"
          },
          "UserUidList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ShouldImport": {
            "type": "boolean"
          }
        }
      },
      "MigrationApiInfo": {
        "type": "object",
        "properties": {
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MigratingApiUser"
            }
          },
          "MigratorName": {
            "type": "string"
          },
          "Modules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MigrationModules"
            }
          },
          "FailedArchives": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MigratingApiGroup"
            }
          }
        }
      },
      "MigrationLogApiContentResponce": {
        "type": "object",
        "properties": {
          "ContentEncoding": {
            "type": "object"
          },
          "ContentStream": {
            "type": "object"
          },
          "ContentType": {
            "type": "object"
          },
          "ContentDisposition": {
            "type": "object"
          }
        }
      },
      "Tenant": {
        "type": "object",
        "properties": {
          "TenantId": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "TenantAlias": {
            "type": "string",
            "example": "TenantAlias"
          },
          "MappedDomain": {
            "type": "string",
            "example": "MappedDomain"
          },
          "Version": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "VersionChanged": {
            "type": "string",
            "format": "date-time",
            "example": "2019-07-26T00:00:00"
          },
          "TenantDomain": {
            "type": "string",
            "example": "TenantDomain"
          },
          "HostedRegion": {
            "type": "string",
            "example": "HostedRegion"
          },
          "Name": {
            "type": "string",
            "example": "Name"
          },
          "Language": {
            "type": "string",
            "example": "Language"
          },
          "TimeZone": {
            "type": "object",
            "example": "TimeZone"
          },
          "TrustedDomains": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "TrustedDomains"
            }
          },
          "TrustedDomainsType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "Custom",
              "All"
            ],
            "description": "[0 - None, 1 - Custom, 2 - All]",
            "example": "1"
          },
          "OwnerId": {
            "type": "string",
            "format": "uuid",
            "example": "38c0f464-f1e7-493e-8d95-dc4ee8ee834a"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time",
            "example": "2019-07-26T00:00:00"
          },
          "LastModified": {
            "type": "string",
            "format": "date-time",
            "example": "2019-07-26T00:00:00"
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Active",
              "Suspended",
              "RemovePending",
              "Transfering",
              "Restoring",
              "Migrating",
              "Encryption"
            ],
            "description": "[0 - Active, 1 - Suspended, 2 - RemovePending, 3 - Transfering, 4 - Restoring, 5 - Migrating, 6 - Encryption]",
            "example": "1"
          },
          "StatusChangeDate": {
            "type": "string",
            "format": "date-time",
            "example": "2019-07-26T00:00:00"
          },
          "PartnerId": {
            "type": "string",
            "example": "PartnerId"
          },
          "AffiliateId": {
            "type": "string",
            "example": "AffiliateId"
          },
          "Campaign": {
            "type": "string",
            "example": "Campaign"
          },
          "PaymentId": {
            "type": "string",
            "example": "PaymentId"
          },
          "Industry": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Other",
              "Accounting",
              "AdvertisingMarketingPR",
              "Banking",
              "Consulting",
              "Design",
              "Education",
              "Environment",
              "FinancialServices",
              "HealthCare",
              "IT",
              "Legal",
              "Manufacturing",
              "PublicSector",
              "Publishing",
              "RetailSales",
              "Telecommunications"
            ],
            "description": "[0 - Other, 1 - Accounting, 2 - AdvertisingMarketingPR, 3 - Banking, 4 - Consulting, 5 - Design, 6 - Education, 7 - Environment, 8 - FinancialServices, 9 - HealthCare, 10 - IT, 11 - Legal, 12 - Manufacturing, 13 - PublicSector, 14 - Publishing, 15 - RetailSales, 16 - Telecommunications]",
            "example": "1"
          },
          "Spam": {
            "type": "boolean",
            "example": "true"
          },
          "Calls": {
            "type": "boolean",
            "example": "true"
          }
        }
      },
      "UserInfo": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string",
            "format": "uuid",
            "example": "38c0f464-f1e7-493e-8d95-dc4ee8ee834a"
          },
          "FirstName": {
            "type": "string",
            "example": "FirstName"
          },
          "LastName": {
            "type": "string",
            "example": "LastName"
          },
          "UserName": {
            "type": "string",
            "example": "UserName"
          },
          "BirthDate": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time",
              "example": "2019-07-26T00:00:00"
            }
          },
          "Sex": {
            "type": "array",
            "items": {
              "type": "boolean",
              "example": "true"
            }
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Active",
              "Terminated",
              "LeaveOfAbsence",
              "Default",
              "All"
            ],
            "description": "[1 - Active, 2 - Terminated, 4 - LeaveOfAbsence, 5 - Default, 7 - All]",
            "example": "1"
          },
          "ActivationStatus": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "NotActivated",
              "Activated",
              "Pending",
              "AutoGenerated"
            ],
            "description": "[0 - NotActivated, 1 - Activated, 2 - Pending, 4 - AutoGenerated]",
            "example": "1"
          },
          "TerminatedDate": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time",
              "example": "2019-07-26T00:00:00"
            }
          },
          "Title": {
            "type": "string",
            "example": "Title"
          },
          "WorkFromDate": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time",
              "example": "2019-07-26T00:00:00"
            }
          },
          "Email": {
            "type": "string",
            "example": "Email"
          },
          "Contacts": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Contacts"
            }
          },
          "Location": {
            "type": "string",
            "example": "Location"
          },
          "Notes": {
            "type": "string",
            "example": "Notes"
          },
          "Removed": {
            "type": "boolean",
            "example": "false"
          },
          "LastModified": {
            "type": "string",
            "format": "date-time",
            "example": "2019-07-26T00:00:00"
          },
          "Tenant": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "Lead": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "072A8452-ADF3-40AA-B359-22DA7B8923E2"
            }
          },
          "IsActive": {
            "type": "boolean",
            "example": "false"
          },
          "CultureName": {
            "type": "string",
            "example": "CultureName"
          },
          "MobilePhone": {
            "type": "string",
            "example": "MobilePhone"
          },
          "MobilePhoneActivationStatus": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "NotActivated",
              "Activated"
            ],
            "description": "[0 - NotActivated, 1 - Activated]",
            "example": "1"
          },
          "Sid": {
            "type": "string",
            "example": "Sid"
          },
          "LdapQouta": {
            "type": "integer",
            "format": "int64",
            "example": "LdapQouta"
          },
          "SsoNameId": {
            "type": "string",
            "example": "SsoNameId"
          },
          "SsoSessionId": {
            "type": "string",
            "example": "SsoSessionId"
          },
          "CreateDate": {
            "type": "string",
            "format": "date-time",
            "example": "2019-07-26T00:00:00"
          },
          "UsedSpace": {
            "type": "integer",
            "format": "int64",
            "example": "UsedSpace"
          },
          "CheckActivation": {
            "type": "boolean"
          }
        }
      },
      "Tariff": {
        "type": "object",
        "properties": {
          "QuotaId": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "State": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Trial",
              "Paid",
              "Delay",
              "NotPaid"
            ],
            "description": "[0 - Trial, 1 - Paid, 2 - Delay, 3 - NotPaid]",
            "example": "1"
          },
          "DueDate": {
            "type": "string",
            "format": "date-time",
            "example": "2019-07-26T00:00:00"
          },
          "DelayDueDate": {
            "type": "string",
            "format": "date-time",
            "example": "2019-07-26T00:00:00"
          },
          "LicenseDate": {
            "type": "string",
            "format": "date-time",
            "example": "2019-07-26T00:00:00"
          },
          "Autorenewal": {
            "type": "boolean",
            "example": "true"
          },
          "Prolongable": {
            "type": "boolean",
            "example": "true"
          },
          "Quantity": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TenantQuota": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "234"
          },
          "Name": {
            "type": "string",
            "example": "Name"
          },
          "MaxFileSize": {
            "type": "integer",
            "format": "int64",
            "example": "12345"
          },
          "MaxTotalSize": {
            "type": "integer",
            "format": "int64",
            "example": "12345"
          },
          "ActiveUsers": {
            "type": "integer",
            "format": "int32",
            "example": "2"
          },
          "Features": {
            "type": "string",
            "example": "Features"
          },
          "Price": {
            "type": "number",
            "format": "double",
            "example": "22.5"
          },
          "AvangateId": {
            "type": "string",
            "example": "AvangateId"
          },
          "Visible": {
            "type": "boolean",
            "example": "true"
          },
          "Year": {
            "type": "boolean",
            "example": "true"
          },
          "Year3": {
            "type": "boolean",
            "example": "true"
          },
          "NonProfit": {
            "type": "boolean"
          },
          "Trial": {
            "type": "boolean"
          },
          "Free": {
            "type": "boolean"
          },
          "Open": {
            "type": "boolean"
          },
          "Update": {
            "type": "boolean"
          },
          "Support": {
            "type": "boolean"
          },
          "Audit": {
            "type": "boolean"
          },
          "DocsEdition": {
            "type": "boolean"
          },
          "HasDomain": {
            "type": "boolean"
          },
          "HasMigration": {
            "type": "boolean"
          },
          "Ldap": {
            "type": "boolean"
          },
          "Sso": {
            "type": "boolean"
          },
          "WhiteLabel": {
            "type": "boolean"
          },
          "Customization": {
            "type": "boolean"
          },
          "EnableMailServer": {
            "type": "boolean"
          },
          "Custom": {
            "type": "boolean"
          },
          "CountAdmin": {
            "type": "integer",
            "format": "int32"
          },
          "Restore": {
            "type": "boolean"
          },
          "AutoBackup": {
            "type": "boolean"
          },
          "Oauth": {
            "type": "boolean"
          },
          "ContentSearch": {
            "type": "boolean"
          },
          "ThirdParty": {
            "type": "boolean"
          }
        }
      },
      "CronParams": {
        "type": "object",
        "properties": {
          "Period": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "EveryDay",
              "EveryWeek",
              "EveryMonth"
            ],
            "description": "[0 - EveryDay, 1 - EveryWeek, 2 - EveryMonth]",
            "example": "0"
          },
          "Hour": {
            "type": "integer",
            "format": "int32",
            "example": "5"
          },
          "Day": {
            "type": "integer",
            "format": "int32",
            "example": "4"
          }
        }
      },
      "Schedule": {
        "type": "object",
        "properties": {
          "StorageType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Documents",
              "ThridpartyDocuments",
              "CustomCloud",
              "Local",
              "DataStore",
              "ThirdPartyConsumer"
            ],
            "description": "[0 - Documents, 1 - ThridpartyDocuments, 2 - CustomCloud, 3 - Local, 4 - DataStore, 5 - ThirdPartyConsumer]",
            "example": "1"
          },
          "StorageParams": {
            "type": "object",
            "example": "null"
          },
          "CronParams": {
            "$ref": "#/components/schemas/CronParams"
          },
          "BackupMail": {
            "type": "boolean",
            "example": "true"
          },
          "BackupsStored": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "LastBackupTime": {
            "type": "string",
            "format": "date-time",
            "example": "2019-07-26T00:00:00"
          }
        }
      },
      "BackupProgress": {
        "type": "object",
        "properties": {
          "IsCompleted": {
            "type": "boolean",
            "example": "false"
          },
          "Progress": {
            "type": "integer",
            "format": "int32",
            "example": "44"
          },
          "Error": {
            "type": "string",
            "example": "null"
          },
          "Link": {
            "type": "string",
            "example": "Link"
          }
        }
      },
      "BackupHistoryRecord": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid",
            "example": "38c0f464-f1e7-493e-8d95-dc4ee8ee834a"
          },
          "FileName": {
            "type": "string",
            "example": "FileName"
          },
          "StorageType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Documents",
              "ThridpartyDocuments",
              "CustomCloud",
              "Local",
              "DataStore",
              "ThirdPartyConsumer"
            ],
            "description": "[0 - Documents, 1 - ThridpartyDocuments, 2 - CustomCloud, 3 - Local, 4 - DataStore, 5 - ThirdPartyConsumer]",
            "example": "1"
          },
          "CreatedOn": {
            "type": "string",
            "format": "date-time",
            "example": "2019-07-26T00:00:00"
          },
          "ExpiresOn": {
            "type": "string",
            "format": "date-time",
            "example": "2019-07-26T00:00:00"
          }
        }
      },
      "SearchSettingsItem": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string"
          },
          "Enabled": {
            "type": "boolean"
          },
          "Title": {
            "type": "string"
          }
        }
      },
      "ProjectSecurityInfo": {
        "type": "object",
        "properties": {
          "CanCreateMilestone": {
            "type": "boolean",
            "example": "false"
          },
          "CanCreateMessage": {
            "type": "boolean",
            "example": "false"
          },
          "CanCreateTask": {
            "type": "boolean",
            "example": "false"
          },
          "CanCreateTimeSpend": {
            "type": "boolean",
            "example": "false"
          },
          "CanEditTeam": {
            "type": "boolean",
            "example": "false"
          },
          "CanReadFiles": {
            "type": "boolean",
            "example": "false"
          },
          "CanReadMilestones": {
            "type": "boolean",
            "example": "false"
          },
          "CanReadMessages": {
            "type": "boolean",
            "example": "false"
          },
          "CanReadTasks": {
            "type": "boolean",
            "example": "false"
          },
          "CanLinkContact": {
            "type": "boolean",
            "example": "false"
          },
          "CanReadContacts": {
            "type": "boolean",
            "example": "false"
          },
          "CanEdit": {
            "type": "boolean",
            "example": "false"
          },
          "CanDelete": {
            "type": "boolean",
            "example": "false"
          },
          "IsInTeam": {
            "type": "boolean",
            "example": "false"
          }
        }
      },
      "ProjectWrapperFull": {
        "type": "object",
        "properties": {
          "CanEdit": {
            "type": "boolean",
            "example": "false"
          },
          "CanDelete": {
            "type": "boolean",
            "example": "false"
          },
          "Security": {
            "$ref": "#/components/schemas/ProjectSecurityInfo"
          },
          "ProjectFolder": {
            "type": "object",
            "example": "13234"
          },
          "IsPrivate": {
            "type": "boolean",
            "example": "false"
          },
          "TaskCount": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "TaskCountTotal": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "MilestoneCount": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "DiscussionCount": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "ParticipantCount": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "TimeTrackingTotal": {
            "type": "string",
            "example": "TimeTrackingTotal"
          },
          "DocumentsCount": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "IsFollow": {
            "type": "boolean",
            "example": "0"
          },
          "Tags": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Tags1,Tags2"
            }
          },
          "Created": {
            "type": "string",
            "example": "2020-12-22T04:11:56.5658524Z"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "CreatedById": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-22T04:11:56.5658524Z"
          },
          "UpdatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "UpdatedById": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "10"
          },
          "Title": {
            "type": "string",
            "example": "Sample Title"
          },
          "Description": {
            "type": "string",
            "example": "Sample description"
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "Responsible": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "ResponsibleId": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "ObjectWrapperBase": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "10"
          },
          "Title": {
            "type": "string",
            "example": "Sample Title"
          },
          "Description": {
            "type": "string",
            "example": "Sample description"
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "Responsible": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "ResponsibleId": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "SimpleProjectWrapper": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "123"
          },
          "Title": {
            "type": "string",
            "example": "Sample project"
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "IsPrivate": {
            "type": "boolean",
            "example": "false"
          }
        }
      },
      "SubtaskWrapper": {
        "type": "object",
        "properties": {
          "CanEdit": {
            "type": "boolean",
            "example": "false"
          },
          "TaskId": {
            "type": "integer",
            "format": "int32",
            "example": "1234"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-22T04:11:56.5658524Z"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "CreatedById": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-22T04:11:56.5658524Z"
          },
          "UpdatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "UpdatedById": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "10"
          },
          "Title": {
            "type": "string",
            "example": "Sample Title"
          },
          "Description": {
            "type": "string",
            "example": "Sample description"
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "Responsible": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "ResponsibleId": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "TaskLinkWrapper": {
        "type": "object",
        "properties": {
          "DependenceTaskId": {
            "type": "integer",
            "format": "int32",
            "example": "123"
          },
          "ParentTaskId": {
            "type": "integer",
            "format": "int32",
            "example": "44"
          },
          "LinkType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Start",
              "End",
              "EndStart"
            ],
            "description": "[0 - Start, 1 - End, 2 - EndStart]",
            "example": "1"
          }
        }
      },
      "SimpleMilestoneWrapper": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "123"
          },
          "Title": {
            "type": "string",
            "example": "Title"
          },
          "Deadline": {
            "type": "string",
            "example": "2020-12-22T04:11:56.5768573Z"
          }
        }
      },
      "TaskWrapperFull": {
        "type": "object",
        "properties": {
          "Files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileWrapper"
            }
          },
          "Comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommentInfo"
            }
          },
          "CommentsCount": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "IsSubscribed": {
            "type": "boolean",
            "example": "false"
          },
          "CanEditFiles": {
            "type": "boolean",
            "example": "false"
          },
          "CanCreateComment": {
            "type": "boolean",
            "example": "false"
          },
          "Project": {
            "$ref": "#/components/schemas/ProjectWrapperFull"
          },
          "TimeSpend": {
            "type": "number",
            "format": "double",
            "example": "3.5"
          },
          "CanEdit": {
            "type": "boolean",
            "example": "false"
          },
          "CanCreateSubtask": {
            "type": "boolean",
            "example": "false"
          },
          "CanCreateTimeSpend": {
            "type": "boolean",
            "example": "false"
          },
          "CanDelete": {
            "type": "boolean",
            "example": "false"
          },
          "CanReadFiles": {
            "type": "boolean",
            "example": "false"
          },
          "Deadline": {
            "type": "string",
            "example": "2020-12-22T04:11:56.5768573Z"
          },
          "StartDate": {
            "type": "string",
            "example": "2020-12-22T04:11:56.5768573Z"
          },
          "MilestoneId": {
            "type": "integer",
            "format": "int32",
            "example": "123"
          },
          "Priority": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Normal",
              "High",
              "Low"
            ],
            "description": "[0 - Normal, 1 - High, -1 - Low]",
            "example": "1"
          },
          "ProjectOwner": {
            "$ref": "#/components/schemas/SimpleProjectWrapper"
          },
          "Progress": {
            "type": "integer",
            "format": "int32",
            "example": "55"
          },
          "Subtasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubtaskWrapper"
            }
          },
          "Links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskLinkWrapper"
            }
          },
          "Responsibles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeWraper"
            }
          },
          "ResponsibleIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          "Milestone": {
            "$ref": "#/components/schemas/SimpleMilestoneWrapper"
          },
          "CustomTaskStatus": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "example": "1"
            }
          },
          "Created": {
            "type": "string",
            "example": "2020-12-22T04:11:56.5658524Z"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "CreatedById": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-22T04:11:56.5658524Z"
          },
          "UpdatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "UpdatedById": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "10"
          },
          "Title": {
            "type": "string",
            "example": "Sample Title"
          },
          "Description": {
            "type": "string",
            "example": "Sample description"
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "Responsible": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "ResponsibleId": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "ProjectWrapper": {
        "type": "object",
        "properties": {
          "CanEdit": {
            "type": "boolean",
            "example": "false"
          },
          "IsPrivate": {
            "type": "boolean",
            "example": "false"
          },
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "10"
          },
          "Title": {
            "type": "string",
            "example": "Sample Title"
          },
          "Description": {
            "type": "string",
            "example": "Sample description"
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "Responsible": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "ResponsibleId": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "MilestoneWrapper": {
        "type": "object",
        "properties": {
          "ProjectOwner": {
            "$ref": "#/components/schemas/SimpleProjectWrapper"
          },
          "Deadline": {
            "type": "string",
            "example": "2020-12-22T04:11:56.4458522Z"
          },
          "IsKey": {
            "type": "boolean",
            "example": "false"
          },
          "IsNotify": {
            "type": "boolean",
            "example": "false"
          },
          "CanEdit": {
            "type": "boolean",
            "example": "false"
          },
          "CanDelete": {
            "type": "boolean",
            "example": "false"
          },
          "ActiveTaskCount": {
            "type": "integer",
            "format": "int32",
            "example": "15"
          },
          "ClosedTaskCount": {
            "type": "integer",
            "format": "int32",
            "example": "5"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-22T04:11:56.5658524Z"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "CreatedById": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-22T04:11:56.5658524Z"
          },
          "UpdatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "UpdatedById": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "10"
          },
          "Title": {
            "type": "string",
            "example": "Sample Title"
          },
          "Description": {
            "type": "string",
            "example": "Sample description"
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "Responsible": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "ResponsibleId": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "TimeWrapper": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "10"
          },
          "Date": {
            "type": "string",
            "example": "2020-12-22T04:11:56.5438537Z"
          },
          "Hours": {
            "type": "number",
            "format": "double",
            "example": "3.5"
          },
          "Note": {
            "type": "string",
            "example": "Sample note"
          },
          "RelatedProject": {
            "type": "integer",
            "format": "int32",
            "example": "123"
          },
          "Task": {
            "$ref": "#/components/schemas/TaskWrapper"
          },
          "RelatedTask": {
            "type": "integer",
            "format": "int32",
            "example": "13456"
          },
          "RelatedTaskTitle": {
            "type": "string",
            "example": "Sample task"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "Person": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "CanEdit": {
            "type": "boolean",
            "example": "true"
          },
          "PaymentStatus": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "NotChargeable",
              "NotBilled",
              "Billed"
            ],
            "description": "[0 - NotChargeable, 1 - NotBilled, 2 - Billed]",
            "example": "2"
          },
          "StatusChanged": {
            "type": "string",
            "example": "2020-12-22T04:11:56.5438537Z"
          },
          "CanEditPaymentStatus": {
            "type": "boolean",
            "example": "true"
          },
          "CreateOn": {
            "type": "string",
            "example": "2020-12-22T04:11:56.5438537Z"
          }
        }
      },
      "ProjectsCommonSettings": {
        "type": "object",
        "properties": {
          "EverebodyCanCreate": {
            "type": "boolean",
            "example": "true"
          },
          "HideEntitiesInPausedProjects": {
            "type": "boolean",
            "example": "true"
          },
          "StartModuleType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Projects",
              "Tasks",
              "Discussions",
              "TimeTracking"
            ],
            "description": "[0 - Projects, 1 - Tasks, 2 - Discussions, 3 - TimeTracking]",
            "example": "1"
          },
          "FolderId": {
            "type": "object"
          },
          "ID": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "CustomTaskStatus": {
        "type": "object",
        "properties": {
          "StatusType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Open",
              "Closed"
            ],
            "description": "[1 - Open, 2 - Closed]",
            "example": "1"
          },
          "CanChangeAvailable": {
            "type": "boolean",
            "example": "true"
          },
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "12"
          },
          "Image": {
            "type": "string",
            "example": "Image"
          },
          "ImageType": {
            "type": "string",
            "example": "ImageType"
          },
          "Title": {
            "type": "string",
            "example": "Title"
          },
          "Description": {
            "type": "string",
            "example": "Description"
          },
          "Color": {
            "type": "string",
            "example": "Color"
          },
          "Order": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "IsDefault": {
            "type": "boolean",
            "example": "true"
          },
          "Available": {
            "type": "array",
            "items": {
              "type": "boolean",
              "example": "true"
            }
          }
        }
      },
      "MessageWrapper": {
        "type": "object",
        "properties": {
          "ProjectOwner": {
            "$ref": "#/components/schemas/SimpleProjectWrapper"
          },
          "Text": {
            "type": "string",
            "example": "Hello, this is sample message"
          },
          "CanCreateComment": {
            "type": "boolean",
            "example": "false"
          },
          "CanEdit": {
            "type": "boolean",
            "example": "true"
          },
          "CommentsCount": {
            "type": "integer",
            "format": "int32",
            "example": "5"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-22T04:11:56.5658524Z"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "CreatedById": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-22T04:11:56.5658524Z"
          },
          "UpdatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "UpdatedById": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "10"
          },
          "Title": {
            "type": "string",
            "example": "Sample Title"
          },
          "Description": {
            "type": "string",
            "example": "Sample description"
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "Responsible": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "ResponsibleId": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "MessageWrapperFull": {
        "type": "object",
        "properties": {
          "CanEditFiles": {
            "type": "boolean",
            "example": "true"
          },
          "CanReadFiles": {
            "type": "boolean",
            "example": "true"
          },
          "Subscribers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeWraperFull"
            }
          },
          "Files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileWrapper"
            }
          },
          "Comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommentInfo"
            }
          },
          "Project": {
            "$ref": "#/components/schemas/ProjectWrapperFull"
          },
          "ProjectOwner": {
            "$ref": "#/components/schemas/SimpleProjectWrapper"
          },
          "Text": {
            "type": "string",
            "example": "Hello, this is sample message"
          },
          "CanCreateComment": {
            "type": "boolean",
            "example": "false"
          },
          "CanEdit": {
            "type": "boolean",
            "example": "true"
          },
          "CommentsCount": {
            "type": "integer",
            "format": "int32",
            "example": "5"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-22T04:11:56.5658524Z"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "CreatedById": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-22T04:11:56.5658524Z"
          },
          "UpdatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "UpdatedById": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "10"
          },
          "Title": {
            "type": "string",
            "example": "Sample Title"
          },
          "Description": {
            "type": "string",
            "example": "Sample description"
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "Responsible": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "ResponsibleId": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "ReportTemplateWrapper": {
        "type": "object",
        "properties": {
          "AutoGenerated": {
            "type": "boolean",
            "example": "true"
          },
          "Cron": {
            "type": "string",
            "example": "Cron"
          },
          "ReportType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "MilestonesExpired",
              "MilestonesNearest",
              "UsersWithoutActiveTasks",
              "ProjectsWithoutActiveMilestones",
              "ProjectsWithoutActiveTasks",
              "UsersActivity",
              "UsersWorkload",
              "ProjectsList",
              "TimeSpend",
              "TasksByProjects",
              "TasksByUsers",
              "TasksExpired",
              "EmptyReport"
            ],
            "description": "[0 - MilestonesExpired, 1 - MilestonesNearest, 2 - UsersWithoutActiveTasks, 3 - ProjectsWithoutActiveMilestones, 4 - ProjectsWithoutActiveTasks, 5 - UsersActivity, 6 - UsersWorkload, 7 - ProjectsList, 8 - TimeSpend, 9 - TasksByProjects, 10 - TasksByUsers, 11 - TasksExpired, 12 - EmptyReport]",
            "example": "0"
          },
          "Filter": {
            "type": "string",
            "example": "Filter"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-22T04:11:56.5658524Z"
          },
          "CreatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "CreatedById": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "Updated": {
            "type": "string",
            "example": "2020-12-22T04:11:56.5658524Z"
          },
          "UpdatedBy": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "UpdatedById": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "10"
          },
          "Title": {
            "type": "string",
            "example": "Sample Title"
          },
          "Description": {
            "type": "string",
            "example": "Sample description"
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "Responsible": {
            "$ref": "#/components/schemas/EmployeeWraper"
          },
          "ResponsibleId": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "ReportFile": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "123"
          },
          "Name": {
            "type": "string",
            "example": "Name"
          },
          "ReportTemplate": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "CreateBy": {
            "type": "string",
            "format": "uuid",
            "example": "92eb52c8-bb93-4caf-87fb-46ea11530899"
          },
          "CreateOn": {
            "type": "string",
            "format": "date-time",
            "example": "2019-07-26T00:00:00"
          },
          "ReportType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "MilestonesExpired",
              "MilestonesNearest",
              "UsersWithoutActiveTasks",
              "ProjectsWithoutActiveMilestones",
              "ProjectsWithoutActiveTasks",
              "UsersActivity",
              "UsersWorkload",
              "ProjectsList",
              "TimeSpend",
              "TasksByProjects",
              "TasksByUsers",
              "TasksExpired",
              "EmptyReport"
            ],
            "description": "[0 - MilestonesExpired, 1 - MilestonesNearest, 2 - UsersWithoutActiveTasks, 3 - ProjectsWithoutActiveMilestones, 4 - ProjectsWithoutActiveTasks, 5 - UsersActivity, 6 - UsersWorkload, 7 - ProjectsList, 8 - TimeSpend, 9 - TasksByProjects, 10 - TasksByUsers, 11 - TasksExpired, 12 - EmptyReport]",
            "example": "1"
          },
          "FileId": {
            "type": "object",
            "example": "null"
          }
        }
      },
      "SearchItemWrapper": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "example": "345"
          },
          "EntityType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Project",
              "Milestone",
              "Task",
              "SubTask",
              "Team",
              "Comment",
              "Message",
              "File",
              "TimeSpend"
            ],
            "description": "[0 - Project, 1 - Milestone, 2 - Task, 3 - SubTask, 4 - Team, 5 - Comment, 6 - Message, 7 - File, 8 - TimeSpend]",
            "example": "0"
          },
          "Title": {
            "type": "string",
            "example": "Sample title"
          },
          "Description": {
            "type": "string",
            "example": "Sample desription"
          },
          "Created": {
            "type": "string",
            "example": "2020-12-22T04:11:56.5308514Z"
          }
        }
      },
      "SearchWrapper": {
        "type": "object",
        "properties": {
          "Item": {
            "$ref": "#/components/schemas/SearchItemWrapper"
          },
          "Owner": {
            "$ref": "#/components/schemas/SearchItemWrapper"
          }
        }
      },
      "Subtask": {
        "type": "object",
        "properties": {
          "EntityType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Project",
              "Milestone",
              "Task",
              "SubTask",
              "Team",
              "Comment",
              "Message",
              "File",
              "TimeSpend"
            ],
            "description": "[0 - Project, 1 - Milestone, 2 - Task, 3 - SubTask, 4 - Team, 5 - Comment, 6 - Message, 7 - File, 8 - TimeSpend]"
          },
          "Title": {
            "type": "string",
            "example": "Title"
          },
          "Responsible": {
            "type": "string",
            "format": "uuid",
            "example": "2fdfe577-3c26-4736-9df9-b5a683bb8520"
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Open",
              "Closed"
            ],
            "description": "[1 - Open, 2 - Closed]",
            "example": "1"
          },
          "Task": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "ParentTask": {
            "type": "object",
            "example": "null"
          },
          "CreateBy": {
            "type": "string",
            "format": "uuid",
            "example": "2fdfe577-3c26-4736-9df9-b5a683bb8520"
          },
          "CreateOn": {
            "type": "string",
            "format": "date-time",
            "example": "2020-12-22T04:11:57.0469085+00:00"
          },
          "LastModifiedOn": {
            "type": "string",
            "format": "date-time",
            "example": "2020-12-22T04:11:57.0469085+00:00"
          },
          "LastModifiedBy": {
            "type": "string",
            "format": "uuid",
            "example": "1"
          },
          "StatusChangedOn": {
            "type": "string",
            "format": "date-time",
            "example": "2020-12-22T04:11:57.0469085+00:00"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "2fdfe577-3c26-4736-9df9-b5a683bb8520"
          },
          "UniqID": {
            "type": "string",
            "example": "UniqID"
          },
          "ItemPath": {
            "type": "string",
            "example": "ItemPath"
          }
        }
      },
      "TaskLink": {
        "type": "object",
        "properties": {
          "ParentTaskId": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "DependenceTaskId": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "LinkType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Start",
              "End",
              "EndStart"
            ],
            "description": "[0 - Start, 1 - End, 2 - EndStart]",
            "example": "1"
          }
        }
      },
      "Project": {
        "type": "object",
        "properties": {
          "EntityType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Project",
              "Milestone",
              "Task",
              "SubTask",
              "Team",
              "Comment",
              "Message",
              "File",
              "TimeSpend"
            ],
            "description": "[0 - Project, 1 - Milestone, 2 - Task, 3 - SubTask, 4 - Team, 5 - Comment, 6 - Message, 7 - File, 8 - TimeSpend]"
          },
          "ItemPath": {
            "type": "string"
          },
          "Title": {
            "type": "string",
            "example": "Title"
          },
          "HtmlTitle": {
            "type": "string",
            "example": "HtmlTitle"
          },
          "Description": {
            "type": "string",
            "example": "Description"
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Open",
              "Closed",
              "Paused"
            ],
            "description": "[0 - Open, 1 - Closed, 2 - Paused]",
            "example": "1"
          },
          "Responsible": {
            "type": "string",
            "format": "uuid",
            "example": "2fdfe577-3c26-4736-9df9-b5a683bb8520"
          },
          "Private": {
            "type": "boolean",
            "example": "false"
          },
          "Security": {
            "$ref": "#/components/schemas/ProjectSecurityInfo"
          },
          "CreateBy": {
            "type": "string",
            "format": "uuid",
            "example": "2fdfe577-3c26-4736-9df9-b5a683bb8520"
          },
          "CreateOn": {
            "type": "string",
            "format": "date-time",
            "example": "2020-12-22T04:11:57.0469085+00:00"
          },
          "LastModifiedBy": {
            "type": "string",
            "format": "uuid",
            "example": "2fdfe577-3c26-4736-9df9-b5a683bb8520"
          },
          "LastModifiedOn": {
            "type": "string",
            "format": "date-time",
            "example": "2020-12-22T04:11:57.0469085+00:00"
          },
          "TaskCount": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "TaskCountTotal": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "MilestoneCount": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "ParticipantCount": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "DiscussionCount": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "TimeTrackingTotal": {
            "type": "string",
            "example": "TimeTrackingTotal"
          },
          "DocumentsCount": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "StatusChangedOn": {
            "type": "string",
            "format": "date-time",
            "example": "2020-12-22T04:11:57.0469085+00:00"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "2fdfe577-3c26-4736-9df9-b5a683bb8520"
          },
          "UniqID": {
            "type": "string",
            "example": "UniqID"
          }
        }
      },
      "Milestone": {
        "type": "object",
        "properties": {
          "EntityType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Project",
              "Milestone",
              "Task",
              "SubTask",
              "Team",
              "Comment",
              "Message",
              "File",
              "TimeSpend"
            ],
            "description": "[0 - Project, 1 - Milestone, 2 - Task, 3 - SubTask, 4 - Team, 5 - Comment, 6 - Message, 7 - File, 8 - TimeSpend]"
          },
          "ItemPath": {
            "type": "string"
          },
          "Responsible": {
            "type": "string",
            "format": "uuid",
            "example": "2fdfe577-3c26-4736-9df9-b5a683bb8520"
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Open",
              "Closed"
            ],
            "description": "[0 - Open, 1 - Closed]",
            "example": "1"
          },
          "IsNotify": {
            "type": "boolean",
            "example": "false"
          },
          "IsKey": {
            "type": "boolean",
            "example": "false"
          },
          "DeadLine": {
            "type": "string",
            "format": "date-time",
            "example": "2020-12-22T04:11:57.0469085+00:00"
          },
          "ActiveTaskCount": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "ClosedTaskCount": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "StatusChangedOn": {
            "type": "string",
            "format": "date-time",
            "example": "2020-12-22T04:11:57.0469085+00:00"
          },
          "Title": {
            "type": "string",
            "example": "Title"
          },
          "Description": {
            "type": "string",
            "example": "Description"
          },
          "HtmlTitle": {
            "type": "string",
            "example": "HtmlTitle"
          },
          "Project": {
            "$ref": "#/components/schemas/Project"
          },
          "CreateBy": {
            "type": "string",
            "format": "uuid",
            "example": "2fdfe577-3c26-4736-9df9-b5a683bb8520"
          },
          "CreateOn": {
            "type": "string",
            "format": "date-time",
            "example": "2020-12-22T04:11:57.0469085+00:00"
          },
          "LastModifiedOn": {
            "type": "string",
            "format": "date-time",
            "example": "2020-12-22T04:11:57.0469085+00:00"
          },
          "LastModifiedBy": {
            "type": "string",
            "format": "uuid",
            "example": "2fdfe577-3c26-4736-9df9-b5a683bb8520"
          },
          "NotifyId": {
            "type": "string",
            "example": "NotifyId"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "2fdfe577-3c26-4736-9df9-b5a683bb8520"
          },
          "UniqID": {
            "type": "string",
            "example": "UniqID"
          }
        }
      },
      "TaskSecurityInfo": {
        "type": "object",
        "properties": {
          "CanEdit": {
            "type": "boolean",
            "example": "false"
          },
          "CanCreateSubtask": {
            "type": "boolean",
            "example": "false"
          },
          "CanCreateTimeSpend": {
            "type": "boolean",
            "example": "false"
          },
          "CanDelete": {
            "type": "boolean",
            "example": "false"
          },
          "CanReadFiles": {
            "type": "boolean",
            "example": "false"
          }
        }
      },
      "Task": {
        "type": "object",
        "properties": {
          "EntityType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Project",
              "Milestone",
              "Task",
              "SubTask",
              "Team",
              "Comment",
              "Message",
              "File",
              "TimeSpend"
            ],
            "description": "[0 - Project, 1 - Milestone, 2 - Task, 3 - SubTask, 4 - Team, 5 - Comment, 6 - Message, 7 - File, 8 - TimeSpend]"
          },
          "ItemPath": {
            "type": "string"
          },
          "Priority": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Normal",
              "High",
              "Low"
            ],
            "description": "[0 - Normal, 1 - High, -1 - Low]",
            "example": "1"
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Open",
              "Closed"
            ],
            "description": "[1 - Open, 2 - Closed]",
            "example": "1"
          },
          "CustomTaskStatus": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "example": "1"
            }
          },
          "Milestone": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "Deadline": {
            "type": "string",
            "format": "date-time",
            "example": "1"
          },
          "SubTasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subtask"
            }
          },
          "Responsibles": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "2fdfe577-3c26-4736-9df9-b5a683bb8520"
            }
          },
          "Links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskLink"
            }
          },
          "MilestoneDesc": {
            "$ref": "#/components/schemas/Milestone"
          },
          "StatusChangedOn": {
            "type": "string",
            "format": "date-time",
            "example": "2020-12-22T04:11:57.0469085+00:00"
          },
          "StartDate": {
            "type": "string",
            "format": "date-time",
            "example": "2020-12-22T04:11:57.0469085+00:00"
          },
          "Security": {
            "$ref": "#/components/schemas/TaskSecurityInfo"
          },
          "Progress": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "Title": {
            "type": "string",
            "example": "Title"
          },
          "Description": {
            "type": "string",
            "example": "Description"
          },
          "HtmlTitle": {
            "type": "string",
            "example": "HtmlTitle"
          },
          "Project": {
            "$ref": "#/components/schemas/Project"
          },
          "CreateBy": {
            "type": "string",
            "format": "uuid",
            "example": "2fdfe577-3c26-4736-9df9-b5a683bb8520"
          },
          "CreateOn": {
            "type": "string",
            "format": "date-time",
            "example": "2020-12-22T04:11:57.0469085+00:00"
          },
          "LastModifiedOn": {
            "type": "string",
            "format": "date-time",
            "example": "2020-12-22T04:11:57.0469085+00:00"
          },
          "LastModifiedBy": {
            "type": "string",
            "format": "uuid",
            "example": "2fdfe577-3c26-4736-9df9-b5a683bb8520"
          },
          "NotifyId": {
            "type": "string",
            "example": "NotifyId"
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "example": "2fdfe577-3c26-4736-9df9-b5a683bb8520"
          },
          "UniqID": {
            "type": "string",
            "example": "UniqID"
          }
        }
      },
      "Participant": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string",
            "format": "uuid",
            "example": "2fdfe577-3c26-4736-9df9-b5a683bb8520"
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "CanReadFiles": {
            "type": "boolean",
            "example": "true"
          },
          "CanReadMilestones": {
            "type": "boolean",
            "example": "true"
          },
          "CanReadMessages": {
            "type": "boolean",
            "example": "true"
          },
          "CanReadTasks": {
            "type": "boolean",
            "example": "true"
          },
          "CanReadContacts": {
            "type": "boolean",
            "example": "true"
          },
          "IsVisitor": {
            "type": "boolean",
            "example": "true"
          },
          "IsFullAdmin": {
            "type": "boolean",
            "example": "true"
          },
          "UserInfo": {
            "$ref": "#/components/schemas/UserInfo"
          },
          "IsAdmin": {
            "type": "boolean",
            "example": "true"
          },
          "IsManager": {
            "type": "boolean",
            "example": "true"
          },
          "IsRemovedFromTeam": {
            "type": "boolean",
            "example": "true"
          },
          "ProjectTeamSecurity": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "Messages",
              "Tasks",
              "Files",
              "Milestone",
              "Contacts"
            ],
            "description": "[0 - None, 1 - Messages, 2 - Tasks, 4 - Files, 8 - Milestone, 16 - Contacts]"
          }
        }
      },
      "ParticipantWrapper": {
        "type": "object",
        "properties": {
          "CanReadFiles": {
            "type": "boolean",
            "example": "true"
          },
          "CanReadMilestones": {
            "type": "boolean",
            "example": "true"
          },
          "CanReadMessages": {
            "type": "boolean",
            "example": "true"
          },
          "CanReadTasks": {
            "type": "boolean",
            "example": "true"
          },
          "CanReadContacts": {
            "type": "boolean",
            "example": "true"
          },
          "IsAdministrator": {
            "type": "boolean",
            "example": "true"
          },
          "IsRemovedFromTeam": {
            "type": "boolean",
            "example": "true"
          },
          "FirstName": {
            "type": "string",
            "example": "Mike"
          },
          "LastName": {
            "type": "string",
            "example": "Zanyatski"
          },
          "UserName": {
            "type": "string",
            "example": "Mike.Zanyatski"
          },
          "Email": {
            "type": "string",
            "example": "my@domain.com"
          },
          "Birthday": {
            "type": "string",
            "example": "2008-04-10T06-30-00.000Z"
          },
          "Sex": {
            "type": "string",
            "example": "male"
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "Active",
              "Terminated",
              "LeaveOfAbsence",
              "Default",
              "All"
            ],
            "description": "[1 - Active, 2 - Terminated, 4 - LeaveOfAbsence, 5 - Default, 7 - All]",
            "example": "1"
          },
          "ActivationStatus": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "NotActivated",
              "Activated",
              "Pending",
              "AutoGenerated"
            ],
            "description": "[0 - NotActivated, 1 - Activated, 2 - Pending, 4 - AutoGenerated]",
            "example": "0"
          },
          "Terminated": {
            "type": "string",
            "example": "2008-04-10T06-30-00.000Z"
          },
          "Department": {
            "type": "string",
            "example": "Marketing"
          },
          "WorkFrom": {
            "type": "string",
            "example": "2008-04-10T06-30-00.000Z"
          },
          "Groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupWrapperSummary"
            }
          },
          "Location": {
            "type": "string",
            "example": "Palo Alto"
          },
          "Notes": {
            "type": "string",
            "example": "Notes to worker"
          },
          "Lead": {
            "type": "string",
            "format": "uuid",
            "example": "055312F1-1D71-4786-BB5B-D5910316E53C"
          },
          "AvatarMedium": {
            "type": "string",
            "example": "url to medium avatar"
          },
          "Avatar": {
            "type": "string",
            "example": "url to big avatar"
          },
          "IsAdmin": {
            "type": "boolean",
            "example": "false"
          },
          "IsLDAP": {
            "type": "boolean",
            "example": "false"
          },
          "ListAdminModules": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "projects,crm"
            }
          },
          "IsOwner": {
            "type": "boolean",
            "example": "false"
          },
          "IsVisitor": {
            "type": "boolean",
            "example": "false"
          },
          "CultureName": {
            "type": "string",
            "example": "en-EN"
          },
          "IsSSO": {
            "type": "boolean",
            "example": "false"
          },
          "QuotaLimit": {
            "type": "integer",
            "format": "int64"
          },
          "UsedSpace": {
            "type": "integer",
            "format": "int64"
          },
          "DocsSpace": {
            "type": "integer",
            "format": "int64"
          },
          "MailSpace": {
            "type": "integer",
            "format": "int64"
          },
          "TalkSpace": {
            "type": "integer",
            "format": "int64"
          },
          "Id": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "DisplayName": {
            "type": "string",
            "example": "Mike Zanyatski"
          },
          "Title": {
            "type": "string",
            "example": "Manager"
          },
          "AvatarSmall": {
            "type": "string",
            "example": "url to small avatar"
          },
          "ProfileUrl": {
            "type": "string",
            "example": "\\/Products\\/People\\/Profile.aspx?user=administrator"
          }
        }
      },
      "SampleClass": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Value": {
            "type": "string"
          }
        }
      },
      "LoginEventWrapper": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Date": {
            "type": "string"
          },
          "User": {
            "type": "string"
          },
          "UserId": {
            "type": "string",
            "format": "uuid"
          },
          "Login": {
            "type": "string"
          },
          "Action": {
            "type": "string"
          },
          "ActionId": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "LoginSuccess",
              "LoginSuccessViaSocialAccount",
              "LoginFailInvalidCombination",
              "LoginFailSocialAccountNotFound",
              "LoginFailDisabledProfile",
              "LoginFail",
              "Logout",
              "LoginSuccessViaSms",
              "LoginFailViaSms",
              "LoginFailIpSecurity",
              "LoginSuccessViaApi",
              "LoginSuccessViaSocialApp",
              "LoginSuccessViaApiSms",
              "LoginFailViaApi",
              "LoginFailViaApiSms",
              "LoginSuccessViaSSO",
              "SessionStarted",
              "SessionCompleted",
              "LoginFailViaSSO",
              "LoginSuccessViaApiSocialAccount",
              "LoginFailViaApiSocialAccount",
              "LoginSuccesViaTfaApp",
              "LoginFailViaTfaApp",
              "LoginFailBruteForce",
              "LoginSuccessViaApiTfa",
              "LoginFailViaApiTfa",
              "LoginFailRecaptcha",
              "ProjectCreated",
              "ProjectCreatedFromTemplate",
              "ProjectUpdated",
              "ProjectUpdatedStatus",
              "ProjectFollowed",
              "ProjectUnfollowed",
              "ProjectDeleted",
              "ProjectDeletedMember",
              "ProjectUpdatedTeam",
              "ProjectUpdatedMemberRights",
              "ProjectLinkedCompany",
              "ProjectUnlinkedCompany",
              "ProjectLinkedPerson",
              "ProjectUnlinkedPerson",
              "ProjectLinkedContacts",
              "MilestoneCreated",
              "MilestoneUpdated",
              "MilestoneUpdatedStatus",
              "MilestoneDeleted",
              "TaskCreated",
              "TaskCreatedFromDiscussion",
              "TaskUpdated",
              "TaskUpdatedStatus",
              "TaskMovedToMilestone",
              "TaskUnlinkedMilestone",
              "TaskUpdatedFollowing",
              "TaskAttachedFiles",
              "TaskDetachedFile",
              "TasksLinked",
              "TasksUnlinked",
              "TaskDeleted",
              "TaskCommentCreated",
              "TaskCommentUpdated",
              "TaskCommentDeleted",
              "SubtaskCreated",
              "SubtaskUpdated",
              "SubtaskUpdatedStatus",
              "SubtaskDeleted",
              "DiscussionCreated",
              "DiscussionUpdated",
              "DiscussionUpdatedFollowing",
              "DiscussionAttachedFiles",
              "DiscussionDetachedFile",
              "DiscussionDeleted",
              "DiscussionCommentCreated",
              "DiscussionCommentUpdated",
              "DiscussionCommentDeleted",
              "TaskTimeCreated",
              "TaskTimeUpdated",
              "TaskTimesUpdatedStatus",
              "TaskTimesDeleted",
              "ReportTemplateCreated",
              "ReportTemplateUpdated",
              "ReportTemplateDeleted",
              "ProjectTemplateCreated",
              "ProjectTemplateUpdated",
              "ProjectTemplateDeleted",
              "ProjectsImportedFromBasecamp",
              "SubtaskMoved",
              "CompanyCreated",
              "CompanyUpdated",
              "CompanyUpdatedPrincipalInfo",
              "CompanyUpdatedPhoto",
              "CompanyUpdatedTemperatureLevel",
              "CompanyUpdatedPersonsTemperatureLevel",
              "CompanyCreatedTag",
              "CompanyCreatedPersonsTag",
              "CompanyDeletedTag",
              "CompanyCreatedHistoryEvent",
              "CompanyDeletedHistoryEvent",
              "CompanyLinkedPerson",
              "CompanyUnlinkedPerson",
              "CompanyLinkedProject",
              "CompanyUnlinkedProject",
              "CompanyAttachedFiles",
              "CompaniesMerged",
              "CompanyDeleted",
              "PersonCreated",
              "PersonsCreated",
              "PersonUpdated",
              "PersonUpdatedPrincipalInfo",
              "PersonUpdatedPhoto",
              "PersonUpdatedTemperatureLevel",
              "PersonUpdatedCompanyTemperatureLevel",
              "PersonCreatedTag",
              "PersonCreatedCompanyTag",
              "PersonDeletedTag",
              "PersonCreatedHistoryEvent",
              "PersonDeletedHistoryEvent",
              "PersonLinkedProject",
              "PersonUnlinkedProject",
              "PersonAttachedFiles",
              "PersonsMerged",
              "PersonDeleted",
              "ContactsDeleted",
              "CrmTaskCreated",
              "ContactsCreatedCrmTasks",
              "CrmTaskUpdated",
              "CrmTaskOpened",
              "CrmTaskClosed",
              "CrmTaskDeleted",
              "OpportunityCreated",
              "OpportunityUpdated",
              "OpportunityUpdatedStage",
              "OpportunityCreatedTag",
              "OpportunityDeletedTag",
              "OpportunityCreatedHistoryEvent",
              "OpportunityDeletedHistoryEvent",
              "OpportunityLinkedCompany",
              "OpportunityUnlinkedCompany",
              "OpportunityLinkedPerson",
              "OpportunityUnlinkedPerson",
              "OpportunityAttachedFiles",
              "OpportunityOpenedAccess",
              "OpportunityRestrictedAccess",
              "OpportunityDeleted",
              "OpportunitiesDeleted",
              "InvoiceCreated",
              "InvoiceUpdated",
              "InvoicesUpdatedStatus",
              "InvoiceDeleted",
              "InvoicesDeleted",
              "CaseCreated",
              "CaseUpdated",
              "CaseOpened",
              "CaseClosed",
              "CaseCreatedTag",
              "CaseDeletedTag",
              "CaseCreatedHistoryEvent",
              "CaseDeletedHistoryEvent",
              "CaseLinkedCompany",
              "CaseUnlinkedCompany",
              "CaseLinkedPerson",
              "CaseUnlinkedPerson",
              "CaseAttachedFiles",
              "CaseOpenedAccess",
              "CaseRestrictedAccess",
              "CaseDeleted",
              "CasesDeleted",
              "CrmSmtpSettingsUpdated",
              "CrmTestMailSent",
              "CrmDefaultCurrencyUpdated",
              "CrmAllDataExported",
              "ContactTemperatureLevelCreated",
              "ContactTemperatureLevelUpdated",
              "ContactTemperatureLevelUpdatedColor",
              "ContactTemperatureLevelsUpdatedOrder",
              "ContactTemperatureLevelDeleted",
              "ContactTemperatureLevelSettingsUpdated",
              "ContactTypeCreated",
              "ContactTypeUpdated",
              "ContactTypesUpdatedOrder",
              "ContactTypeDeleted",
              "InvoiceItemCreated",
              "InvoiceItemUpdated",
              "InvoiceItemDeleted",
              "InvoiceItemsDeleted",
              "InvoiceTaxCreated",
              "InvoiceTaxUpdated",
              "InvoiceTaxDeleted",
              "OrganizationProfileUpdatedCompanyName",
              "OrganizationProfileUpdatedInvoiceLogo",
              "OrganizationProfileUpdatedAddress",
              "InvoiceNumberFormatUpdated",
              "ContactUserFieldCreated",
              "ContactUserFieldUpdated",
              "ContactUserFieldsUpdatedOrder",
              "ContactUserFieldDeleted",
              "CompanyUserFieldCreated",
              "CompanyUserFieldUpdated",
              "CompanyUserFieldsUpdatedOrder",
              "CompanyUserFieldDeleted",
              "PersonUserFieldCreated",
              "PersonUserFieldUpdated",
              "PersonUserFieldsUpdatedOrder",
              "PersonUserFieldDeleted",
              "OpportunityUserFieldCreated",
              "OpportunityUserFieldUpdated",
              "OpportunityUserFieldsUpdatedOrder",
              "OpportunityUserFieldDeleted",
              "CaseUserFieldCreated",
              "CaseUserFieldUpdated",
              "CaseUserFieldsUpdatedOrder",
              "CaseUserFieldDeleted",
              "HistoryEventCategoryCreated",
              "HistoryEventCategoryUpdated",
              "HistoryEventCategoryUpdatedIcon",
              "HistoryEventCategoriesUpdatedOrder",
              "HistoryEventCategoryDeleted",
              "CrmTaskCategoryCreated",
              "CrmTaskCategoryUpdated",
              "CrmTaskCategoryUpdatedIcon",
              "CrmTaskCategoriesUpdatedOrder",
              "CrmTaskCategoryDeleted",
              "OpportunityStageCreated",
              "OpportunityStageUpdated",
              "OpportunityStageUpdatedColor",
              "OpportunityStagesUpdatedOrder",
              "OpportunityStageDeleted",
              "ContactsCreatedTag",
              "ContactsDeletedTag",
              "OpportunitiesCreatedTag",
              "OpportunitiesDeletedTag",
              "CasesCreatedTag",
              "CasesDeletedTag",
              "ContactsTagSettingsUpdated",
              "WebsiteContactFormUpdatedKey",
              "ContactsImportedFromCSV",
              "CrmTasksImportedFromCSV",
              "OpportunitiesImportedFromCSV",
              "CasesImportedFromCSV",
              "ContactsExportedToCsv",
              "CrmTasksExportedToCsv",
              "OpportunitiesExportedToCsv",
              "CasesExportedToCsv",
              "CompanyCreatedWithWebForm",
              "PersonCreatedWithWebForm",
              "CompanyDetachedFile",
              "PersonDetachedFile",
              "OpportunityDetachedFile",
              "CaseDetachedFile",
              "CurrencyRateUpdated",
              "InvoiceDefaultTermsUpdated",
              "InvoiceDownloaded",
              "CrmSmtpMailSent",
              "UserCreated",
              "GuestCreated",
              "UserCreatedViaInvite",
              "GuestCreatedViaInvite",
              "UserActivated",
              "GuestActivated",
              "UserUpdated",
              "UserUpdatedLanguage",
              "UserAddedAvatar",
              "UserDeletedAvatar",
              "UserUpdatedAvatarThumbnails",
              "UserLinkedSocialAccount",
              "UserUnlinkedSocialAccount",
              "UserSentActivationInstructions",
              "UserSentEmailChangeInstructions",
              "UserSentPasswordChangeInstructions",
              "UserSentDeleteInstructions",
              "UserUpdatedPassword",
              "UserDeleted",
              "UsersUpdatedType",
              "UsersUpdatedStatus",
              "UsersSentActivationInstructions",
              "UsersDeleted",
              "SentInviteInstructions",
              "UserImported",
              "GuestImported",
              "GroupCreated",
              "GroupUpdated",
              "GroupDeleted",
              "UserUpdatedMobileNumber",
              "UserDataReassigns",
              "UserDataRemoving",
              "UserConnectedTfaApp",
              "UserDisconnectedTfaApp",
              "UserLogoutActiveConnections",
              "UserLogoutActiveConnection",
              "UserLogoutActiveConnectionsForUser",
              "FileCreated",
              "FileRenamed",
              "FileUpdated",
              "FileCreatedVersion",
              "FileDeletedVersion",
              "FileUpdatedRevisionComment",
              "FileLocked",
              "FileUnlocked",
              "FileUpdatedAccess",
              "FileDownloaded",
              "FileDownloadedAs",
              "FileUploaded",
              "FileImported",
              "FileCopied",
              "FileCopiedWithOverwriting",
              "FileMoved",
              "FileMovedWithOverwriting",
              "FileMovedToTrash",
              "FileDeleted",
              "FolderCreated",
              "FolderRenamed",
              "FolderUpdatedAccess",
              "FolderCopied",
              "FolderCopiedWithOverwriting",
              "FolderMoved",
              "FolderMovedWithOverwriting",
              "FolderMovedToTrash",
              "FolderDeleted",
              "ThirdPartyCreated",
              "ThirdPartyUpdated",
              "ThirdPartyDeleted",
              "DocumentsThirdPartySettingsUpdated",
              "DocumentsOverwritingSettingsUpdated",
              "DocumentsUploadingFormatsSettingsUpdated",
              "UserFileUpdated",
              "FileConverted",
              "FileSendAccessLink",
              "DocumentServiceLocationSetting",
              "AuthorizationKeysSetting",
              "FullTextSearchSetting",
              "StartTransferSetting",
              "StartBackupSetting",
              "LicenseKeyUploaded",
              "FileChangeOwner",
              "FileRestoreVersion",
              "DocumentSendToSign",
              "DocumentSignComplete",
              "UserUpdatedEmail",
              "DocumentsStoreForcesave",
              "DocumentsForcesave",
              "StartStorageEncryption",
              "PrivacyRoomEnable",
              "PrivacyRoomDisable",
              "StartStorageDecryption",
              "FileOpenedForChange",
              "FileMarkedAsFavorite",
              "FileRemovedFromFavorite",
              "FolderDownloaded",
              "FileRemovedFromList",
              "FolderRemovedFromList",
              "FileExternalLinkAccessUpdated",
              "TrashEmptied",
              "FileRevisionDownloaded",
              "FileMarkedAsRead",
              "FileReaded",
              "FolderMarkedAsRead",
              "FolderUpdatedAccessFor",
              "FolderMovedFrom",
              "FileUpdatedAccessFor",
              "DocumentsExternalShareSettingsUpdated",
              "LanguageSettingsUpdated",
              "TimeZoneSettingsUpdated",
              "DnsSettingsUpdated",
              "TrustedMailDomainSettingsUpdated",
              "PasswordStrengthSettingsUpdated",
              "TwoFactorAuthenticationSettingsUpdated",
              "AdministratorMessageSettingsUpdated",
              "DefaultStartPageSettingsUpdated",
              "ProductsListUpdated",
              "AdministratorAdded",
              "AdministratorOpenedFullAccess",
              "AdministratorDeleted",
              "UsersOpenedProductAccess",
              "GroupsOpenedProductAccess",
              "ProductAccessOpened",
              "ProductAccessRestricted",
              "ProductAddedAdministrator",
              "ProductDeletedAdministrator",
              "GreetingSettingsUpdated",
              "TeamTemplateChanged",
              "ColorThemeChanged",
              "OwnerSentChangeOwnerInstructions",
              "OwnerUpdated",
              "OwnerSentPortalDeactivationInstructions",
              "OwnerSentPortalDeleteInstructions",
              "PortalDeactivated",
              "PortalDeleted",
              "LoginHistoryReportDownloaded",
              "AuditTrailReportDownloaded",
              "SSOEnabled",
              "SSODisabled",
              "PortalAccessSettingsUpdated",
              "CookieSettingsUpdated",
              "MailServiceSettingsUpdated",
              "CustomNavigationSettingsUpdated",
              "AuditSettingsUpdated",
              "TwoFactorAuthenticationDisabled",
              "TwoFactorAuthenticationEnabledBySms",
              "TwoFactorAuthenticationEnabledByTfaApp",
              "ContactAdminMailSent",
              "ImpersonateUserLogin",
              "ImpersonateUserLogout",
              "AcceptRequest",
              "RejectRequest",
              "BlockPartner",
              "UnblockPartner",
              "DeletePartner",
              "ChangePartner",
              "ConfirmPortal",
              "MarkInvoicePaid",
              "MarkInvoiceUnpaid",
              "AddHostedPartner",
              "RemoveHostedPartner",
              "MarkPartnerAuthorized",
              "MarkPartnerNotAuthorized",
              "ChangePartnerLevel",
              "ChangeHostedPartnerQuotas",
              "ChangeHostedPartner",
              "BillLumpSumInvoice",
              "None"
            ],
            "description": "[1000 - LoginSuccess, 1001 - LoginSuccessViaSocialAccount, 1002 - LoginFailInvalidCombination, 1003 - LoginFailSocialAccountNotFound, 1004 - LoginFailDisabledProfile, 1005 - LoginFail, 1006 - Logout, 1007 - LoginSuccessViaSms, 1008 - LoginFailViaSms, 1009 - LoginFailIpSecurity, 1010 - LoginSuccessViaApi, 1011 - LoginSuccessViaSocialApp, 1012 - LoginSuccessViaApiSms, 1013 - LoginFailViaApi, 1014 - LoginFailViaApiSms, 1015 - LoginSuccessViaSSO, 1016 - SessionStarted, 1017 - SessionCompleted, 1018 - LoginFailViaSSO, 1019 - LoginSuccessViaApiSocialAccount, 1020 - LoginFailViaApiSocialAccount, 1021 - LoginSuccesViaTfaApp, 1022 - LoginFailViaTfaApp, 1023 - LoginFailBruteForce, 1024 - LoginSuccessViaApiTfa, 1025 - LoginFailViaApiTfa, 1026 - LoginFailRecaptcha, 2000 - ProjectCreated, 2001 - ProjectCreatedFromTemplate, 2002 - ProjectUpdated, 2003 - ProjectUpdatedStatus, 2004 - ProjectFollowed, 2005 - ProjectUnfollowed, 2006 - ProjectDeleted, 2007 - ProjectDeletedMember, 2008 - ProjectUpdatedTeam, 2009 - ProjectUpdatedMemberRights, 2010 - ProjectLinkedCompany, 2011 - ProjectUnlinkedCompany, 2012 - ProjectLinkedPerson, 2013 - ProjectUnlinkedPerson, 2014 - ProjectLinkedContacts, 2015 - MilestoneCreated, 2016 - MilestoneUpdated, 2017 - MilestoneUpdatedStatus, 2018 - MilestoneDeleted, 2019 - TaskCreated, 2020 - TaskCreatedFromDiscussion, 2021 - TaskUpdated, 2022 - TaskUpdatedStatus, 2023 - TaskMovedToMilestone, 2024 - TaskUnlinkedMilestone, 2025 - TaskUpdatedFollowing, 2026 - TaskAttachedFiles, 2027 - TaskDetachedFile, 2028 - TasksLinked, 2029 - TasksUnlinked, 2030 - TaskDeleted, 2031 - TaskCommentCreated, 2032 - TaskCommentUpdated, 2033 - TaskCommentDeleted, 2034 - SubtaskCreated, 2035 - SubtaskUpdated, 2036 - SubtaskUpdatedStatus, 2037 - SubtaskDeleted, 2038 - DiscussionCreated, 2039 - DiscussionUpdated, 2040 - DiscussionUpdatedFollowing, 2041 - DiscussionAttachedFiles, 2042 - DiscussionDetachedFile, 2043 - DiscussionDeleted, 2044 - DiscussionCommentCreated, 2045 - DiscussionCommentUpdated, 2046 - DiscussionCommentDeleted, 2047 - TaskTimeCreated, 2048 - TaskTimeUpdated, 2049 - TaskTimesUpdatedStatus, 2050 - TaskTimesDeleted, 2051 - ReportTemplateCreated, 2052 - ReportTemplateUpdated, 2053 - ReportTemplateDeleted, 2054 - ProjectTemplateCreated, 2055 - ProjectTemplateUpdated, 2056 - ProjectTemplateDeleted, 2057 - ProjectsImportedFromBasecamp, 2058 - SubtaskMoved, 3000 - CompanyCreated, 3001 - CompanyUpdated, 3002 - CompanyUpdatedPrincipalInfo, 3003 - CompanyUpdatedPhoto, 3004 - CompanyUpdatedTemperatureLevel, 3005 - CompanyUpdatedPersonsTemperatureLevel, 3006 - CompanyCreatedTag, 3007 - CompanyCreatedPersonsTag, 3008 - CompanyDeletedTag, 3009 - CompanyCreatedHistoryEvent, 3010 - CompanyDeletedHistoryEvent, 3011 - CompanyLinkedPerson, 3012 - CompanyUnlinkedPerson, 3013 - CompanyLinkedProject, 3014 - CompanyUnlinkedProject, 3015 - CompanyAttachedFiles, 3016 - CompaniesMerged, 3017 - CompanyDeleted, 3018 - PersonCreated, 3019 - PersonsCreated, 3020 - PersonUpdated, 3021 - PersonUpdatedPrincipalInfo, 3022 - PersonUpdatedPhoto, 3023 - PersonUpdatedTemperatureLevel, 3024 - PersonUpdatedCompanyTemperatureLevel, 3025 - PersonCreatedTag, 3026 - PersonCreatedCompanyTag, 3027 - PersonDeletedTag, 3028 - PersonCreatedHistoryEvent, 3029 - PersonDeletedHistoryEvent, 3030 - PersonLinkedProject, 3031 - PersonUnlinkedProject, 3032 - PersonAttachedFiles, 3033 - PersonsMerged, 3034 - PersonDeleted, 3035 - ContactsDeleted, 3036 - CrmTaskCreated, 3037 - ContactsCreatedCrmTasks, 3038 - CrmTaskUpdated, 3039 - CrmTaskOpened, 3040 - CrmTaskClosed, 3041 - CrmTaskDeleted, 3042 - OpportunityCreated, 3043 - OpportunityUpdated, 3044 - OpportunityUpdatedStage, 3045 - OpportunityCreatedTag, 3046 - OpportunityDeletedTag, 3047 - OpportunityCreatedHistoryEvent, 3048 - OpportunityDeletedHistoryEvent, 3049 - OpportunityLinkedCompany, 3050 - OpportunityUnlinkedCompany, 3051 - OpportunityLinkedPerson, 3052 - OpportunityUnlinkedPerson, 3053 - OpportunityAttachedFiles, 3054 - OpportunityOpenedAccess, 3055 - OpportunityRestrictedAccess, 3056 - OpportunityDeleted, 3057 - OpportunitiesDeleted, 3058 - InvoiceCreated, 3059 - InvoiceUpdated, 3060 - InvoicesUpdatedStatus, 3061 - InvoiceDeleted, 3062 - InvoicesDeleted, 3063 - CaseCreated, 3064 - CaseUpdated, 3065 - CaseOpened, 3066 - CaseClosed, 3067 - CaseCreatedTag, 3068 - CaseDeletedTag, 3069 - CaseCreatedHistoryEvent, 3070 - CaseDeletedHistoryEvent, 3071 - CaseLinkedCompany, 3072 - CaseUnlinkedCompany, 3073 - CaseLinkedPerson, 3074 - CaseUnlinkedPerson, 3075 - CaseAttachedFiles, 3076 - CaseOpenedAccess, 3077 - CaseRestrictedAccess, 3078 - CaseDeleted, 3079 - CasesDeleted, 3080 - CrmSmtpSettingsUpdated, 3081 - CrmTestMailSent, 3082 - CrmDefaultCurrencyUpdated, 3083 - CrmAllDataExported, 3084 - ContactTemperatureLevelCreated, 3085 - ContactTemperatureLevelUpdated, 3086 - ContactTemperatureLevelUpdatedColor, 3087 - ContactTemperatureLevelsUpdatedOrder, 3088 - ContactTemperatureLevelDeleted, 3089 - ContactTemperatureLevelSettingsUpdated, 3090 - ContactTypeCreated, 3091 - ContactTypeUpdated, 3092 - ContactTypesUpdatedOrder, 3093 - ContactTypeDeleted, 3094 - InvoiceItemCreated, 3095 - InvoiceItemUpdated, 3096 - InvoiceItemDeleted, 3097 - InvoiceItemsDeleted, 3098 - InvoiceTaxCreated, 3099 - InvoiceTaxUpdated, 3100 - InvoiceTaxDeleted, 3101 - OrganizationProfileUpdatedCompanyName, 3102 - OrganizationProfileUpdatedInvoiceLogo, 3103 - OrganizationProfileUpdatedAddress, 3104 - InvoiceNumberFormatUpdated, 3105 - ContactUserFieldCreated, 3106 - ContactUserFieldUpdated, 3107 - ContactUserFieldsUpdatedOrder, 3108 - ContactUserFieldDeleted, 3109 - CompanyUserFieldCreated, 3110 - CompanyUserFieldUpdated, 3111 - CompanyUserFieldsUpdatedOrder, 3112 - CompanyUserFieldDeleted, 3113 - PersonUserFieldCreated, 3114 - PersonUserFieldUpdated, 3115 - PersonUserFieldsUpdatedOrder, 3116 - PersonUserFieldDeleted, 3117 - OpportunityUserFieldCreated, 3118 - OpportunityUserFieldUpdated, 3119 - OpportunityUserFieldsUpdatedOrder, 3120 - OpportunityUserFieldDeleted, 3121 - CaseUserFieldCreated, 3122 - CaseUserFieldUpdated, 3123 - CaseUserFieldsUpdatedOrder, 3124 - CaseUserFieldDeleted, 3125 - HistoryEventCategoryCreated, 3126 - HistoryEventCategoryUpdated, 3127 - HistoryEventCategoryUpdatedIcon, 3128 - HistoryEventCategoriesUpdatedOrder, 3129 - HistoryEventCategoryDeleted, 3130 - CrmTaskCategoryCreated, 3131 - CrmTaskCategoryUpdated, 3132 - CrmTaskCategoryUpdatedIcon, 3133 - CrmTaskCategoriesUpdatedOrder, 3134 - CrmTaskCategoryDeleted, 3135 - OpportunityStageCreated, 3136 - OpportunityStageUpdated, 3137 - OpportunityStageUpdatedColor, 3138 - OpportunityStagesUpdatedOrder, 3139 - OpportunityStageDeleted, 3140 - ContactsCreatedTag, 3141 - ContactsDeletedTag, 3142 - OpportunitiesCreatedTag, 3143 - OpportunitiesDeletedTag, 3144 - CasesCreatedTag, 3145 - CasesDeletedTag, 3146 - ContactsTagSettingsUpdated, 3147 - WebsiteContactFormUpdatedKey, 3148 - ContactsImportedFromCSV, 3149 - CrmTasksImportedFromCSV, 3150 - OpportunitiesImportedFromCSV, 3151 - CasesImportedFromCSV, 3152 - ContactsExportedToCsv, 3153 - CrmTasksExportedToCsv, 3154 - OpportunitiesExportedToCsv, 3155 - CasesExportedToCsv, 3157 - CompanyCreatedWithWebForm, 3158 - PersonCreatedWithWebForm, 3159 - CompanyDetachedFile, 3160 - PersonDetachedFile, 3161 - OpportunityDetachedFile, 3162 - CaseDetachedFile, 3163 - CurrencyRateUpdated, 3164 - InvoiceDefaultTermsUpdated, 3165 - InvoiceDownloaded, 3166 - CrmSmtpMailSent, 4000 - UserCreated, 4001 - GuestCreated, 4002 - UserCreatedViaInvite, 4003 - GuestCreatedViaInvite, 4004 - UserActivated, 4005 - GuestActivated, 4006 - UserUpdated, 4007 - UserUpdatedLanguage, 4008 - UserAddedAvatar, 4009 - UserDeletedAvatar, 4010 - UserUpdatedAvatarThumbnails, 4011 - UserLinkedSocialAccount, 4012 - UserUnlinkedSocialAccount, 4013 - UserSentActivationInstructions, 4014 - UserSentEmailChangeInstructions, 4015 - UserSentPasswordChangeInstructions, 4016 - UserSentDeleteInstructions, 4017 - UserUpdatedPassword, 4018 - UserDeleted, 4019 - UsersUpdatedType, 4020 - UsersUpdatedStatus, 4021 - UsersSentActivationInstructions, 4022 - UsersDeleted, 4023 - SentInviteInstructions, 4024 - UserImported, 4025 - GuestImported, 4026 - GroupCreated, 4027 - GroupUpdated, 4028 - GroupDeleted, 4029 - UserUpdatedMobileNumber, 4030 - UserDataReassigns, 4031 - UserDataRemoving, 4032 - UserConnectedTfaApp, 4033 - UserDisconnectedTfaApp, 4034 - UserLogoutActiveConnections, 4035 - UserLogoutActiveConnection, 4036 - UserLogoutActiveConnectionsForUser, 5000 - FileCreated, 5001 - FileRenamed, 5002 - FileUpdated, 5003 - FileCreatedVersion, 5004 - FileDeletedVersion, 5005 - FileUpdatedRevisionComment, 5006 - FileLocked, 5007 - FileUnlocked, 5008 - FileUpdatedAccess, 5009 - FileDownloaded, 5010 - FileDownloadedAs, 5011 - FileUploaded, 5012 - FileImported, 5013 - FileCopied, 5014 - FileCopiedWithOverwriting, 5015 - FileMoved, 5016 - FileMovedWithOverwriting, 5017 - FileMovedToTrash, 5018 - FileDeleted, 5019 - FolderCreated, 5020 - FolderRenamed, 5021 - FolderUpdatedAccess, 5022 - FolderCopied, 5023 - FolderCopiedWithOverwriting, 5024 - FolderMoved, 5025 - FolderMovedWithOverwriting, 5026 - FolderMovedToTrash, 5027 - FolderDeleted, 5028 - ThirdPartyCreated, 5029 - ThirdPartyUpdated, 5030 - ThirdPartyDeleted, 5031 - DocumentsThirdPartySettingsUpdated, 5032 - DocumentsOverwritingSettingsUpdated, 5033 - DocumentsUploadingFormatsSettingsUpdated, 5034 - UserFileUpdated, 5035 - FileConverted, 5036 - FileSendAccessLink, 5037 - DocumentServiceLocationSetting, 5038 - AuthorizationKeysSetting, 5039 - FullTextSearchSetting, 5040 - StartTransferSetting, 5041 - StartBackupSetting, 5042 - LicenseKeyUploaded, 5043 - FileChangeOwner, 5044 - FileRestoreVersion, 5045 - DocumentSendToSign, 5046 - DocumentSignComplete, 5047 - UserUpdatedEmail, 5048 - DocumentsStoreForcesave, 5049 - DocumentsForcesave, 5050 - StartStorageEncryption, 5051 - PrivacyRoomEnable, 5052 - PrivacyRoomDisable, 5053 - StartStorageDecryption, 5054 - FileOpenedForChange, 5055 - FileMarkedAsFavorite, 5056 - FileRemovedFromFavorite, 5057 - FolderDownloaded, 5058 - FileRemovedFromList, 5059 - FolderRemovedFromList, 5060 - FileExternalLinkAccessUpdated, 5061 - TrashEmptied, 5062 - FileRevisionDownloaded, 5063 - FileMarkedAsRead, 5064 - FileReaded, 5065 - FolderMarkedAsRead, 5066 - FolderUpdatedAccessFor, 5067 - FolderMovedFrom, 5068 - FileUpdatedAccessFor, 5069 - DocumentsExternalShareSettingsUpdated, 6000 - LanguageSettingsUpdated, 6001 - TimeZoneSettingsUpdated, 6002 - DnsSettingsUpdated, 6003 - TrustedMailDomainSettingsUpdated, 6004 - PasswordStrengthSettingsUpdated, 6005 - TwoFactorAuthenticationSettingsUpdated, 6006 - AdministratorMessageSettingsUpdated, 6007 - DefaultStartPageSettingsUpdated, 6008 - ProductsListUpdated, 6009 - AdministratorAdded, 6010 - AdministratorOpenedFullAccess, 6011 - AdministratorDeleted, 6012 - UsersOpenedProductAccess, 6013 - GroupsOpenedProductAccess, 6014 - ProductAccessOpened, 6015 - ProductAccessRestricted, 6016 - ProductAddedAdministrator, 6017 - ProductDeletedAdministrator, 6018 - GreetingSettingsUpdated, 6019 - TeamTemplateChanged, 6020 - ColorThemeChanged, 6021 - OwnerSentChangeOwnerInstructions, 6022 - OwnerUpdated, 6023 - OwnerSentPortalDeactivationInstructions, 6024 - OwnerSentPortalDeleteInstructions, 6025 - PortalDeactivated, 6026 - PortalDeleted, 6027 - LoginHistoryReportDownloaded, 6028 - AuditTrailReportDownloaded, 6029 - SSOEnabled, 6030 - SSODisabled, 6031 - PortalAccessSettingsUpdated, 6032 - CookieSettingsUpdated, 6033 - MailServiceSettingsUpdated, 6034 - CustomNavigationSettingsUpdated, 6035 - AuditSettingsUpdated, 6036 - TwoFactorAuthenticationDisabled, 6037 - TwoFactorAuthenticationEnabledBySms, 6038 - TwoFactorAuthenticationEnabledByTfaApp, 7000 - ContactAdminMailSent, 7001 - ImpersonateUserLogin, 7002 - ImpersonateUserLogout, 8000 - AcceptRequest, 8001 - RejectRequest, 8002 - BlockPartner, 8003 - UnblockPartner, 8004 - DeletePartner, 8005 - ChangePartner, 8006 - ConfirmPortal, 8007 - MarkInvoicePaid, 8008 - MarkInvoiceUnpaid, 8009 - AddHostedPartner, 8010 - RemoveHostedPartner, 8011 - MarkPartnerAuthorized, 8012 - MarkPartnerNotAuthorized, 8013 - ChangePartnerLevel, 8014 - ChangeHostedPartnerQuotas, 8015 - ChangeHostedPartner, 8016 - BillLumpSumInvoice, -1 - None]"
          },
          "IP": {
            "type": "string"
          },
          "Browser": {
            "type": "string"
          },
          "Platform": {
            "type": "string"
          },
          "Page": {
            "type": "string"
          }
        }
      },
      "AuditEventWrapper": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Date": {
            "type": "string"
          },
          "User": {
            "type": "string"
          },
          "UserId": {
            "type": "string",
            "format": "uuid"
          },
          "Action": {
            "type": "string"
          },
          "ActionId": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "LoginSuccess",
              "LoginSuccessViaSocialAccount",
              "LoginFailInvalidCombination",
              "LoginFailSocialAccountNotFound",
              "LoginFailDisabledProfile",
              "LoginFail",
              "Logout",
              "LoginSuccessViaSms",
              "LoginFailViaSms",
              "LoginFailIpSecurity",
              "LoginSuccessViaApi",
              "LoginSuccessViaSocialApp",
              "LoginSuccessViaApiSms",
              "LoginFailViaApi",
              "LoginFailViaApiSms",
              "LoginSuccessViaSSO",
              "SessionStarted",
              "SessionCompleted",
              "LoginFailViaSSO",
              "LoginSuccessViaApiSocialAccount",
              "LoginFailViaApiSocialAccount",
              "LoginSuccesViaTfaApp",
              "LoginFailViaTfaApp",
              "LoginFailBruteForce",
              "LoginSuccessViaApiTfa",
              "LoginFailViaApiTfa",
              "LoginFailRecaptcha",
              "ProjectCreated",
              "ProjectCreatedFromTemplate",
              "ProjectUpdated",
              "ProjectUpdatedStatus",
              "ProjectFollowed",
              "ProjectUnfollowed",
              "ProjectDeleted",
              "ProjectDeletedMember",
              "ProjectUpdatedTeam",
              "ProjectUpdatedMemberRights",
              "ProjectLinkedCompany",
              "ProjectUnlinkedCompany",
              "ProjectLinkedPerson",
              "ProjectUnlinkedPerson",
              "ProjectLinkedContacts",
              "MilestoneCreated",
              "MilestoneUpdated",
              "MilestoneUpdatedStatus",
              "MilestoneDeleted",
              "TaskCreated",
              "TaskCreatedFromDiscussion",
              "TaskUpdated",
              "TaskUpdatedStatus",
              "TaskMovedToMilestone",
              "TaskUnlinkedMilestone",
              "TaskUpdatedFollowing",
              "TaskAttachedFiles",
              "TaskDetachedFile",
              "TasksLinked",
              "TasksUnlinked",
              "TaskDeleted",
              "TaskCommentCreated",
              "TaskCommentUpdated",
              "TaskCommentDeleted",
              "SubtaskCreated",
              "SubtaskUpdated",
              "SubtaskUpdatedStatus",
              "SubtaskDeleted",
              "DiscussionCreated",
              "DiscussionUpdated",
              "DiscussionUpdatedFollowing",
              "DiscussionAttachedFiles",
              "DiscussionDetachedFile",
              "DiscussionDeleted",
              "DiscussionCommentCreated",
              "DiscussionCommentUpdated",
              "DiscussionCommentDeleted",
              "TaskTimeCreated",
              "TaskTimeUpdated",
              "TaskTimesUpdatedStatus",
              "TaskTimesDeleted",
              "ReportTemplateCreated",
              "ReportTemplateUpdated",
              "ReportTemplateDeleted",
              "ProjectTemplateCreated",
              "ProjectTemplateUpdated",
              "ProjectTemplateDeleted",
              "ProjectsImportedFromBasecamp",
              "SubtaskMoved",
              "CompanyCreated",
              "CompanyUpdated",
              "CompanyUpdatedPrincipalInfo",
              "CompanyUpdatedPhoto",
              "CompanyUpdatedTemperatureLevel",
              "CompanyUpdatedPersonsTemperatureLevel",
              "CompanyCreatedTag",
              "CompanyCreatedPersonsTag",
              "CompanyDeletedTag",
              "CompanyCreatedHistoryEvent",
              "CompanyDeletedHistoryEvent",
              "CompanyLinkedPerson",
              "CompanyUnlinkedPerson",
              "CompanyLinkedProject",
              "CompanyUnlinkedProject",
              "CompanyAttachedFiles",
              "CompaniesMerged",
              "CompanyDeleted",
              "PersonCreated",
              "PersonsCreated",
              "PersonUpdated",
              "PersonUpdatedPrincipalInfo",
              "PersonUpdatedPhoto",
              "PersonUpdatedTemperatureLevel",
              "PersonUpdatedCompanyTemperatureLevel",
              "PersonCreatedTag",
              "PersonCreatedCompanyTag",
              "PersonDeletedTag",
              "PersonCreatedHistoryEvent",
              "PersonDeletedHistoryEvent",
              "PersonLinkedProject",
              "PersonUnlinkedProject",
              "PersonAttachedFiles",
              "PersonsMerged",
              "PersonDeleted",
              "ContactsDeleted",
              "CrmTaskCreated",
              "ContactsCreatedCrmTasks",
              "CrmTaskUpdated",
              "CrmTaskOpened",
              "CrmTaskClosed",
              "CrmTaskDeleted",
              "OpportunityCreated",
              "OpportunityUpdated",
              "OpportunityUpdatedStage",
              "OpportunityCreatedTag",
              "OpportunityDeletedTag",
              "OpportunityCreatedHistoryEvent",
              "OpportunityDeletedHistoryEvent",
              "OpportunityLinkedCompany",
              "OpportunityUnlinkedCompany",
              "OpportunityLinkedPerson",
              "OpportunityUnlinkedPerson",
              "OpportunityAttachedFiles",
              "OpportunityOpenedAccess",
              "OpportunityRestrictedAccess",
              "OpportunityDeleted",
              "OpportunitiesDeleted",
              "InvoiceCreated",
              "InvoiceUpdated",
              "InvoicesUpdatedStatus",
              "InvoiceDeleted",
              "InvoicesDeleted",
              "CaseCreated",
              "CaseUpdated",
              "CaseOpened",
              "CaseClosed",
              "CaseCreatedTag",
              "CaseDeletedTag",
              "CaseCreatedHistoryEvent",
              "CaseDeletedHistoryEvent",
              "CaseLinkedCompany",
              "CaseUnlinkedCompany",
              "CaseLinkedPerson",
              "CaseUnlinkedPerson",
              "CaseAttachedFiles",
              "CaseOpenedAccess",
              "CaseRestrictedAccess",
              "CaseDeleted",
              "CasesDeleted",
              "CrmSmtpSettingsUpdated",
              "CrmTestMailSent",
              "CrmDefaultCurrencyUpdated",
              "CrmAllDataExported",
              "ContactTemperatureLevelCreated",
              "ContactTemperatureLevelUpdated",
              "ContactTemperatureLevelUpdatedColor",
              "ContactTemperatureLevelsUpdatedOrder",
              "ContactTemperatureLevelDeleted",
              "ContactTemperatureLevelSettingsUpdated",
              "ContactTypeCreated",
              "ContactTypeUpdated",
              "ContactTypesUpdatedOrder",
              "ContactTypeDeleted",
              "InvoiceItemCreated",
              "InvoiceItemUpdated",
              "InvoiceItemDeleted",
              "InvoiceItemsDeleted",
              "InvoiceTaxCreated",
              "InvoiceTaxUpdated",
              "InvoiceTaxDeleted",
              "OrganizationProfileUpdatedCompanyName",
              "OrganizationProfileUpdatedInvoiceLogo",
              "OrganizationProfileUpdatedAddress",
              "InvoiceNumberFormatUpdated",
              "ContactUserFieldCreated",
              "ContactUserFieldUpdated",
              "ContactUserFieldsUpdatedOrder",
              "ContactUserFieldDeleted",
              "CompanyUserFieldCreated",
              "CompanyUserFieldUpdated",
              "CompanyUserFieldsUpdatedOrder",
              "CompanyUserFieldDeleted",
              "PersonUserFieldCreated",
              "PersonUserFieldUpdated",
              "PersonUserFieldsUpdatedOrder",
              "PersonUserFieldDeleted",
              "OpportunityUserFieldCreated",
              "OpportunityUserFieldUpdated",
              "OpportunityUserFieldsUpdatedOrder",
              "OpportunityUserFieldDeleted",
              "CaseUserFieldCreated",
              "CaseUserFieldUpdated",
              "CaseUserFieldsUpdatedOrder",
              "CaseUserFieldDeleted",
              "HistoryEventCategoryCreated",
              "HistoryEventCategoryUpdated",
              "HistoryEventCategoryUpdatedIcon",
              "HistoryEventCategoriesUpdatedOrder",
              "HistoryEventCategoryDeleted",
              "CrmTaskCategoryCreated",
              "CrmTaskCategoryUpdated",
              "CrmTaskCategoryUpdatedIcon",
              "CrmTaskCategoriesUpdatedOrder",
              "CrmTaskCategoryDeleted",
              "OpportunityStageCreated",
              "OpportunityStageUpdated",
              "OpportunityStageUpdatedColor",
              "OpportunityStagesUpdatedOrder",
              "OpportunityStageDeleted",
              "ContactsCreatedTag",
              "ContactsDeletedTag",
              "OpportunitiesCreatedTag",
              "OpportunitiesDeletedTag",
              "CasesCreatedTag",
              "CasesDeletedTag",
              "ContactsTagSettingsUpdated",
              "WebsiteContactFormUpdatedKey",
              "ContactsImportedFromCSV",
              "CrmTasksImportedFromCSV",
              "OpportunitiesImportedFromCSV",
              "CasesImportedFromCSV",
              "ContactsExportedToCsv",
              "CrmTasksExportedToCsv",
              "OpportunitiesExportedToCsv",
              "CasesExportedToCsv",
              "CompanyCreatedWithWebForm",
              "PersonCreatedWithWebForm",
              "CompanyDetachedFile",
              "PersonDetachedFile",
              "OpportunityDetachedFile",
              "CaseDetachedFile",
              "CurrencyRateUpdated",
              "InvoiceDefaultTermsUpdated",
              "InvoiceDownloaded",
              "CrmSmtpMailSent",
              "UserCreated",
              "GuestCreated",
              "UserCreatedViaInvite",
              "GuestCreatedViaInvite",
              "UserActivated",
              "GuestActivated",
              "UserUpdated",
              "UserUpdatedLanguage",
              "UserAddedAvatar",
              "UserDeletedAvatar",
              "UserUpdatedAvatarThumbnails",
              "UserLinkedSocialAccount",
              "UserUnlinkedSocialAccount",
              "UserSentActivationInstructions",
              "UserSentEmailChangeInstructions",
              "UserSentPasswordChangeInstructions",
              "UserSentDeleteInstructions",
              "UserUpdatedPassword",
              "UserDeleted",
              "UsersUpdatedType",
              "UsersUpdatedStatus",
              "UsersSentActivationInstructions",
              "UsersDeleted",
              "SentInviteInstructions",
              "UserImported",
              "GuestImported",
              "GroupCreated",
              "GroupUpdated",
              "GroupDeleted",
              "UserUpdatedMobileNumber",
              "UserDataReassigns",
              "UserDataRemoving",
              "UserConnectedTfaApp",
              "UserDisconnectedTfaApp",
              "UserLogoutActiveConnections",
              "UserLogoutActiveConnection",
              "UserLogoutActiveConnectionsForUser",
              "FileCreated",
              "FileRenamed",
              "FileUpdated",
              "FileCreatedVersion",
              "FileDeletedVersion",
              "FileUpdatedRevisionComment",
              "FileLocked",
              "FileUnlocked",
              "FileUpdatedAccess",
              "FileDownloaded",
              "FileDownloadedAs",
              "FileUploaded",
              "FileImported",
              "FileCopied",
              "FileCopiedWithOverwriting",
              "FileMoved",
              "FileMovedWithOverwriting",
              "FileMovedToTrash",
              "FileDeleted",
              "FolderCreated",
              "FolderRenamed",
              "FolderUpdatedAccess",
              "FolderCopied",
              "FolderCopiedWithOverwriting",
              "FolderMoved",
              "FolderMovedWithOverwriting",
              "FolderMovedToTrash",
              "FolderDeleted",
              "ThirdPartyCreated",
              "ThirdPartyUpdated",
              "ThirdPartyDeleted",
              "DocumentsThirdPartySettingsUpdated",
              "DocumentsOverwritingSettingsUpdated",
              "DocumentsUploadingFormatsSettingsUpdated",
              "UserFileUpdated",
              "FileConverted",
              "FileSendAccessLink",
              "DocumentServiceLocationSetting",
              "AuthorizationKeysSetting",
              "FullTextSearchSetting",
              "StartTransferSetting",
              "StartBackupSetting",
              "LicenseKeyUploaded",
              "FileChangeOwner",
              "FileRestoreVersion",
              "DocumentSendToSign",
              "DocumentSignComplete",
              "UserUpdatedEmail",
              "DocumentsStoreForcesave",
              "DocumentsForcesave",
              "StartStorageEncryption",
              "PrivacyRoomEnable",
              "PrivacyRoomDisable",
              "StartStorageDecryption",
              "FileOpenedForChange",
              "FileMarkedAsFavorite",
              "FileRemovedFromFavorite",
              "FolderDownloaded",
              "FileRemovedFromList",
              "FolderRemovedFromList",
              "FileExternalLinkAccessUpdated",
              "TrashEmptied",
              "FileRevisionDownloaded",
              "FileMarkedAsRead",
              "FileReaded",
              "FolderMarkedAsRead",
              "FolderUpdatedAccessFor",
              "FolderMovedFrom",
              "FileUpdatedAccessFor",
              "DocumentsExternalShareSettingsUpdated",
              "LanguageSettingsUpdated",
              "TimeZoneSettingsUpdated",
              "DnsSettingsUpdated",
              "TrustedMailDomainSettingsUpdated",
              "PasswordStrengthSettingsUpdated",
              "TwoFactorAuthenticationSettingsUpdated",
              "AdministratorMessageSettingsUpdated",
              "DefaultStartPageSettingsUpdated",
              "ProductsListUpdated",
              "AdministratorAdded",
              "AdministratorOpenedFullAccess",
              "AdministratorDeleted",
              "UsersOpenedProductAccess",
              "GroupsOpenedProductAccess",
              "ProductAccessOpened",
              "ProductAccessRestricted",
              "ProductAddedAdministrator",
              "ProductDeletedAdministrator",
              "GreetingSettingsUpdated",
              "TeamTemplateChanged",
              "ColorThemeChanged",
              "OwnerSentChangeOwnerInstructions",
              "OwnerUpdated",
              "OwnerSentPortalDeactivationInstructions",
              "OwnerSentPortalDeleteInstructions",
              "PortalDeactivated",
              "PortalDeleted",
              "LoginHistoryReportDownloaded",
              "AuditTrailReportDownloaded",
              "SSOEnabled",
              "SSODisabled",
              "PortalAccessSettingsUpdated",
              "CookieSettingsUpdated",
              "MailServiceSettingsUpdated",
              "CustomNavigationSettingsUpdated",
              "AuditSettingsUpdated",
              "TwoFactorAuthenticationDisabled",
              "TwoFactorAuthenticationEnabledBySms",
              "TwoFactorAuthenticationEnabledByTfaApp",
              "ContactAdminMailSent",
              "ImpersonateUserLogin",
              "ImpersonateUserLogout",
              "AcceptRequest",
              "RejectRequest",
              "BlockPartner",
              "UnblockPartner",
              "DeletePartner",
              "ChangePartner",
              "ConfirmPortal",
              "MarkInvoicePaid",
              "MarkInvoiceUnpaid",
              "AddHostedPartner",
              "RemoveHostedPartner",
              "MarkPartnerAuthorized",
              "MarkPartnerNotAuthorized",
              "ChangePartnerLevel",
              "ChangeHostedPartnerQuotas",
              "ChangeHostedPartner",
              "BillLumpSumInvoice",
              "None"
            ],
            "description": "[1000 - LoginSuccess, 1001 - LoginSuccessViaSocialAccount, 1002 - LoginFailInvalidCombination, 1003 - LoginFailSocialAccountNotFound, 1004 - LoginFailDisabledProfile, 1005 - LoginFail, 1006 - Logout, 1007 - LoginSuccessViaSms, 1008 - LoginFailViaSms, 1009 - LoginFailIpSecurity, 1010 - LoginSuccessViaApi, 1011 - LoginSuccessViaSocialApp, 1012 - LoginSuccessViaApiSms, 1013 - LoginFailViaApi, 1014 - LoginFailViaApiSms, 1015 - LoginSuccessViaSSO, 1016 - SessionStarted, 1017 - SessionCompleted, 1018 - LoginFailViaSSO, 1019 - LoginSuccessViaApiSocialAccount, 1020 - LoginFailViaApiSocialAccount, 1021 - LoginSuccesViaTfaApp, 1022 - LoginFailViaTfaApp, 1023 - LoginFailBruteForce, 1024 - LoginSuccessViaApiTfa, 1025 - LoginFailViaApiTfa, 1026 - LoginFailRecaptcha, 2000 - ProjectCreated, 2001 - ProjectCreatedFromTemplate, 2002 - ProjectUpdated, 2003 - ProjectUpdatedStatus, 2004 - ProjectFollowed, 2005 - ProjectUnfollowed, 2006 - ProjectDeleted, 2007 - ProjectDeletedMember, 2008 - ProjectUpdatedTeam, 2009 - ProjectUpdatedMemberRights, 2010 - ProjectLinkedCompany, 2011 - ProjectUnlinkedCompany, 2012 - ProjectLinkedPerson, 2013 - ProjectUnlinkedPerson, 2014 - ProjectLinkedContacts, 2015 - MilestoneCreated, 2016 - MilestoneUpdated, 2017 - MilestoneUpdatedStatus, 2018 - MilestoneDeleted, 2019 - TaskCreated, 2020 - TaskCreatedFromDiscussion, 2021 - TaskUpdated, 2022 - TaskUpdatedStatus, 2023 - TaskMovedToMilestone, 2024 - TaskUnlinkedMilestone, 2025 - TaskUpdatedFollowing, 2026 - TaskAttachedFiles, 2027 - TaskDetachedFile, 2028 - TasksLinked, 2029 - TasksUnlinked, 2030 - TaskDeleted, 2031 - TaskCommentCreated, 2032 - TaskCommentUpdated, 2033 - TaskCommentDeleted, 2034 - SubtaskCreated, 2035 - SubtaskUpdated, 2036 - SubtaskUpdatedStatus, 2037 - SubtaskDeleted, 2038 - DiscussionCreated, 2039 - DiscussionUpdated, 2040 - DiscussionUpdatedFollowing, 2041 - DiscussionAttachedFiles, 2042 - DiscussionDetachedFile, 2043 - DiscussionDeleted, 2044 - DiscussionCommentCreated, 2045 - DiscussionCommentUpdated, 2046 - DiscussionCommentDeleted, 2047 - TaskTimeCreated, 2048 - TaskTimeUpdated, 2049 - TaskTimesUpdatedStatus, 2050 - TaskTimesDeleted, 2051 - ReportTemplateCreated, 2052 - ReportTemplateUpdated, 2053 - ReportTemplateDeleted, 2054 - ProjectTemplateCreated, 2055 - ProjectTemplateUpdated, 2056 - ProjectTemplateDeleted, 2057 - ProjectsImportedFromBasecamp, 2058 - SubtaskMoved, 3000 - CompanyCreated, 3001 - CompanyUpdated, 3002 - CompanyUpdatedPrincipalInfo, 3003 - CompanyUpdatedPhoto, 3004 - CompanyUpdatedTemperatureLevel, 3005 - CompanyUpdatedPersonsTemperatureLevel, 3006 - CompanyCreatedTag, 3007 - CompanyCreatedPersonsTag, 3008 - CompanyDeletedTag, 3009 - CompanyCreatedHistoryEvent, 3010 - CompanyDeletedHistoryEvent, 3011 - CompanyLinkedPerson, 3012 - CompanyUnlinkedPerson, 3013 - CompanyLinkedProject, 3014 - CompanyUnlinkedProject, 3015 - CompanyAttachedFiles, 3016 - CompaniesMerged, 3017 - CompanyDeleted, 3018 - PersonCreated, 3019 - PersonsCreated, 3020 - PersonUpdated, 3021 - PersonUpdatedPrincipalInfo, 3022 - PersonUpdatedPhoto, 3023 - PersonUpdatedTemperatureLevel, 3024 - PersonUpdatedCompanyTemperatureLevel, 3025 - PersonCreatedTag, 3026 - PersonCreatedCompanyTag, 3027 - PersonDeletedTag, 3028 - PersonCreatedHistoryEvent, 3029 - PersonDeletedHistoryEvent, 3030 - PersonLinkedProject, 3031 - PersonUnlinkedProject, 3032 - PersonAttachedFiles, 3033 - PersonsMerged, 3034 - PersonDeleted, 3035 - ContactsDeleted, 3036 - CrmTaskCreated, 3037 - ContactsCreatedCrmTasks, 3038 - CrmTaskUpdated, 3039 - CrmTaskOpened, 3040 - CrmTaskClosed, 3041 - CrmTaskDeleted, 3042 - OpportunityCreated, 3043 - OpportunityUpdated, 3044 - OpportunityUpdatedStage, 3045 - OpportunityCreatedTag, 3046 - OpportunityDeletedTag, 3047 - OpportunityCreatedHistoryEvent, 3048 - OpportunityDeletedHistoryEvent, 3049 - OpportunityLinkedCompany, 3050 - OpportunityUnlinkedCompany, 3051 - OpportunityLinkedPerson, 3052 - OpportunityUnlinkedPerson, 3053 - OpportunityAttachedFiles, 3054 - OpportunityOpenedAccess, 3055 - OpportunityRestrictedAccess, 3056 - OpportunityDeleted, 3057 - OpportunitiesDeleted, 3058 - InvoiceCreated, 3059 - InvoiceUpdated, 3060 - InvoicesUpdatedStatus, 3061 - InvoiceDeleted, 3062 - InvoicesDeleted, 3063 - CaseCreated, 3064 - CaseUpdated, 3065 - CaseOpened, 3066 - CaseClosed, 3067 - CaseCreatedTag, 3068 - CaseDeletedTag, 3069 - CaseCreatedHistoryEvent, 3070 - CaseDeletedHistoryEvent, 3071 - CaseLinkedCompany, 3072 - CaseUnlinkedCompany, 3073 - CaseLinkedPerson, 3074 - CaseUnlinkedPerson, 3075 - CaseAttachedFiles, 3076 - CaseOpenedAccess, 3077 - CaseRestrictedAccess, 3078 - CaseDeleted, 3079 - CasesDeleted, 3080 - CrmSmtpSettingsUpdated, 3081 - CrmTestMailSent, 3082 - CrmDefaultCurrencyUpdated, 3083 - CrmAllDataExported, 3084 - ContactTemperatureLevelCreated, 3085 - ContactTemperatureLevelUpdated, 3086 - ContactTemperatureLevelUpdatedColor, 3087 - ContactTemperatureLevelsUpdatedOrder, 3088 - ContactTemperatureLevelDeleted, 3089 - ContactTemperatureLevelSettingsUpdated, 3090 - ContactTypeCreated, 3091 - ContactTypeUpdated, 3092 - ContactTypesUpdatedOrder, 3093 - ContactTypeDeleted, 3094 - InvoiceItemCreated, 3095 - InvoiceItemUpdated, 3096 - InvoiceItemDeleted, 3097 - InvoiceItemsDeleted, 3098 - InvoiceTaxCreated, 3099 - InvoiceTaxUpdated, 3100 - InvoiceTaxDeleted, 3101 - OrganizationProfileUpdatedCompanyName, 3102 - OrganizationProfileUpdatedInvoiceLogo, 3103 - OrganizationProfileUpdatedAddress, 3104 - InvoiceNumberFormatUpdated, 3105 - ContactUserFieldCreated, 3106 - ContactUserFieldUpdated, 3107 - ContactUserFieldsUpdatedOrder, 3108 - ContactUserFieldDeleted, 3109 - CompanyUserFieldCreated, 3110 - CompanyUserFieldUpdated, 3111 - CompanyUserFieldsUpdatedOrder, 3112 - CompanyUserFieldDeleted, 3113 - PersonUserFieldCreated, 3114 - PersonUserFieldUpdated, 3115 - PersonUserFieldsUpdatedOrder, 3116 - PersonUserFieldDeleted, 3117 - OpportunityUserFieldCreated, 3118 - OpportunityUserFieldUpdated, 3119 - OpportunityUserFieldsUpdatedOrder, 3120 - OpportunityUserFieldDeleted, 3121 - CaseUserFieldCreated, 3122 - CaseUserFieldUpdated, 3123 - CaseUserFieldsUpdatedOrder, 3124 - CaseUserFieldDeleted, 3125 - HistoryEventCategoryCreated, 3126 - HistoryEventCategoryUpdated, 3127 - HistoryEventCategoryUpdatedIcon, 3128 - HistoryEventCategoriesUpdatedOrder, 3129 - HistoryEventCategoryDeleted, 3130 - CrmTaskCategoryCreated, 3131 - CrmTaskCategoryUpdated, 3132 - CrmTaskCategoryUpdatedIcon, 3133 - CrmTaskCategoriesUpdatedOrder, 3134 - CrmTaskCategoryDeleted, 3135 - OpportunityStageCreated, 3136 - OpportunityStageUpdated, 3137 - OpportunityStageUpdatedColor, 3138 - OpportunityStagesUpdatedOrder, 3139 - OpportunityStageDeleted, 3140 - ContactsCreatedTag, 3141 - ContactsDeletedTag, 3142 - OpportunitiesCreatedTag, 3143 - OpportunitiesDeletedTag, 3144 - CasesCreatedTag, 3145 - CasesDeletedTag, 3146 - ContactsTagSettingsUpdated, 3147 - WebsiteContactFormUpdatedKey, 3148 - ContactsImportedFromCSV, 3149 - CrmTasksImportedFromCSV, 3150 - OpportunitiesImportedFromCSV, 3151 - CasesImportedFromCSV, 3152 - ContactsExportedToCsv, 3153 - CrmTasksExportedToCsv, 3154 - OpportunitiesExportedToCsv, 3155 - CasesExportedToCsv, 3157 - CompanyCreatedWithWebForm, 3158 - PersonCreatedWithWebForm, 3159 - CompanyDetachedFile, 3160 - PersonDetachedFile, 3161 - OpportunityDetachedFile, 3162 - CaseDetachedFile, 3163 - CurrencyRateUpdated, 3164 - InvoiceDefaultTermsUpdated, 3165 - InvoiceDownloaded, 3166 - CrmSmtpMailSent, 4000 - UserCreated, 4001 - GuestCreated, 4002 - UserCreatedViaInvite, 4003 - GuestCreatedViaInvite, 4004 - UserActivated, 4005 - GuestActivated, 4006 - UserUpdated, 4007 - UserUpdatedLanguage, 4008 - UserAddedAvatar, 4009 - UserDeletedAvatar, 4010 - UserUpdatedAvatarThumbnails, 4011 - UserLinkedSocialAccount, 4012 - UserUnlinkedSocialAccount, 4013 - UserSentActivationInstructions, 4014 - UserSentEmailChangeInstructions, 4015 - UserSentPasswordChangeInstructions, 4016 - UserSentDeleteInstructions, 4017 - UserUpdatedPassword, 4018 - UserDeleted, 4019 - UsersUpdatedType, 4020 - UsersUpdatedStatus, 4021 - UsersSentActivationInstructions, 4022 - UsersDeleted, 4023 - SentInviteInstructions, 4024 - UserImported, 4025 - GuestImported, 4026 - GroupCreated, 4027 - GroupUpdated, 4028 - GroupDeleted, 4029 - UserUpdatedMobileNumber, 4030 - UserDataReassigns, 4031 - UserDataRemoving, 4032 - UserConnectedTfaApp, 4033 - UserDisconnectedTfaApp, 4034 - UserLogoutActiveConnections, 4035 - UserLogoutActiveConnection, 4036 - UserLogoutActiveConnectionsForUser, 5000 - FileCreated, 5001 - FileRenamed, 5002 - FileUpdated, 5003 - FileCreatedVersion, 5004 - FileDeletedVersion, 5005 - FileUpdatedRevisionComment, 5006 - FileLocked, 5007 - FileUnlocked, 5008 - FileUpdatedAccess, 5009 - FileDownloaded, 5010 - FileDownloadedAs, 5011 - FileUploaded, 5012 - FileImported, 5013 - FileCopied, 5014 - FileCopiedWithOverwriting, 5015 - FileMoved, 5016 - FileMovedWithOverwriting, 5017 - FileMovedToTrash, 5018 - FileDeleted, 5019 - FolderCreated, 5020 - FolderRenamed, 5021 - FolderUpdatedAccess, 5022 - FolderCopied, 5023 - FolderCopiedWithOverwriting, 5024 - FolderMoved, 5025 - FolderMovedWithOverwriting, 5026 - FolderMovedToTrash, 5027 - FolderDeleted, 5028 - ThirdPartyCreated, 5029 - ThirdPartyUpdated, 5030 - ThirdPartyDeleted, 5031 - DocumentsThirdPartySettingsUpdated, 5032 - DocumentsOverwritingSettingsUpdated, 5033 - DocumentsUploadingFormatsSettingsUpdated, 5034 - UserFileUpdated, 5035 - FileConverted, 5036 - FileSendAccessLink, 5037 - DocumentServiceLocationSetting, 5038 - AuthorizationKeysSetting, 5039 - FullTextSearchSetting, 5040 - StartTransferSetting, 5041 - StartBackupSetting, 5042 - LicenseKeyUploaded, 5043 - FileChangeOwner, 5044 - FileRestoreVersion, 5045 - DocumentSendToSign, 5046 - DocumentSignComplete, 5047 - UserUpdatedEmail, 5048 - DocumentsStoreForcesave, 5049 - DocumentsForcesave, 5050 - StartStorageEncryption, 5051 - PrivacyRoomEnable, 5052 - PrivacyRoomDisable, 5053 - StartStorageDecryption, 5054 - FileOpenedForChange, 5055 - FileMarkedAsFavorite, 5056 - FileRemovedFromFavorite, 5057 - FolderDownloaded, 5058 - FileRemovedFromList, 5059 - FolderRemovedFromList, 5060 - FileExternalLinkAccessUpdated, 5061 - TrashEmptied, 5062 - FileRevisionDownloaded, 5063 - FileMarkedAsRead, 5064 - FileReaded, 5065 - FolderMarkedAsRead, 5066 - FolderUpdatedAccessFor, 5067 - FolderMovedFrom, 5068 - FileUpdatedAccessFor, 5069 - DocumentsExternalShareSettingsUpdated, 6000 - LanguageSettingsUpdated, 6001 - TimeZoneSettingsUpdated, 6002 - DnsSettingsUpdated, 6003 - TrustedMailDomainSettingsUpdated, 6004 - PasswordStrengthSettingsUpdated, 6005 - TwoFactorAuthenticationSettingsUpdated, 6006 - AdministratorMessageSettingsUpdated, 6007 - DefaultStartPageSettingsUpdated, 6008 - ProductsListUpdated, 6009 - AdministratorAdded, 6010 - AdministratorOpenedFullAccess, 6011 - AdministratorDeleted, 6012 - UsersOpenedProductAccess, 6013 - GroupsOpenedProductAccess, 6014 - ProductAccessOpened, 6015 - ProductAccessRestricted, 6016 - ProductAddedAdministrator, 6017 - ProductDeletedAdministrator, 6018 - GreetingSettingsUpdated, 6019 - TeamTemplateChanged, 6020 - ColorThemeChanged, 6021 - OwnerSentChangeOwnerInstructions, 6022 - OwnerUpdated, 6023 - OwnerSentPortalDeactivationInstructions, 6024 - OwnerSentPortalDeleteInstructions, 6025 - PortalDeactivated, 6026 - PortalDeleted, 6027 - LoginHistoryReportDownloaded, 6028 - AuditTrailReportDownloaded, 6029 - SSOEnabled, 6030 - SSODisabled, 6031 - PortalAccessSettingsUpdated, 6032 - CookieSettingsUpdated, 6033 - MailServiceSettingsUpdated, 6034 - CustomNavigationSettingsUpdated, 6035 - AuditSettingsUpdated, 6036 - TwoFactorAuthenticationDisabled, 6037 - TwoFactorAuthenticationEnabledBySms, 6038 - TwoFactorAuthenticationEnabledByTfaApp, 7000 - ContactAdminMailSent, 7001 - ImpersonateUserLogin, 7002 - ImpersonateUserLogout, 8000 - AcceptRequest, 8001 - RejectRequest, 8002 - BlockPartner, 8003 - UnblockPartner, 8004 - DeletePartner, 8005 - ChangePartner, 8006 - ConfirmPortal, 8007 - MarkInvoicePaid, 8008 - MarkInvoiceUnpaid, 8009 - AddHostedPartner, 8010 - RemoveHostedPartner, 8011 - MarkPartnerAuthorized, 8012 - MarkPartnerNotAuthorized, 8013 - ChangePartnerLevel, 8014 - ChangeHostedPartnerQuotas, 8015 - ChangeHostedPartner, 8016 - BillLumpSumInvoice, -1 - None]"
          },
          "IP": {
            "type": "string"
          },
          "Browser": {
            "type": "string"
          },
          "Platform": {
            "type": "string"
          },
          "Page": {
            "type": "string"
          },
          "ActionType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "Create",
              "Update",
              "Delete",
              "Link",
              "Unlink",
              "Attach",
              "Detach",
              "Send",
              "Import",
              "Export",
              "UpdateAccess",
              "Download",
              "Upload",
              "Copy",
              "Move",
              "Reassigns",
              "Follow",
              "Unfollow",
              "Logout"
            ],
            "description": "[0 - None, 1 - Create, 2 - Update, 3 - Delete, 4 - Link, 5 - Unlink, 6 - Attach, 7 - Detach, 8 - Send, 9 - Import, 10 - Export, 11 - UpdateAccess, 12 - Download, 13 - Upload, 14 - Copy, 15 - Move, 16 - Reassigns, 17 - Follow, 18 - Unfollow, 19 - Logout]"
          },
          "Product": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "CRM",
              "Documents",
              "Login",
              "Others",
              "People",
              "Projects",
              "Settings"
            ],
            "description": "[0 - None, 1 - CRM, 2 - Documents, 3 - Login, 4 - Others, 5 - People, 6 - Projects, 7 - Settings]"
          },
          "Module": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "Files",
              "Folders",
              "DocumentsSettings",
              "Companies",
              "Persons",
              "Contacts",
              "CrmTasks",
              "Opportunities",
              "Invoices",
              "Cases",
              "CommonCrmSettings",
              "ContactsSettings",
              "ContactTypes",
              "InvoiceSettings",
              "OtherCrmSettings",
              "Users",
              "Groups",
              "Projects",
              "Milestones",
              "Tasks",
              "Discussions",
              "TimeTracking",
              "Reports",
              "ProjectsSettings",
              "General",
              "Products"
            ],
            "description": "[0 - None, 1 - Files, 2 - Folders, 3 - DocumentsSettings, 4 - Companies, 5 - Persons, 6 - Contacts, 7 - CrmTasks, 8 - Opportunities, 9 - Invoices, 10 - Cases, 11 - CommonCrmSettings, 12 - ContactsSettings, 13 - ContactTypes, 14 - InvoiceSettings, 15 - OtherCrmSettings, 16 - Users, 17 - Groups, 18 - Projects, 19 - Milestones, 20 - Tasks, 21 - Discussions, 22 - TimeTracking, 23 - Reports, 24 - ProjectsSettings, 25 - General, 26 - Products]"
          },
          "Target": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Entries": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "ModelTypes": {
        "type": "object",
        "properties": {
          "Actions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ActionTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ProductTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ModuleTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "EntryTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TenantAuditSettings": {
        "type": "object",
        "properties": {
          "LoginHistoryLifeTime": {
            "type": "integer",
            "format": "int32"
          },
          "AuditTrailLifeTime": {
            "type": "integer",
            "format": "int32"
          },
          "ID": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "LoginSettings": {
        "type": "object",
        "properties": {
          "AttemptCount": {
            "type": "integer",
            "format": "int32"
          },
          "BlockTime": {
            "type": "integer",
            "format": "int32"
          },
          "CheckPeriod": {
            "type": "integer",
            "format": "int32"
          },
          "ID": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ImpersonationSettings": {
        "type": "object",
        "properties": {
          "Enabled": {
            "type": "boolean"
          },
          "EnableType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "DisableForAdmins",
              "EnableForAllFullAdmins",
              "EnableWithLimits"
            ],
            "description": "[0 - DisableForAdmins, 1 - EnableForAllFullAdmins, 2 - EnableWithLimits]"
          },
          "OnlyForOwnGroups": {
            "type": "boolean"
          },
          "AllowedAdmins": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "RestrictionUsers": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "RestrictionGroups": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "ID": {
            "type": "string",
            "format": "uuid"
          },
          "Available": {
            "type": "boolean"
          }
        }
      },
      "IPRestrictionsSettings": {
        "type": "object",
        "properties": {
          "Enable": {
            "type": "boolean",
            "example": "true"
          },
          "ID": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "TipsSettings": {
        "type": "object",
        "properties": {
          "Show": {
            "type": "boolean",
            "example": "true"
          },
          "ID": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "TfaSettingsWrapper": {
        "type": "object"
      },
      "FireBaseUser": {
        "type": "object",
        "properties": {
          "UserId": {
            "type": "string",
            "format": "uuid"
          },
          "TenantId": {
            "type": "integer",
            "format": "int32"
          },
          "FirebaseDeviceToken": {
            "type": "string"
          },
          "Application": {
            "type": "string"
          },
          "IsSubscribed": {
            "type": "array",
            "items": {
              "type": "boolean"
            }
          }
        }
      },
      "CustomNavigationItem": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "Label": {
            "type": "string",
            "example": "Label"
          },
          "Url": {
            "type": "string",
            "example": "Url"
          },
          "BigImg": {
            "type": "string",
            "example": "data:image\\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAGQAAABkAgMAAAANjH3HAAAADFBMVEUAAADJycnJycnJycmiuNtHAAAAA3RSTlMAf4C\\/aSLHAAAAyElEQVR4Xu3NsQ3CMBSE4YubFB4ilHQegdGSjWACvEpGoEyBYiL05AdnXUGHolx10lf82MmOpfLeo5UoJUhBlpKkRCnhUy7b9XCWkqQMUkYlXVHSf8kTvkHKqKQrSnopg5SRxTMklLmS1MwaSWpmCSQ1MyOzWGZCYrEMEFksA4QqlAFuJJYBcCKxjM3FMySeIfEMC2dMOONCGZZgmdr1ly3TSrJMK9EyJBaaGrHQikYstAiJZRYSyiQEdyg5S8Evckih\\/YPscsdej0H6dc0TYw4AAAAASUVORK5CYII="
          },
          "SmallImg": {
            "type": "string",
            "example": "data:image\\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\\/9hAAAAUUlEQVR4AWMY\\/KC5o\\/cAEP9HxxgKcSpCGELYADyu2E6mAQjNxBlAWPNxkHdwGkBIM3KYYDUAr2ZCAE+oH8eujrAXDsA0k2EAAtDXAGLx4MpsADUgvkRKUlqfAAAAAElFTkSuQmCC"
          },
          "ShowInMenu": {
            "type": "boolean",
            "example": "true"
          },
          "ShowOnHomePage": {
            "type": "boolean",
            "example": "true"
          }
        }
      },
      "EmailActivationSettings": {
        "type": "object",
        "properties": {
          "Show": {
            "type": "boolean",
            "example": "true"
          },
          "ID": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "UsageSpaceStatItemWrapper": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "example": "Item name"
          },
          "Icon": {
            "type": "string",
            "example": "Item icon path"
          },
          "Disabled": {
            "type": "boolean",
            "example": "false"
          },
          "Size": {
            "type": "string",
            "example": "0 Byte"
          },
          "Url": {
            "type": "string",
            "example": "Item url"
          }
        }
      },
      "ChartPointWrapper": {
        "type": "object",
        "properties": {
          "DisplayDate": {
            "type": "string",
            "example": "12/22/2020"
          },
          "Date": {
            "type": "string",
            "format": "date-time",
            "example": "2020-12-22T04:11:57.0469085+00:00"
          },
          "Hosts": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "Hits": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          }
        }
      },
      "AuthKey": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "example": "name"
          },
          "Value": {
            "type": "string",
            "example": "Value"
          },
          "Title": {
            "type": "string",
            "example": "Title"
          },
          "Description": {
            "type": "string",
            "example": "Description"
          },
          "IsPassword": {
            "type": "boolean"
          },
          "IsOptional": {
            "type": "boolean"
          }
        }
      },
      "StorageWrapper": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "example": "Id"
          },
          "Title": {
            "type": "string",
            "example": "Title"
          },
          "Properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthKey"
            }
          },
          "Current": {
            "type": "boolean",
            "example": "true"
          },
          "IsSet": {
            "type": "boolean",
            "example": "true"
          }
        }
      },
      "DataStoreConsumer": {
        "type": "object",
        "properties": {
          "HandlerType": {
            "type": "object"
          },
          "Cdn": {
            "type": "object"
          },
          "AdditionalKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "CanSet": {
            "type": "boolean"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          },
          "ManagedKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "IsSet": {
            "type": "boolean"
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "IsReadOnly": {
            "type": "boolean"
          },
          "Item": {
            "type": "string"
          }
        }
      },
      "IQuotaController": {
        "type": "object"
      },
      "IDataStore": {
        "type": "object",
        "properties": {
          "QuotaController": {
            "$ref": "#/components/schemas/IQuotaController"
          },
          "IsSupportInternalUri": {
            "type": "boolean"
          },
          "IsSupportChunking": {
            "type": "boolean"
          },
          "IsSupportedPreSignedUri": {
            "type": "boolean"
          },
          "IsContentDispositionAsAttachment": {
            "type": "boolean"
          }
        }
      },
      "StorageSettings": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string",
            "format": "uuid"
          },
          "Module": {
            "type": "string",
            "example": "Module"
          },
          "Props": {
            "type": "object",
            "example": "Props"
          },
          "DataStoreConsumer": {
            "$ref": "#/components/schemas/DataStoreConsumer"
          },
          "DataStore": {
            "$ref": "#/components/schemas/IDataStore"
          },
          "Switch": {
            "type": "object"
          }
        }
      },
      "CdnStorageSettings": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string",
            "format": "uuid"
          },
          "Switch": {
            "type": "object"
          },
          "Module": {
            "type": "string",
            "example": "Module"
          },
          "Props": {
            "type": "object",
            "example": "Props"
          },
          "DataStoreConsumer": {
            "$ref": "#/components/schemas/DataStoreConsumer"
          },
          "DataStore": {
            "$ref": "#/components/schemas/IDataStore"
          }
        }
      },
      "SmtpSettingsWrapper": {
        "type": "object",
        "properties": {
          "Host": {
            "type": "string",
            "example": "mail.example.com"
          },
          "Port": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "example": "25"
            }
          },
          "SenderAddress": {
            "type": "string",
            "example": "notify@example.com"
          },
          "SenderDisplayName": {
            "type": "string",
            "example": "Postman"
          },
          "CredentialsUserName": {
            "type": "string",
            "example": "notify@example.com"
          },
          "CredentialsUserPassword": {
            "type": "string",
            "example": "{password}"
          },
          "EnableSSL": {
            "type": "boolean",
            "example": "false"
          },
          "EnableAuth": {
            "type": "boolean",
            "example": "true"
          },
          "UseNtlm": {
            "type": "boolean"
          }
        }
      },
      "SmtpOperationStatus": {
        "type": "object",
        "properties": {
          "Completed": {
            "type": "boolean",
            "example": "true"
          },
          "Id": {
            "type": "string",
            "example": "{some-random-guid}"
          },
          "Status": {
            "type": "string",
            "example": ""
          },
          "Error": {
            "type": "string",
            "example": ""
          },
          "Percents": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "Source": {
            "type": "string",
            "example": ""
          }
        }
      },
      "SsoIdpSettings": {
        "type": "object",
        "properties": {
          "EntityId": {
            "type": "string",
            "example": "EntityId"
          },
          "SsoUrl": {
            "type": "string",
            "example": "SsoUrl"
          },
          "SsoBinding": {
            "type": "string",
            "example": "SsoBinding"
          },
          "SloUrl": {
            "type": "string",
            "example": "SloUrl"
          },
          "SloBinding": {
            "type": "string",
            "example": "SloBinding"
          },
          "NameIdFormat": {
            "type": "string",
            "example": "NameIdFormat"
          }
        }
      },
      "SsoCertificate": {
        "type": "object",
        "properties": {
          "SelfSigned": {
            "type": "boolean",
            "example": "true"
          },
          "Crt": {
            "type": "string",
            "example": "Crt"
          },
          "Key": {
            "type": "string",
            "example": "Key"
          },
          "Action": {
            "type": "string",
            "example": "Action"
          },
          "DomainName": {
            "type": "string",
            "example": "DomainName"
          },
          "StartDate": {
            "type": "string",
            "format": "date-time",
            "example": "2019-07-26T00:00:00"
          },
          "ExpiredDate": {
            "type": "string",
            "format": "date-time",
            "example": "2019-07-26T00:00:00"
          }
        }
      },
      "SsoIdpCertificateAdvanced": {
        "type": "object",
        "properties": {
          "VerifyAlgorithm": {
            "type": "string",
            "example": "VerifyAlgorithm"
          },
          "VerifyAuthResponsesSign": {
            "type": "boolean",
            "example": "true"
          },
          "VerifyLogoutRequestsSign": {
            "type": "boolean",
            "example": "true"
          },
          "VerifyLogoutResponsesSign": {
            "type": "boolean",
            "example": "true"
          },
          "DecryptAlgorithm": {
            "type": "string",
            "example": "true"
          },
          "DecryptAssertions": {
            "type": "boolean",
            "example": "true"
          }
        }
      },
      "SsoSpCertificateAdvanced": {
        "type": "object",
        "properties": {
          "SigningAlgorithm": {
            "type": "string",
            "example": "SigningAlgorithm"
          },
          "SignAuthRequests": {
            "type": "boolean",
            "example": "true"
          },
          "SignLogoutRequests": {
            "type": "boolean",
            "example": "true"
          },
          "SignLogoutResponses": {
            "type": "boolean",
            "example": "true"
          },
          "EncryptAlgorithm": {
            "type": "string",
            "example": "true"
          },
          "DecryptAlgorithm": {
            "type": "string",
            "example": "true"
          },
          "EncryptAssertions": {
            "type": "boolean"
          }
        }
      },
      "SsoFieldMapping": {
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string",
            "example": "FirstName"
          },
          "LastName": {
            "type": "string",
            "example": "LastName"
          },
          "Email": {
            "type": "string",
            "example": "Email"
          },
          "Title": {
            "type": "string",
            "example": "Title"
          },
          "Location": {
            "type": "string",
            "example": "Location"
          },
          "Phone": {
            "type": "string",
            "example": "Phone"
          }
        }
      },
      "SsoSettingsV2": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string",
            "format": "uuid"
          },
          "EnableSso": {
            "type": "boolean",
            "example": "true"
          },
          "IdpSettings": {
            "$ref": "#/components/schemas/SsoIdpSettings"
          },
          "IdpCertificates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SsoCertificate"
            }
          },
          "IdpCertificateAdvanced": {
            "$ref": "#/components/schemas/SsoIdpCertificateAdvanced"
          },
          "SpLoginLabel": {
            "type": "string",
            "example": "SpLoginLabel"
          },
          "SpCertificates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SsoCertificate"
            }
          },
          "SpCertificateAdvanced": {
            "$ref": "#/components/schemas/SsoSpCertificateAdvanced"
          },
          "FieldMapping": {
            "$ref": "#/components/schemas/SsoFieldMapping"
          },
          "HideAuthPage": {
            "type": "boolean",
            "example": "true"
          }
        }
      },
      "LdapSettings": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string",
            "format": "uuid"
          },
          "GetImportedFields": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "EnableLdapAuthentication": {
            "type": "boolean",
            "example": "true"
          },
          "StartTls": {
            "type": "boolean",
            "example": "true"
          },
          "Ssl": {
            "type": "boolean",
            "example": "true"
          },
          "SendWelcomeEmail": {
            "type": "boolean",
            "example": "true"
          },
          "Server": {
            "type": "string",
            "example": "Server"
          },
          "UserDN": {
            "type": "string",
            "example": "UserDN"
          },
          "PortNumber": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "UserFilter": {
            "type": "string",
            "example": "UserFilter"
          },
          "LoginAttribute": {
            "type": "string",
            "example": "LoginAttribute"
          },
          "LdapMapping": {
            "type": "object",
            "example": "null"
          },
          "AccessRights": {
            "type": "object",
            "example": "null"
          },
          "FirstNameAttribute": {
            "type": "string",
            "example": "FirstNameAttribute"
          },
          "SecondNameAttribute": {
            "type": "string",
            "example": "SecondNameAttribute"
          },
          "MailAttribute": {
            "type": "string",
            "example": "MailAttribute"
          },
          "TitleAttribute": {
            "type": "string",
            "example": "TitleAttribute"
          },
          "MobilePhoneAttribute": {
            "type": "string",
            "example": "MobilePhoneAttribute"
          },
          "LocationAttribute": {
            "type": "string",
            "example": "LocationAttribute"
          },
          "GroupMembership": {
            "type": "boolean",
            "example": "true"
          },
          "GroupDN": {
            "type": "string",
            "example": "GroupDN"
          },
          "GroupNameAttribute": {
            "type": "string",
            "example": "GroupNameAttribute"
          },
          "GroupFilter": {
            "type": "string",
            "example": "GroupFilter"
          },
          "UserAttribute": {
            "type": "string",
            "example": "UserAttribute"
          },
          "GroupAttribute": {
            "type": "string",
            "example": "GroupAttribute"
          },
          "Authentication": {
            "type": "boolean",
            "example": "true"
          },
          "Login": {
            "type": "string",
            "example": "Login"
          },
          "Password": {
            "type": "string",
            "example": "Password"
          },
          "PasswordBytes": {
            "type": "array",
            "items": {
              "type": "object",
              "example": "1"
            }
          },
          "IsDefault": {
            "type": "boolean",
            "example": "true"
          },
          "AcceptCertificate": {
            "type": "boolean",
            "example": "true"
          },
          "AcceptCertificateHash": {
            "type": "string",
            "example": "AcceptCertificateHash"
          }
        }
      },
      "LdapCertificateConfirmRequest": {
        "type": "object",
        "properties": {
          "Approved": {
            "type": "boolean",
            "example": "true"
          },
          "Requested": {
            "type": "boolean",
            "example": "true"
          },
          "SerialNumber": {
            "type": "string",
            "example": "SerialNumber"
          },
          "IssuerName": {
            "type": "string",
            "example": "IssuerName"
          },
          "SubjectName": {
            "type": "string",
            "example": "SubjectName"
          },
          "ValidFrom": {
            "type": "string",
            "format": "date-time",
            "example": "2019-07-26T00:00:00"
          },
          "ValidUntil": {
            "type": "string",
            "format": "date-time",
            "example": "2019-07-26T00:00:00"
          },
          "Hash": {
            "type": "string",
            "example": "Hash"
          },
          "CertificateErrors": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "example": "1"
            }
          }
        }
      },
      "LdapOperationStatus": {
        "type": "object",
        "properties": {
          "Completed": {
            "type": "boolean",
            "example": "true"
          },
          "Id": {
            "type": "string",
            "example": "true"
          },
          "Status": {
            "type": "string",
            "example": "true"
          },
          "Error": {
            "type": "string",
            "example": "true"
          },
          "Warning": {
            "type": "string",
            "example": "true"
          },
          "Percents": {
            "type": "integer",
            "format": "int32",
            "example": "true"
          },
          "CertificateConfirmRequest": {
            "$ref": "#/components/schemas/LdapCertificateConfirmRequest"
          },
          "Source": {
            "type": "string",
            "example": "Source"
          },
          "OperationType": {
            "type": "string",
            "example": "OperationType"
          }
        }
      },
      "SettingsWrapper": {
        "type": "object",
        "properties": {
          "Timezone": {
            "type": "string",
            "example": "UTC"
          },
          "TrustedDomains": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "mydomain.com"
            }
          },
          "TrustedDomainsType": {
            "type": "integer",
            "format": "int32",
            "enum": [
              "None",
              "Custom",
              "All"
            ],
            "description": "[0 - None, 1 - Custom, 2 - All]",
            "example": "0"
          },
          "Culture": {
            "type": "string",
            "example": "en-US"
          },
          "UtcOffset": {
            "type": "string",
            "format": "timespan",
            "example": "-08:30:00"
          },
          "UtcHoursOffset": {
            "type": "number",
            "format": "double",
            "example": "-8.5"
          }
        }
      },
      "QuotaUsage": {
        "type": "object",
        "properties": {
          "Path": {
            "type": "string"
          },
          "Size": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "QuotaWrapper": {
        "type": "object",
        "properties": {
          "StorageSize": {
            "type": "integer",
            "format": "uint64",
            "example": "1073741824"
          },
          "MaxFileSize": {
            "type": "integer",
            "format": "uint64",
            "example": "26214400"
          },
          "UsedSize": {
            "type": "integer",
            "format": "uint64",
            "example": "262144000"
          },
          "MaxUsersCount": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "UsersCount": {
            "type": "integer",
            "format": "int32",
            "example": "0"
          },
          "AvailableSize": {
            "type": "integer",
            "format": "uint64",
            "example": "0"
          },
          "AvailableUsersCount": {
            "type": "integer",
            "format": "int32"
          },
          "StorageUsage": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuotaUsage"
            }
          },
          "UserStorageSize": {
            "type": "integer",
            "format": "int64"
          },
          "UserUsedSize": {
            "type": "integer",
            "format": "int64"
          },
          "UserAvailableSize": {
            "type": "integer",
            "format": "int64"
          },
          "MaxVisitors": {
            "type": "integer",
            "format": "int64"
          },
          "VisitorsCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "TenantUserQuotaSettings": {
        "type": "object",
        "properties": {
          "EnableUserQuota": {
            "type": "boolean"
          },
          "DefaultUserQuota": {
            "type": "integer",
            "format": "int64"
          },
          "LastRecalculateDate": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "TenantQuotaSettings": {
        "type": "object",
        "properties": {
          "DisableQuota": {
            "type": "boolean"
          },
          "ID": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "SecurityWrapper": {
        "type": "object",
        "properties": {
          "WebItemId": {
            "type": "string",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeWraper"
            }
          },
          "Groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupWrapperSummary"
            }
          },
          "Enabled": {
            "type": "boolean",
            "example": "true"
          },
          "IsSubItem": {
            "type": "boolean",
            "example": "false"
          }
        }
      },
      "PasswordSettings": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "string",
            "format": "uuid"
          },
          "LimitMaxLength": {
            "type": "integer",
            "format": "int32"
          },
          "LimitMinLength": {
            "type": "integer",
            "format": "int32"
          },
          "MaxLength": {
            "type": "integer",
            "format": "int32"
          },
          "MinLength": {
            "type": "integer",
            "format": "int32"
          },
          "AllowedCharactersRegexStr": {
            "type": "string"
          },
          "UpperCase": {
            "type": "boolean"
          },
          "UpperCaseRegexStr": {
            "type": "string"
          },
          "Digits": {
            "type": "boolean"
          },
          "DigitsRegexStr": {
            "type": "string"
          },
          "SpecSymbols": {
            "type": "boolean"
          },
          "SpecSymbolsRegexStr": {
            "type": "string"
          }
        }
      },
      "IPRestriction": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "example": "123"
          },
          "TenantId": {
            "type": "integer",
            "format": "int32",
            "example": "1"
          },
          "Ip": {
            "type": "string",
            "example": "Ip"
          },
          "ForAdmin": {
            "type": "boolean",
            "example": "false"
          }
        }
      },
      "IPRestrictionBase": {
        "type": "object",
        "properties": {
          "Ip": {
            "type": "string",
            "example": "Ip"
          },
          "ForAdmin": {
            "type": "boolean",
            "example": "false"
          }
        }
      },
      "CapabilitiesData": {
        "type": "object",
        "properties": {
          "LdapEnabled": {
            "type": "boolean",
            "example": "false"
          },
          "OauthEnabled": {
            "type": "boolean",
            "example": "google,facebook,twitter,linkedin,mailru,vk,yandex,gosuslugi"
          },
          "Providers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "SsoLabel": {
            "type": "string",
            "example": ""
          },
          "SsoUrl": {
            "type": "string",
            "example": ""
          }
        }
      }
    }
  }
}